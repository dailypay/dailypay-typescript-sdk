/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type SchemeOauthClientCredentialsToken = {
  clientID: string;
  clientSecret: string;
  tokenURL?: string | undefined;
};

/** @internal */
export const SchemeOauthClientCredentialsToken$inboundSchema: z.ZodType<
  SchemeOauthClientCredentialsToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  clientID: z.string(),
  clientSecret: z.string(),
  tokenURL: z.string().default("https://api.dailypay.com/oauth/token"),
});

/** @internal */
export type SchemeOauthClientCredentialsToken$Outbound = {
  clientID: string;
  clientSecret: string;
  tokenURL: string;
};

/** @internal */
export const SchemeOauthClientCredentialsToken$outboundSchema: z.ZodType<
  SchemeOauthClientCredentialsToken$Outbound,
  z.ZodTypeDef,
  SchemeOauthClientCredentialsToken
> = z.object({
  clientID: z.string(),
  clientSecret: z.string(),
  tokenURL: z.string().default("https://api.dailypay.com/oauth/token"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemeOauthClientCredentialsToken$ {
  /** @deprecated use `SchemeOauthClientCredentialsToken$inboundSchema` instead. */
  export const inboundSchema = SchemeOauthClientCredentialsToken$inboundSchema;
  /** @deprecated use `SchemeOauthClientCredentialsToken$outboundSchema` instead. */
  export const outboundSchema =
    SchemeOauthClientCredentialsToken$outboundSchema;
  /** @deprecated use `SchemeOauthClientCredentialsToken$Outbound` instead. */
  export type Outbound = SchemeOauthClientCredentialsToken$Outbound;
}

export function schemeOauthClientCredentialsTokenToJSON(
  schemeOauthClientCredentialsToken: SchemeOauthClientCredentialsToken,
): string {
  return JSON.stringify(
    SchemeOauthClientCredentialsToken$outboundSchema.parse(
      schemeOauthClientCredentialsToken,
    ),
  );
}

export function schemeOauthClientCredentialsTokenFromJSON(
  jsonString: string,
): SafeParseResult<SchemeOauthClientCredentialsToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SchemeOauthClientCredentialsToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SchemeOauthClientCredentialsToken' from JSON`,
  );
}
