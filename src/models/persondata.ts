/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PersonResource,
  PersonResource$inboundSchema,
  PersonResource$Outbound,
  PersonResource$outboundSchema,
} from "./personresource.js";

/**
 * Returns the person object.
 */
export type PersonData = {
  data: PersonResource;
};

/** @internal */
export const PersonData$inboundSchema: z.ZodType<
  PersonData,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: PersonResource$inboundSchema,
});

/** @internal */
export type PersonData$Outbound = {
  data: PersonResource$Outbound;
};

/** @internal */
export const PersonData$outboundSchema: z.ZodType<
  PersonData$Outbound,
  z.ZodTypeDef,
  PersonData
> = z.object({
  data: PersonResource$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PersonData$ {
  /** @deprecated use `PersonData$inboundSchema` instead. */
  export const inboundSchema = PersonData$inboundSchema;
  /** @deprecated use `PersonData$outboundSchema` instead. */
  export const outboundSchema = PersonData$outboundSchema;
  /** @deprecated use `PersonData$Outbound` instead. */
  export type Outbound = PersonData$Outbound;
}

export function personDataToJSON(personData: PersonData): string {
  return JSON.stringify(PersonData$outboundSchema.parse(personData));
}

export function personDataFromJSON(
  jsonString: string,
): SafeParseResult<PersonData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PersonData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PersonData' from JSON`,
  );
}
