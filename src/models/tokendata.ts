/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type TokenData = {
  accessToken?: string | undefined;
  refreshToken?: string | undefined;
  tokenType?: string | undefined;
  scope?: string | undefined;
  idToken?: string | undefined;
  expiresIn?: number | undefined;
};

/** @internal */
export const TokenData$inboundSchema: z.ZodType<
  TokenData,
  z.ZodTypeDef,
  unknown
> = z.object({
  access_token: z.string().optional(),
  refresh_token: z.string().optional(),
  token_type: z.string().optional(),
  scope: z.string().optional(),
  id_token: z.string().optional(),
  expires_in: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    "access_token": "accessToken",
    "refresh_token": "refreshToken",
    "token_type": "tokenType",
    "id_token": "idToken",
    "expires_in": "expiresIn",
  });
});

/** @internal */
export type TokenData$Outbound = {
  access_token?: string | undefined;
  refresh_token?: string | undefined;
  token_type?: string | undefined;
  scope?: string | undefined;
  id_token?: string | undefined;
  expires_in?: number | undefined;
};

/** @internal */
export const TokenData$outboundSchema: z.ZodType<
  TokenData$Outbound,
  z.ZodTypeDef,
  TokenData
> = z.object({
  accessToken: z.string().optional(),
  refreshToken: z.string().optional(),
  tokenType: z.string().optional(),
  scope: z.string().optional(),
  idToken: z.string().optional(),
  expiresIn: z.number().int().optional(),
}).transform((v) => {
  return remap$(v, {
    accessToken: "access_token",
    refreshToken: "refresh_token",
    tokenType: "token_type",
    idToken: "id_token",
    expiresIn: "expires_in",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenData$ {
  /** @deprecated use `TokenData$inboundSchema` instead. */
  export const inboundSchema = TokenData$inboundSchema;
  /** @deprecated use `TokenData$outboundSchema` instead. */
  export const outboundSchema = TokenData$outboundSchema;
  /** @deprecated use `TokenData$Outbound` instead. */
  export type Outbound = TokenData$Outbound;
}

export function tokenDataToJSON(tokenData: TokenData): string {
  return JSON.stringify(TokenData$outboundSchema.parse(tokenData));
}

export function tokenDataFromJSON(
  jsonString: string,
): SafeParseResult<TokenData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TokenData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TokenData' from JSON`,
  );
}
