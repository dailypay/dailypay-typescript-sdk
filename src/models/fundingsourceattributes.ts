/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type FundingSourceAttributes = {
  /**
   * A monetary quantity expressed in units of the lowest denomination in the associated currency. For example, `{ amount: 7250, currency: 'USD' }` resolves to $72.50.
   */
  amount: number;
  /**
   * A three-letter ISO 4217 currency code. For example, `USD` for US Dollars, `EUR` for Euros, or `JPY` for Japanese Yen.
   */
  currency: string;
};

/** @internal */
export const FundingSourceAttributes$inboundSchema: z.ZodType<
  FundingSourceAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().int(),
  currency: z.string(),
});

/** @internal */
export type FundingSourceAttributes$Outbound = {
  amount: number;
  currency: string;
};

/** @internal */
export const FundingSourceAttributes$outboundSchema: z.ZodType<
  FundingSourceAttributes$Outbound,
  z.ZodTypeDef,
  FundingSourceAttributes
> = z.object({
  amount: z.number().int(),
  currency: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FundingSourceAttributes$ {
  /** @deprecated use `FundingSourceAttributes$inboundSchema` instead. */
  export const inboundSchema = FundingSourceAttributes$inboundSchema;
  /** @deprecated use `FundingSourceAttributes$outboundSchema` instead. */
  export const outboundSchema = FundingSourceAttributes$outboundSchema;
  /** @deprecated use `FundingSourceAttributes$Outbound` instead. */
  export type Outbound = FundingSourceAttributes$Outbound;
}

export function fundingSourceAttributesToJSON(
  fundingSourceAttributes: FundingSourceAttributes,
): string {
  return JSON.stringify(
    FundingSourceAttributes$outboundSchema.parse(fundingSourceAttributes),
  );
}

export function fundingSourceAttributesFromJSON(
  jsonString: string,
): SafeParseResult<FundingSourceAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FundingSourceAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FundingSourceAttributes' from JSON`,
  );
}
