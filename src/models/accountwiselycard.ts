/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AccountWiselyCard = {
  /**
   * The first name of the account holder.
   */
  firstName: string;
  /**
   * The last name of the account holder.
   */
  lastName: string;
  /**
   * The month of the expiration date for the card.
   */
  expirationMonth: string;
  /**
   * The year of the expiration date for the card.
   */
  expirationYear: string;
  /**
   * The first line of the address for the card.
   */
  addressLineOne: string;
  /**
   * The second line of the address for the card.
   */
  addressLineTwo?: string | undefined;
  /**
   * The city of the address for the card.
   */
  addressCity: string;
  /**
   * The two-letter abbreviation of the state in the address for the card.
   */
  addressState: string;
  /**
   * The zip code of the address for the card.
   */
  addressZipCode: string;
  /**
   * The country code of the address for the card.
   */
  addressCountry: string;
  /**
   * Wisely unique identifier associated to card.
   */
  wiselyToken: string;
  /**
   * Last four digits of the card number.
   */
  lastFour: string;
  /**
   * The issuer of the card.
   */
  issuer: string;
};

/** @internal */
export const AccountWiselyCard$inboundSchema: z.ZodType<
  AccountWiselyCard,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string(),
  last_name: z.string(),
  expiration_month: z.string(),
  expiration_year: z.string(),
  address_line_one: z.string(),
  address_line_two: z.string().optional(),
  address_city: z.string(),
  address_state: z.string(),
  address_zip_code: z.string(),
  address_country: z.string(),
  wisely_token: z.string(),
  last_four: z.string(),
  issuer: z.string(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "expiration_month": "expirationMonth",
    "expiration_year": "expirationYear",
    "address_line_one": "addressLineOne",
    "address_line_two": "addressLineTwo",
    "address_city": "addressCity",
    "address_state": "addressState",
    "address_zip_code": "addressZipCode",
    "address_country": "addressCountry",
    "wisely_token": "wiselyToken",
    "last_four": "lastFour",
  });
});

/** @internal */
export type AccountWiselyCard$Outbound = {
  first_name: string;
  last_name: string;
  expiration_month: string;
  expiration_year: string;
  address_line_one: string;
  address_line_two?: string | undefined;
  address_city: string;
  address_state: string;
  address_zip_code: string;
  address_country: string;
  wisely_token: string;
  last_four: string;
  issuer: string;
};

/** @internal */
export const AccountWiselyCard$outboundSchema: z.ZodType<
  AccountWiselyCard$Outbound,
  z.ZodTypeDef,
  AccountWiselyCard
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  expirationMonth: z.string(),
  expirationYear: z.string(),
  addressLineOne: z.string(),
  addressLineTwo: z.string().optional(),
  addressCity: z.string(),
  addressState: z.string(),
  addressZipCode: z.string(),
  addressCountry: z.string(),
  wiselyToken: z.string(),
  lastFour: z.string(),
  issuer: z.string(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    expirationMonth: "expiration_month",
    expirationYear: "expiration_year",
    addressLineOne: "address_line_one",
    addressLineTwo: "address_line_two",
    addressCity: "address_city",
    addressState: "address_state",
    addressZipCode: "address_zip_code",
    addressCountry: "address_country",
    wiselyToken: "wisely_token",
    lastFour: "last_four",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountWiselyCard$ {
  /** @deprecated use `AccountWiselyCard$inboundSchema` instead. */
  export const inboundSchema = AccountWiselyCard$inboundSchema;
  /** @deprecated use `AccountWiselyCard$outboundSchema` instead. */
  export const outboundSchema = AccountWiselyCard$outboundSchema;
  /** @deprecated use `AccountWiselyCard$Outbound` instead. */
  export type Outbound = AccountWiselyCard$Outbound;
}

export function accountWiselyCardToJSON(
  accountWiselyCard: AccountWiselyCard,
): string {
  return JSON.stringify(
    AccountWiselyCard$outboundSchema.parse(accountWiselyCard),
  );
}

export function accountWiselyCardFromJSON(
  jsonString: string,
): SafeParseResult<AccountWiselyCard, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountWiselyCard$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountWiselyCard' from JSON`,
  );
}
