/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AccountRelationship,
  AccountRelationship$inboundSchema,
  AccountRelationship$Outbound,
  AccountRelationship$outboundSchema,
} from "./accountrelationship.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PersonRelationship,
  PersonRelationship$inboundSchema,
  PersonRelationship$Outbound,
  PersonRelationship$outboundSchema,
} from "./personrelationship.js";

/**
 * The relationships between the transfer and other resources, including the destination account, the origination account, and the person who initiated the transfer.
 *
 * @remarks
 */
export type TransferCreateRelationships = {
  origin: AccountRelationship;
  destination: AccountRelationship;
  person: PersonRelationship;
};

/** @internal */
export const TransferCreateRelationships$inboundSchema: z.ZodType<
  TransferCreateRelationships,
  z.ZodTypeDef,
  unknown
> = z.object({
  origin: AccountRelationship$inboundSchema,
  destination: AccountRelationship$inboundSchema,
  person: PersonRelationship$inboundSchema,
});

/** @internal */
export type TransferCreateRelationships$Outbound = {
  origin: AccountRelationship$Outbound;
  destination: AccountRelationship$Outbound;
  person: PersonRelationship$Outbound;
};

/** @internal */
export const TransferCreateRelationships$outboundSchema: z.ZodType<
  TransferCreateRelationships$Outbound,
  z.ZodTypeDef,
  TransferCreateRelationships
> = z.object({
  origin: AccountRelationship$outboundSchema,
  destination: AccountRelationship$outboundSchema,
  person: PersonRelationship$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferCreateRelationships$ {
  /** @deprecated use `TransferCreateRelationships$inboundSchema` instead. */
  export const inboundSchema = TransferCreateRelationships$inboundSchema;
  /** @deprecated use `TransferCreateRelationships$outboundSchema` instead. */
  export const outboundSchema = TransferCreateRelationships$outboundSchema;
  /** @deprecated use `TransferCreateRelationships$Outbound` instead. */
  export type Outbound = TransferCreateRelationships$Outbound;
}

export function transferCreateRelationshipsToJSON(
  transferCreateRelationships: TransferCreateRelationships,
): string {
  return JSON.stringify(
    TransferCreateRelationships$outboundSchema.parse(
      transferCreateRelationships,
    ),
  );
}

export function transferCreateRelationshipsFromJSON(
  jsonString: string,
): SafeParseResult<TransferCreateRelationships, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferCreateRelationships$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferCreateRelationships' from JSON`,
  );
}
