/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * An account of type CARD with subtype GALILEO.
 */
export type AccountGalileoCardInput = {
  /**
   * The card ID provided by Galileo.
   */
  galileoCardId: string;
  /**
   * The payment reference number provided by Galileo.
   */
  galileoPmtRefNo: string;
};

/** @internal */
export const AccountGalileoCardInput$inboundSchema: z.ZodType<
  AccountGalileoCardInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  galileo_card_id: z.string(),
  galileo_pmt_ref_no: z.string(),
}).transform((v) => {
  return remap$(v, {
    "galileo_card_id": "galileoCardId",
    "galileo_pmt_ref_no": "galileoPmtRefNo",
  });
});

/** @internal */
export type AccountGalileoCardInput$Outbound = {
  galileo_card_id: string;
  galileo_pmt_ref_no: string;
};

/** @internal */
export const AccountGalileoCardInput$outboundSchema: z.ZodType<
  AccountGalileoCardInput$Outbound,
  z.ZodTypeDef,
  AccountGalileoCardInput
> = z.object({
  galileoCardId: z.string(),
  galileoPmtRefNo: z.string(),
}).transform((v) => {
  return remap$(v, {
    galileoCardId: "galileo_card_id",
    galileoPmtRefNo: "galileo_pmt_ref_no",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountGalileoCardInput$ {
  /** @deprecated use `AccountGalileoCardInput$inboundSchema` instead. */
  export const inboundSchema = AccountGalileoCardInput$inboundSchema;
  /** @deprecated use `AccountGalileoCardInput$outboundSchema` instead. */
  export const outboundSchema = AccountGalileoCardInput$outboundSchema;
  /** @deprecated use `AccountGalileoCardInput$Outbound` instead. */
  export type Outbound = AccountGalileoCardInput$Outbound;
}

export function accountGalileoCardInputToJSON(
  accountGalileoCardInput: AccountGalileoCardInput,
): string {
  return JSON.stringify(
    AccountGalileoCardInput$outboundSchema.parse(accountGalileoCardInput),
  );
}

export function accountGalileoCardInputFromJSON(
  jsonString: string,
): SafeParseResult<AccountGalileoCardInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountGalileoCardInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountGalileoCardInput' from JSON`,
  );
}
