/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  JobAttributesInput,
  JobAttributesInput$inboundSchema,
  JobAttributesInput$Outbound,
  JobAttributesInput$outboundSchema,
} from "./jobattributes.js";
import {
  JobRelationshipsInput,
  JobRelationshipsInput$inboundSchema,
  JobRelationshipsInput$Outbound,
  JobRelationshipsInput$outboundSchema,
} from "./jobrelationshipsinput.js";

/**
 * A job describes the financial relationship between a person and an organization.
 */
export type Data = {
  type: "jobs";
  id: string;
  attributes?: JobAttributesInput | undefined;
  /**
   * The relationships between the job and other resources, including the accounts to which paychecks from this job are deposited.
   */
  relationships?: JobRelationshipsInput | undefined;
};

export type JobUpdateData = {
  /**
   * A job describes the financial relationship between a person and an organization.
   */
  data: Data;
};

/** @internal */
export const Data$inboundSchema: z.ZodType<Data, z.ZodTypeDef, unknown> = z
  .object({
    type: z.literal("jobs"),
    id: z.string(),
    attributes: JobAttributesInput$inboundSchema.optional(),
    relationships: JobRelationshipsInput$inboundSchema.optional(),
  });

/** @internal */
export type Data$Outbound = {
  type: "jobs";
  id: string;
  attributes?: JobAttributesInput$Outbound | undefined;
  relationships?: JobRelationshipsInput$Outbound | undefined;
};

/** @internal */
export const Data$outboundSchema: z.ZodType<Data$Outbound, z.ZodTypeDef, Data> =
  z.object({
    type: z.literal("jobs"),
    id: z.string(),
    attributes: JobAttributesInput$outboundSchema.optional(),
    relationships: JobRelationshipsInput$outboundSchema.optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Data$ {
  /** @deprecated use `Data$inboundSchema` instead. */
  export const inboundSchema = Data$inboundSchema;
  /** @deprecated use `Data$outboundSchema` instead. */
  export const outboundSchema = Data$outboundSchema;
  /** @deprecated use `Data$Outbound` instead. */
  export type Outbound = Data$Outbound;
}

export function dataToJSON(data: Data): string {
  return JSON.stringify(Data$outboundSchema.parse(data));
}

export function dataFromJSON(
  jsonString: string,
): SafeParseResult<Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Data' from JSON`,
  );
}

/** @internal */
export const JobUpdateData$inboundSchema: z.ZodType<
  JobUpdateData,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.lazy(() => Data$inboundSchema),
});

/** @internal */
export type JobUpdateData$Outbound = {
  data: Data$Outbound;
};

/** @internal */
export const JobUpdateData$outboundSchema: z.ZodType<
  JobUpdateData$Outbound,
  z.ZodTypeDef,
  JobUpdateData
> = z.object({
  data: z.lazy(() => Data$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobUpdateData$ {
  /** @deprecated use `JobUpdateData$inboundSchema` instead. */
  export const inboundSchema = JobUpdateData$inboundSchema;
  /** @deprecated use `JobUpdateData$outboundSchema` instead. */
  export const outboundSchema = JobUpdateData$outboundSchema;
  /** @deprecated use `JobUpdateData$Outbound` instead. */
  export type Outbound = JobUpdateData$Outbound;
}

export function jobUpdateDataToJSON(jobUpdateData: JobUpdateData): string {
  return JSON.stringify(JobUpdateData$outboundSchema.parse(jobUpdateData));
}

export function jobUpdateDataFromJSON(
  jsonString: string,
): SafeParseResult<JobUpdateData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobUpdateData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobUpdateData' from JSON`,
  );
}
