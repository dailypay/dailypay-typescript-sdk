/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A list of links to resources that may be helpful in resolving the error.
 */
export type ErrorTransferCreateErrorLinks = {
  about?: string | undefined;
};

/**
 * Location in the request that may have caused the error.
 */
export type ErrorTransferCreateErrorSource = {
  /**
   * The name of the parameter that caused the error.
   */
  parameter?: string | undefined;
  /**
   * A JSON Pointer to the location in the request that caused the error.
   */
  pointer?: string | undefined;
  /**
   * The name of the header that caused the error.
   */
  header?: string | undefined;
};

/**
 * Additional information about the error.
 */
export type ErrorTransferCreateErrorMeta = {
  /**
   * A UUID for the originating request.
   */
  requestId?: string | undefined;
  /**
   * An ID used for tracing purposes.
   */
  traceId?: string | undefined;
};

export type ErrorTransferCreateError = {
  /**
   * A code that indicates what went wrong. Please consider this an open enum, where new codes may be added over time.
   */
  code: string;
  /**
   * The HTTP status code for the error.
   */
  status: string;
  /**
   * A message that explains the meaning of the error code. Developers are advised not to make programmatic use of this value, as it may change
   */
  detail: string;
  /**
   * A list of links to resources that may be helpful in resolving the error.
   */
  links: ErrorTransferCreateErrorLinks;
  /**
   * Location in the request that may have caused the error.
   */
  source?: ErrorTransferCreateErrorSource | undefined;
  /**
   * Additional information about the error.
   */
  meta: ErrorTransferCreateErrorMeta;
};

/** @internal */
export const ErrorTransferCreateErrorLinks$inboundSchema: z.ZodType<
  ErrorTransferCreateErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  about: z.string().optional(),
});

/** @internal */
export type ErrorTransferCreateErrorLinks$Outbound = {
  about?: string | undefined;
};

/** @internal */
export const ErrorTransferCreateErrorLinks$outboundSchema: z.ZodType<
  ErrorTransferCreateErrorLinks$Outbound,
  z.ZodTypeDef,
  ErrorTransferCreateErrorLinks
> = z.object({
  about: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorTransferCreateErrorLinks$ {
  /** @deprecated use `ErrorTransferCreateErrorLinks$inboundSchema` instead. */
  export const inboundSchema = ErrorTransferCreateErrorLinks$inboundSchema;
  /** @deprecated use `ErrorTransferCreateErrorLinks$outboundSchema` instead. */
  export const outboundSchema = ErrorTransferCreateErrorLinks$outboundSchema;
  /** @deprecated use `ErrorTransferCreateErrorLinks$Outbound` instead. */
  export type Outbound = ErrorTransferCreateErrorLinks$Outbound;
}

export function errorTransferCreateErrorLinksToJSON(
  errorTransferCreateErrorLinks: ErrorTransferCreateErrorLinks,
): string {
  return JSON.stringify(
    ErrorTransferCreateErrorLinks$outboundSchema.parse(
      errorTransferCreateErrorLinks,
    ),
  );
}

export function errorTransferCreateErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<ErrorTransferCreateErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorTransferCreateErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorTransferCreateErrorLinks' from JSON`,
  );
}

/** @internal */
export const ErrorTransferCreateErrorSource$inboundSchema: z.ZodType<
  ErrorTransferCreateErrorSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameter: z.string().optional(),
  pointer: z.string().optional(),
  header: z.string().optional(),
});

/** @internal */
export type ErrorTransferCreateErrorSource$Outbound = {
  parameter?: string | undefined;
  pointer?: string | undefined;
  header?: string | undefined;
};

/** @internal */
export const ErrorTransferCreateErrorSource$outboundSchema: z.ZodType<
  ErrorTransferCreateErrorSource$Outbound,
  z.ZodTypeDef,
  ErrorTransferCreateErrorSource
> = z.object({
  parameter: z.string().optional(),
  pointer: z.string().optional(),
  header: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorTransferCreateErrorSource$ {
  /** @deprecated use `ErrorTransferCreateErrorSource$inboundSchema` instead. */
  export const inboundSchema = ErrorTransferCreateErrorSource$inboundSchema;
  /** @deprecated use `ErrorTransferCreateErrorSource$outboundSchema` instead. */
  export const outboundSchema = ErrorTransferCreateErrorSource$outboundSchema;
  /** @deprecated use `ErrorTransferCreateErrorSource$Outbound` instead. */
  export type Outbound = ErrorTransferCreateErrorSource$Outbound;
}

export function errorTransferCreateErrorSourceToJSON(
  errorTransferCreateErrorSource: ErrorTransferCreateErrorSource,
): string {
  return JSON.stringify(
    ErrorTransferCreateErrorSource$outboundSchema.parse(
      errorTransferCreateErrorSource,
    ),
  );
}

export function errorTransferCreateErrorSourceFromJSON(
  jsonString: string,
): SafeParseResult<ErrorTransferCreateErrorSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorTransferCreateErrorSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorTransferCreateErrorSource' from JSON`,
  );
}

/** @internal */
export const ErrorTransferCreateErrorMeta$inboundSchema: z.ZodType<
  ErrorTransferCreateErrorMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  request_id: z.string().optional(),
  trace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
    "trace_id": "traceId",
  });
});

/** @internal */
export type ErrorTransferCreateErrorMeta$Outbound = {
  request_id?: string | undefined;
  trace_id?: string | undefined;
};

/** @internal */
export const ErrorTransferCreateErrorMeta$outboundSchema: z.ZodType<
  ErrorTransferCreateErrorMeta$Outbound,
  z.ZodTypeDef,
  ErrorTransferCreateErrorMeta
> = z.object({
  requestId: z.string().optional(),
  traceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
    traceId: "trace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorTransferCreateErrorMeta$ {
  /** @deprecated use `ErrorTransferCreateErrorMeta$inboundSchema` instead. */
  export const inboundSchema = ErrorTransferCreateErrorMeta$inboundSchema;
  /** @deprecated use `ErrorTransferCreateErrorMeta$outboundSchema` instead. */
  export const outboundSchema = ErrorTransferCreateErrorMeta$outboundSchema;
  /** @deprecated use `ErrorTransferCreateErrorMeta$Outbound` instead. */
  export type Outbound = ErrorTransferCreateErrorMeta$Outbound;
}

export function errorTransferCreateErrorMetaToJSON(
  errorTransferCreateErrorMeta: ErrorTransferCreateErrorMeta,
): string {
  return JSON.stringify(
    ErrorTransferCreateErrorMeta$outboundSchema.parse(
      errorTransferCreateErrorMeta,
    ),
  );
}

export function errorTransferCreateErrorMetaFromJSON(
  jsonString: string,
): SafeParseResult<ErrorTransferCreateErrorMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorTransferCreateErrorMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorTransferCreateErrorMeta' from JSON`,
  );
}

/** @internal */
export const ErrorTransferCreateError$inboundSchema: z.ZodType<
  ErrorTransferCreateError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  status: z.string(),
  detail: z.string(),
  links: z.lazy(() => ErrorTransferCreateErrorLinks$inboundSchema),
  source: z.lazy(() => ErrorTransferCreateErrorSource$inboundSchema).optional(),
  meta: z.lazy(() => ErrorTransferCreateErrorMeta$inboundSchema),
});

/** @internal */
export type ErrorTransferCreateError$Outbound = {
  code: string;
  status: string;
  detail: string;
  links: ErrorTransferCreateErrorLinks$Outbound;
  source?: ErrorTransferCreateErrorSource$Outbound | undefined;
  meta: ErrorTransferCreateErrorMeta$Outbound;
};

/** @internal */
export const ErrorTransferCreateError$outboundSchema: z.ZodType<
  ErrorTransferCreateError$Outbound,
  z.ZodTypeDef,
  ErrorTransferCreateError
> = z.object({
  code: z.string(),
  status: z.string(),
  detail: z.string(),
  links: z.lazy(() => ErrorTransferCreateErrorLinks$outboundSchema),
  source: z.lazy(() => ErrorTransferCreateErrorSource$outboundSchema)
    .optional(),
  meta: z.lazy(() => ErrorTransferCreateErrorMeta$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorTransferCreateError$ {
  /** @deprecated use `ErrorTransferCreateError$inboundSchema` instead. */
  export const inboundSchema = ErrorTransferCreateError$inboundSchema;
  /** @deprecated use `ErrorTransferCreateError$outboundSchema` instead. */
  export const outboundSchema = ErrorTransferCreateError$outboundSchema;
  /** @deprecated use `ErrorTransferCreateError$Outbound` instead. */
  export type Outbound = ErrorTransferCreateError$Outbound;
}

export function errorTransferCreateErrorToJSON(
  errorTransferCreateError: ErrorTransferCreateError,
): string {
  return JSON.stringify(
    ErrorTransferCreateError$outboundSchema.parse(errorTransferCreateError),
  );
}

export function errorTransferCreateErrorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorTransferCreateError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorTransferCreateError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorTransferCreateError' from JSON`,
  );
}
