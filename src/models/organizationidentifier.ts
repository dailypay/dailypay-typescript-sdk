/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type OrganizationIdentifier = {
  type: "organizations";
  id: string;
};

/** @internal */
export const OrganizationIdentifier$inboundSchema: z.ZodType<
  OrganizationIdentifier,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("organizations"),
  id: z.string(),
});

/** @internal */
export type OrganizationIdentifier$Outbound = {
  type: "organizations";
  id: string;
};

/** @internal */
export const OrganizationIdentifier$outboundSchema: z.ZodType<
  OrganizationIdentifier$Outbound,
  z.ZodTypeDef,
  OrganizationIdentifier
> = z.object({
  type: z.literal("organizations"),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationIdentifier$ {
  /** @deprecated use `OrganizationIdentifier$inboundSchema` instead. */
  export const inboundSchema = OrganizationIdentifier$inboundSchema;
  /** @deprecated use `OrganizationIdentifier$outboundSchema` instead. */
  export const outboundSchema = OrganizationIdentifier$outboundSchema;
  /** @deprecated use `OrganizationIdentifier$Outbound` instead. */
  export type Outbound = OrganizationIdentifier$Outbound;
}

export function organizationIdentifierToJSON(
  organizationIdentifier: OrganizationIdentifier,
): string {
  return JSON.stringify(
    OrganizationIdentifier$outboundSchema.parse(organizationIdentifier),
  );
}

export function organizationIdentifierFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationIdentifier, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationIdentifier$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationIdentifier' from JSON`,
  );
}
