/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Activation is the process of verifying that data is available for a Job,  and that a person has verified their identity as the Person associated with the Job. Only paychecks from Jobs with `activated` status will contribute to an earnings balance account.
 *
 * @remarks
 *
 * To deactivate a job, update activation_status to `DEACTIVATED`.
 */
export const ActivationStatus = {
  Deactivated: "DEACTIVATED",
  DeactivationPending: "DEACTIVATION_PENDING",
  ActivationRequired: "ACTIVATION_REQUIRED",
  ActivationUnderReview: "ACTIVATION_UNDER_REVIEW",
  Activated: "ACTIVATED",
} as const;
/**
 * Activation is the process of verifying that data is available for a Job,  and that a person has verified their identity as the Person associated with the Job. Only paychecks from Jobs with `activated` status will contribute to an earnings balance account.
 *
 * @remarks
 *
 * To deactivate a job, update activation_status to `DEACTIVATED`.
 */
export type ActivationStatus = ClosedEnum<typeof ActivationStatus>;

export const Frequency = {
  Hourly: "HOURLY",
  Weekly: "WEEKLY",
  Biweekly: "BIWEEKLY",
  TwiceMonthly: "TWICE_MONTHLY",
  Monthly: "MONTHLY",
  Annually: "ANNUALLY",
} as const;
export type Frequency = ClosedEnum<typeof Frequency>;

export type WageRate = {
  /**
   * A monetary quantity expressed in units of the lowest denomination in the associated currency. For example, `{ amount: 7250, currency: 'USD' }` resolves to $72.50.
   */
  amount: number;
  /**
   * A three-letter ISO 4217 currency code. For example, `USD` for US Dollars, `EUR` for Euros, or `JPY` for Japanese Yen.
   */
  currency: string;
  frequency: Frequency;
};

/**
 * - `SETUP_REQUIRED` Direct deposit is not set up for this Job. Update this resource's relationships to set up direct deposit.
 *
 * @remarks
 * - `SETUP_PENDING` A system action is still pending.
 * - `SETUP_COMPLETE` Direct deposit is set up for this Job.
 */
export const DirectDepositStatus = {
  SetupRequired: "SETUP_REQUIRED",
  SetupPending: "SETUP_PENDING",
  SetupComplete: "SETUP_COMPLETE",
} as const;
/**
 * - `SETUP_REQUIRED` Direct deposit is not set up for this Job. Update this resource's relationships to set up direct deposit.
 *
 * @remarks
 * - `SETUP_PENDING` A system action is still pending.
 * - `SETUP_COMPLETE` Direct deposit is set up for this Job.
 */
export type DirectDepositStatus = ClosedEnum<typeof DirectDepositStatus>;

export type JobAttributes = {
  /**
   * Holds unique identifiers for the employee or job defined by external organizations.
   */
  externalIdentifiers?: { [k: string]: string } | undefined;
  /**
   * The first name of the person as it is listed in their employee profile.
   */
  firstName?: string | undefined;
  /**
   * The last name of the person as it is listed in their employee profile.
   */
  lastName?: string | undefined;
  /**
   * Activation is the process of verifying that data is available for a Job,  and that a person has verified their identity as the Person associated with the Job. Only paychecks from Jobs with `activated` status will contribute to an earnings balance account.
   *
   * @remarks
   *
   * To deactivate a job, update activation_status to `DEACTIVATED`.
   */
  activationStatus?: ActivationStatus | undefined;
  wageRate: WageRate;
  title?: string | null | undefined;
  department: string | null;
  location?: string | undefined;
  /**
   * - `SETUP_REQUIRED` Direct deposit is not set up for this Job. Update this resource's relationships to set up direct deposit.
   *
   * @remarks
   * - `SETUP_PENDING` A system action is still pending.
   * - `SETUP_COMPLETE` Direct deposit is set up for this Job.
   */
  directDepositStatus: DirectDepositStatus;
};

export type JobAttributesInput = {
  /**
   * Activation is the process of verifying that data is available for a Job,  and that a person has verified their identity as the Person associated with the Job. Only paychecks from Jobs with `activated` status will contribute to an earnings balance account.
   *
   * @remarks
   *
   * To deactivate a job, update activation_status to `DEACTIVATED`.
   */
  activationStatus?: ActivationStatus | undefined;
};

/** @internal */
export const ActivationStatus$inboundSchema: z.ZodNativeEnum<
  typeof ActivationStatus
> = z.nativeEnum(ActivationStatus);

/** @internal */
export const ActivationStatus$outboundSchema: z.ZodNativeEnum<
  typeof ActivationStatus
> = ActivationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ActivationStatus$ {
  /** @deprecated use `ActivationStatus$inboundSchema` instead. */
  export const inboundSchema = ActivationStatus$inboundSchema;
  /** @deprecated use `ActivationStatus$outboundSchema` instead. */
  export const outboundSchema = ActivationStatus$outboundSchema;
}

/** @internal */
export const Frequency$inboundSchema: z.ZodNativeEnum<typeof Frequency> = z
  .nativeEnum(Frequency);

/** @internal */
export const Frequency$outboundSchema: z.ZodNativeEnum<typeof Frequency> =
  Frequency$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Frequency$ {
  /** @deprecated use `Frequency$inboundSchema` instead. */
  export const inboundSchema = Frequency$inboundSchema;
  /** @deprecated use `Frequency$outboundSchema` instead. */
  export const outboundSchema = Frequency$outboundSchema;
}

/** @internal */
export const WageRate$inboundSchema: z.ZodType<
  WageRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.number().int(),
  currency: z.string(),
  frequency: Frequency$inboundSchema,
});

/** @internal */
export type WageRate$Outbound = {
  amount: number;
  currency: string;
  frequency: string;
};

/** @internal */
export const WageRate$outboundSchema: z.ZodType<
  WageRate$Outbound,
  z.ZodTypeDef,
  WageRate
> = z.object({
  amount: z.number().int(),
  currency: z.string(),
  frequency: Frequency$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WageRate$ {
  /** @deprecated use `WageRate$inboundSchema` instead. */
  export const inboundSchema = WageRate$inboundSchema;
  /** @deprecated use `WageRate$outboundSchema` instead. */
  export const outboundSchema = WageRate$outboundSchema;
  /** @deprecated use `WageRate$Outbound` instead. */
  export type Outbound = WageRate$Outbound;
}

export function wageRateToJSON(wageRate: WageRate): string {
  return JSON.stringify(WageRate$outboundSchema.parse(wageRate));
}

export function wageRateFromJSON(
  jsonString: string,
): SafeParseResult<WageRate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WageRate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WageRate' from JSON`,
  );
}

/** @internal */
export const DirectDepositStatus$inboundSchema: z.ZodNativeEnum<
  typeof DirectDepositStatus
> = z.nativeEnum(DirectDepositStatus);

/** @internal */
export const DirectDepositStatus$outboundSchema: z.ZodNativeEnum<
  typeof DirectDepositStatus
> = DirectDepositStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DirectDepositStatus$ {
  /** @deprecated use `DirectDepositStatus$inboundSchema` instead. */
  export const inboundSchema = DirectDepositStatus$inboundSchema;
  /** @deprecated use `DirectDepositStatus$outboundSchema` instead. */
  export const outboundSchema = DirectDepositStatus$outboundSchema;
}

/** @internal */
export const JobAttributes$inboundSchema: z.ZodType<
  JobAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  external_identifiers: z.record(z.string()).optional(),
  first_name: z.string().optional(),
  last_name: z.string().optional(),
  activation_status: ActivationStatus$inboundSchema.optional(),
  wage_rate: z.lazy(() => WageRate$inboundSchema),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()),
  location: z.string().optional(),
  direct_deposit_status: DirectDepositStatus$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "external_identifiers": "externalIdentifiers",
    "first_name": "firstName",
    "last_name": "lastName",
    "activation_status": "activationStatus",
    "wage_rate": "wageRate",
    "direct_deposit_status": "directDepositStatus",
  });
});

/** @internal */
export type JobAttributes$Outbound = {
  external_identifiers?: { [k: string]: string } | undefined;
  first_name?: string | undefined;
  last_name?: string | undefined;
  activation_status?: string | undefined;
  wage_rate: WageRate$Outbound;
  title?: string | null | undefined;
  department: string | null;
  location?: string | undefined;
  direct_deposit_status: string;
};

/** @internal */
export const JobAttributes$outboundSchema: z.ZodType<
  JobAttributes$Outbound,
  z.ZodTypeDef,
  JobAttributes
> = z.object({
  externalIdentifiers: z.record(z.string()).optional(),
  firstName: z.string().optional(),
  lastName: z.string().optional(),
  activationStatus: ActivationStatus$outboundSchema.optional(),
  wageRate: z.lazy(() => WageRate$outboundSchema),
  title: z.nullable(z.string()).optional(),
  department: z.nullable(z.string()),
  location: z.string().optional(),
  directDepositStatus: DirectDepositStatus$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    externalIdentifiers: "external_identifiers",
    firstName: "first_name",
    lastName: "last_name",
    activationStatus: "activation_status",
    wageRate: "wage_rate",
    directDepositStatus: "direct_deposit_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobAttributes$ {
  /** @deprecated use `JobAttributes$inboundSchema` instead. */
  export const inboundSchema = JobAttributes$inboundSchema;
  /** @deprecated use `JobAttributes$outboundSchema` instead. */
  export const outboundSchema = JobAttributes$outboundSchema;
  /** @deprecated use `JobAttributes$Outbound` instead. */
  export type Outbound = JobAttributes$Outbound;
}

export function jobAttributesToJSON(jobAttributes: JobAttributes): string {
  return JSON.stringify(JobAttributes$outboundSchema.parse(jobAttributes));
}

export function jobAttributesFromJSON(
  jsonString: string,
): SafeParseResult<JobAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobAttributes' from JSON`,
  );
}

/** @internal */
export const JobAttributesInput$inboundSchema: z.ZodType<
  JobAttributesInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  activation_status: ActivationStatus$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "activation_status": "activationStatus",
  });
});

/** @internal */
export type JobAttributesInput$Outbound = {
  activation_status?: string | undefined;
};

/** @internal */
export const JobAttributesInput$outboundSchema: z.ZodType<
  JobAttributesInput$Outbound,
  z.ZodTypeDef,
  JobAttributesInput
> = z.object({
  activationStatus: ActivationStatus$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    activationStatus: "activation_status",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace JobAttributesInput$ {
  /** @deprecated use `JobAttributesInput$inboundSchema` instead. */
  export const inboundSchema = JobAttributesInput$inboundSchema;
  /** @deprecated use `JobAttributesInput$outboundSchema` instead. */
  export const outboundSchema = JobAttributesInput$outboundSchema;
  /** @deprecated use `JobAttributesInput$Outbound` instead. */
  export type Outbound = JobAttributesInput$Outbound;
}

export function jobAttributesInputToJSON(
  jobAttributesInput: JobAttributesInput,
): string {
  return JSON.stringify(
    JobAttributesInput$outboundSchema.parse(jobAttributesInput),
  );
}

export function jobAttributesInputFromJSON(
  jsonString: string,
): SafeParseResult<JobAttributesInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => JobAttributesInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'JobAttributesInput' from JSON`,
  );
}
