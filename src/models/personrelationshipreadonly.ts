/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PersonIdentifier,
  PersonIdentifier$inboundSchema,
  PersonIdentifier$Outbound,
  PersonIdentifier$outboundSchema,
} from "./personidentifier.js";

export type PersonRelationshipReadOnly = {
  data: PersonIdentifier;
};

/** @internal */
export const PersonRelationshipReadOnly$inboundSchema: z.ZodType<
  PersonRelationshipReadOnly,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: PersonIdentifier$inboundSchema,
});

/** @internal */
export type PersonRelationshipReadOnly$Outbound = {
  data: PersonIdentifier$Outbound;
};

/** @internal */
export const PersonRelationshipReadOnly$outboundSchema: z.ZodType<
  PersonRelationshipReadOnly$Outbound,
  z.ZodTypeDef,
  PersonRelationshipReadOnly
> = z.object({
  data: PersonIdentifier$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PersonRelationshipReadOnly$ {
  /** @deprecated use `PersonRelationshipReadOnly$inboundSchema` instead. */
  export const inboundSchema = PersonRelationshipReadOnly$inboundSchema;
  /** @deprecated use `PersonRelationshipReadOnly$outboundSchema` instead. */
  export const outboundSchema = PersonRelationshipReadOnly$outboundSchema;
  /** @deprecated use `PersonRelationshipReadOnly$Outbound` instead. */
  export type Outbound = PersonRelationshipReadOnly$Outbound;
}

export function personRelationshipReadOnlyToJSON(
  personRelationshipReadOnly: PersonRelationshipReadOnly,
): string {
  return JSON.stringify(
    PersonRelationshipReadOnly$outboundSchema.parse(personRelationshipReadOnly),
  );
}

export function personRelationshipReadOnlyFromJSON(
  jsonString: string,
): SafeParseResult<PersonRelationshipReadOnly, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PersonRelationshipReadOnly$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PersonRelationshipReadOnly' from JSON`,
  );
}
