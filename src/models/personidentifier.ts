/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type PersonIdentifier = {
  type: "people";
  id: string;
};

/** @internal */
export const PersonIdentifier$inboundSchema: z.ZodType<
  PersonIdentifier,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("people"),
  id: z.string(),
});

/** @internal */
export type PersonIdentifier$Outbound = {
  type: "people";
  id: string;
};

/** @internal */
export const PersonIdentifier$outboundSchema: z.ZodType<
  PersonIdentifier$Outbound,
  z.ZodTypeDef,
  PersonIdentifier
> = z.object({
  type: z.literal("people"),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PersonIdentifier$ {
  /** @deprecated use `PersonIdentifier$inboundSchema` instead. */
  export const inboundSchema = PersonIdentifier$inboundSchema;
  /** @deprecated use `PersonIdentifier$outboundSchema` instead. */
  export const outboundSchema = PersonIdentifier$outboundSchema;
  /** @deprecated use `PersonIdentifier$Outbound` instead. */
  export type Outbound = PersonIdentifier$Outbound;
}

export function personIdentifierToJSON(
  personIdentifier: PersonIdentifier,
): string {
  return JSON.stringify(
    PersonIdentifier$outboundSchema.parse(personIdentifier),
  );
}

export function personIdentifierFromJSON(
  jsonString: string,
): SafeParseResult<PersonIdentifier, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PersonIdentifier$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PersonIdentifier' from JSON`,
  );
}
