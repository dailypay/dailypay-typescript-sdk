/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  TransferDestinationCapability,
  TransferDestinationCapability$inboundSchema,
  TransferDestinationCapability$Outbound,
  TransferDestinationCapability$outboundSchema,
} from "./transferdestinationcapability.js";

/**
 * A code that indicates the status of an account that is a destination for funds.
 */
export const AccountAttributesDepositoryVerificationStatus = {
  VerificationPending: "VERIFICATION_PENDING",
  VerificationFailed: "VERIFICATION_FAILED",
  Verified: "VERIFIED",
} as const;
/**
 * A code that indicates the status of an account that is a destination for funds.
 */
export type AccountAttributesDepositoryVerificationStatus = ClosedEnum<
  typeof AccountAttributesDepositoryVerificationStatus
>;

export type AccountAttributesDepositoryAccountBalances = {
  /**
   * The amount of funds available to be withdrawn from the account.
   *
   * @remarks
   *
   * For earnings_balance-type accounts, the available balance typically
   * equals the current balance less any pending outflows, plus any pending inflows,
   *
   * This value is in units of the lowest denomination in the associated
   * currency. For example, `{ amount: 7250, currency: 'USD' }` resolves to
   * $72.50.
   */
  available: number | null;
  /**
   * The total amount of funds settled in the account.
   *
   * @remarks
   *
   * This value is in units of the lowest denomination in the associated
   * currency. For example, `{ amount: 7250, currency: 'USD' }` resolves to
   * $72.50.
   *
   * **Special note for earnings_balance-type accounts:**
   * During a typical pay period, if a user transfers no money from an earnings_balance-type account to a personal account,
   * the `current` balance will generally be 0, because transfers from earnings to this account will be
   * PENDING until the paycheck related to those earnings is processed.
   * Pending inflows are included in the `available` balance, not the `current` balance.
   *
   * If a user transfers money from an earnings_balance-type account to a personal account,
   * the `current` balance will be negative as those transfers settle. When a paycheck is processed,
   * DailyPay will automatically attempt to zero out the balance,
   * transferring any remaining funds to the `default_paycheck_destination` set for the associated Job.
   *
   * If DailyPay is unable to zero out the balance during paycheck processing, the `current` balance will remain negative,
   * which may impact a user's ability to transfer additional funds from their earnings balance.
   * In those cases, the available balance will be 0.
   */
  current: number | null;
  /**
   * A three-letter ISO 4217 currency code. For example, `USD` for US Dollars, `EUR` for Euros, or `JPY` for Japanese Yen.
   */
  currency: string;
};

export type AccountAttributesDepositoryAccountCapabilities = {
  /**
   * List of the timing and associate fees available when crediting this account as a
   *
   * @remarks
   * transfer destination.
   *
   * Actual fees may differ at the time of transfer; please refer to
   * the transfer preview attribute for the most accurate fee information
   * for any given transfer.
   */
  transferDestination: Array<TransferDestinationCapability>;
};

/**
 * The subtype of the account.
 */
export const AccountAttributesDepositorySubtype = {
  Savings: "SAVINGS",
  Checking: "CHECKING",
} as const;
/**
 * The subtype of the account.
 */
export type AccountAttributesDepositorySubtype = ClosedEnum<
  typeof AccountAttributesDepositorySubtype
>;

/**
 * The banking details of the account and account holder.
 */
export type DepositoryAccountDetails = {
  /**
   * The first name of the account holder.
   */
  firstName: string;
  /**
   * The last name of the account holder.
   */
  lastName: string;
  /**
   * The routing number of the bank that holds this account. Responses from this API that return this number are masked to the last four digits.
   */
  routingNumber: string;
  /**
   * The account number. Responses from this API that return this number are masked to the last four digits.
   */
  accountNumber: string;
};

/**
 * An account with type `DEPOSITORY` and subtype `SAVINGS` or `CHECKING`.
 */
export type Depository = {
  /**
   * A code that indicates the status of an account that is a destination for funds.
   */
  verificationStatus: AccountAttributesDepositoryVerificationStatus;
  accountBalances: AccountAttributesDepositoryAccountBalances;
  accountCapabilities: AccountAttributesDepositoryAccountCapabilities;
  /**
   * Display name for this account.
   */
  name: string;
  /**
   * The type of account. It differentiates between depository accounts (e.g. bank account), cards (e.g. debit) and earnings balance type of accounts (e.g. on demand pay).
   */
  accountType: "DEPOSITORY";
  /**
   * The subtype of the account.
   */
  subtype: AccountAttributesDepositorySubtype;
  /**
   * The banking details of the account and account holder.
   */
  depositoryAccountDetails: DepositoryAccountDetails;
};

/**
 * A code that indicates the status of an account that is a destination for funds.
 */
export const AccountAttributesEarningsBalanceVerificationStatus = {
  VerificationPending: "VERIFICATION_PENDING",
  VerificationFailed: "VERIFICATION_FAILED",
  Verified: "VERIFIED",
} as const;
/**
 * A code that indicates the status of an account that is a destination for funds.
 */
export type AccountAttributesEarningsBalanceVerificationStatus = ClosedEnum<
  typeof AccountAttributesEarningsBalanceVerificationStatus
>;

export type AccountAttributesEarningsBalanceAccountBalances = {
  /**
   * The amount of funds available to be withdrawn from the account.
   *
   * @remarks
   *
   * For earnings_balance-type accounts, the available balance typically
   * equals the current balance less any pending outflows, plus any pending inflows,
   *
   * This value is in units of the lowest denomination in the associated
   * currency. For example, `{ amount: 7250, currency: 'USD' }` resolves to
   * $72.50.
   */
  available: number | null;
  /**
   * The total amount of funds settled in the account.
   *
   * @remarks
   *
   * This value is in units of the lowest denomination in the associated
   * currency. For example, `{ amount: 7250, currency: 'USD' }` resolves to
   * $72.50.
   *
   * **Special note for earnings_balance-type accounts:**
   * During a typical pay period, if a user transfers no money from an earnings_balance-type account to a personal account,
   * the `current` balance will generally be 0, because transfers from earnings to this account will be
   * PENDING until the paycheck related to those earnings is processed.
   * Pending inflows are included in the `available` balance, not the `current` balance.
   *
   * If a user transfers money from an earnings_balance-type account to a personal account,
   * the `current` balance will be negative as those transfers settle. When a paycheck is processed,
   * DailyPay will automatically attempt to zero out the balance,
   * transferring any remaining funds to the `default_paycheck_destination` set for the associated Job.
   *
   * If DailyPay is unable to zero out the balance during paycheck processing, the `current` balance will remain negative,
   * which may impact a user's ability to transfer additional funds from their earnings balance.
   * In those cases, the available balance will be 0.
   */
  current: number | null;
  /**
   * A three-letter ISO 4217 currency code. For example, `USD` for US Dollars, `EUR` for Euros, or `JPY` for Japanese Yen.
   */
  currency: string;
};

export type AccountAttributesEarningsBalanceAccountCapabilities = {
  /**
   * List of the timing and associate fees available when crediting this account as a
   *
   * @remarks
   * transfer destination.
   *
   * Actual fees may differ at the time of transfer; please refer to
   * the transfer preview attribute for the most accurate fee information
   * for any given transfer.
   */
  transferDestination: Array<TransferDestinationCapability>;
};

/**
 * An empty object for earnings balance accounts.
 */
export type Details = {};

/**
 * An account with type `EARNINGS_BALANCE` and subtype `ODP`.
 */
export type EarningsBalanceReadOnly = {
  /**
   * A code that indicates the status of an account that is a destination for funds.
   */
  verificationStatus: AccountAttributesEarningsBalanceVerificationStatus;
  accountBalances: AccountAttributesEarningsBalanceAccountBalances;
  accountCapabilities: AccountAttributesEarningsBalanceAccountCapabilities;
  /**
   * Display name for this account.
   */
  name: string;
  /**
   * The type of account. It differentiates between depository accounts (e.g. bank account), cards (e.g. debit) and earnings balance type of accounts (e.g. on demand pay).
   */
  accountType: "EARNINGS_BALANCE";
  /**
   * The subtype of the account.
   */
  subtype: "ODP";
  /**
   * An empty object for earnings balance accounts.
   */
  details: Details;
};

/**
 * A code that indicates the status of an account that is a destination for funds.
 */
export const AccountAttributesCardVerificationStatus = {
  VerificationPending: "VERIFICATION_PENDING",
  VerificationFailed: "VERIFICATION_FAILED",
  Verified: "VERIFIED",
} as const;
/**
 * A code that indicates the status of an account that is a destination for funds.
 */
export type AccountAttributesCardVerificationStatus = ClosedEnum<
  typeof AccountAttributesCardVerificationStatus
>;

export type AccountAttributesCardAccountBalances = {
  /**
   * The amount of funds available to be withdrawn from the account.
   *
   * @remarks
   *
   * For earnings_balance-type accounts, the available balance typically
   * equals the current balance less any pending outflows, plus any pending inflows,
   *
   * This value is in units of the lowest denomination in the associated
   * currency. For example, `{ amount: 7250, currency: 'USD' }` resolves to
   * $72.50.
   */
  available: number | null;
  /**
   * The total amount of funds settled in the account.
   *
   * @remarks
   *
   * This value is in units of the lowest denomination in the associated
   * currency. For example, `{ amount: 7250, currency: 'USD' }` resolves to
   * $72.50.
   *
   * **Special note for earnings_balance-type accounts:**
   * During a typical pay period, if a user transfers no money from an earnings_balance-type account to a personal account,
   * the `current` balance will generally be 0, because transfers from earnings to this account will be
   * PENDING until the paycheck related to those earnings is processed.
   * Pending inflows are included in the `available` balance, not the `current` balance.
   *
   * If a user transfers money from an earnings_balance-type account to a personal account,
   * the `current` balance will be negative as those transfers settle. When a paycheck is processed,
   * DailyPay will automatically attempt to zero out the balance,
   * transferring any remaining funds to the `default_paycheck_destination` set for the associated Job.
   *
   * If DailyPay is unable to zero out the balance during paycheck processing, the `current` balance will remain negative,
   * which may impact a user's ability to transfer additional funds from their earnings balance.
   * In those cases, the available balance will be 0.
   */
  current: number | null;
  /**
   * A three-letter ISO 4217 currency code. For example, `USD` for US Dollars, `EUR` for Euros, or `JPY` for Japanese Yen.
   */
  currency: string;
};

export type AccountAttributesCardAccountCapabilities = {
  /**
   * List of the timing and associate fees available when crediting this account as a
   *
   * @remarks
   * transfer destination.
   *
   * Actual fees may differ at the time of transfer; please refer to
   * the transfer preview attribute for the most accurate fee information
   * for any given transfer.
   */
  transferDestination: Array<TransferDestinationCapability>;
};

/**
 * The subtype of the account. Additional subtypes may be added over time
 */
export const AccountAttributesCardSubtype = {
  Debit: "DEBIT",
  Dailypay: "DAILYPAY",
} as const;
/**
 * The subtype of the account. Additional subtypes may be added over time
 */
export type AccountAttributesCardSubtype = ClosedEnum<
  typeof AccountAttributesCardSubtype
>;

/**
 * The banking details of the account and account holder.
 */
export type CardAccountDetailsOutput = {
  /**
   * Last four digits of the card number.
   */
  lastFour: string;
  /**
   * The issuer of the card.
   */
  issuer: string;
  /**
   * The first name of the account holder.
   */
  firstName: string;
  /**
   * The last name of the account holder.
   */
  lastName: string;
  /**
   * The month of the expiration date for the card.
   */
  expirationMonth: string;
  /**
   * The year of the expiration date for the card.
   */
  expirationYear: string;
};

/**
 * An account with type `CARD` and subtype `DAILYPAY` or `DEBIT`.
 */
export type CardOutput = {
  /**
   * A code that indicates the status of an account that is a destination for funds.
   */
  verificationStatus: AccountAttributesCardVerificationStatus;
  accountBalances: AccountAttributesCardAccountBalances;
  accountCapabilities: AccountAttributesCardAccountCapabilities;
  /**
   * Display name for this account.
   */
  name: string;
  /**
   * The type of account. It differentiates between depository accounts (e.g. bank account), cards (e.g. debit) and earnings balance type of accounts (e.g. on demand pay).
   */
  accountType: "CARD";
  /**
   * The subtype of the account. Additional subtypes may be added over time
   */
  subtype: AccountAttributesCardSubtype;
  /**
   * The banking details of the account and account holder.
   */
  cardAccountDetails: CardAccountDetailsOutput;
};

/**
 * The details of the account.
 */
export type AccountAttributesOutput =
  | CardOutput
  | EarningsBalanceReadOnly
  | Depository;

/**
 * An account with type `DEPOSITORY` and subtype `SAVINGS` or `CHECKING`.
 */
export type DepositoryInput = {
  /**
   * Display name for this account.
   */
  name: string;
  /**
   * The type of account. It differentiates between depository accounts (e.g. bank account), cards (e.g. debit) and earnings balance type of accounts (e.g. on demand pay).
   */
  accountType: "DEPOSITORY";
  /**
   * The subtype of the account.
   */
  subtype: AccountAttributesDepositorySubtype;
  /**
   * The banking details of the account and account holder.
   */
  depositoryAccountDetails: DepositoryAccountDetails;
};

/**
 * An account with type `EARNINGS_BALANCE` and subtype `ODP`.
 */
export type EarningsBalanceReadOnlyInput = {};

/**
 * The banking details of the account and account holder.
 */
export type CardAccountDetailsInput = {
  /**
   * A tokenized string replacement for the card data.
   */
  token: string;
  /**
   * The issuer of the card.
   */
  issuer: string;
  /**
   * The first name of the account holder.
   */
  firstName: string;
  /**
   * The last name of the account holder.
   */
  lastName: string;
  /**
   * The month of the expiration date for the card.
   */
  expirationMonth: string;
  /**
   * The year of the expiration date for the card.
   */
  expirationYear: string;
  /**
   * The first line of the address for the card.
   */
  addressLineOne: string;
  /**
   * The second line of the address for the card.
   */
  addressLineTwo?: string | undefined;
  /**
   * The city of the address for the card.
   */
  addressCity: string;
  /**
   * The two-letter abbreviation of the state in the address for the card.
   */
  addressState: string;
  /**
   * The zip code of the address for the card.
   */
  addressZipCode: string;
  /**
   * The country code of the address for the card.
   */
  addressCountry: string;
};

/**
 * An account with type `CARD` and subtype `DAILYPAY` or `DEBIT`.
 */
export type CardInput = {
  /**
   * Display name for this account.
   */
  name: string;
  /**
   * The type of account. It differentiates between depository accounts (e.g. bank account), cards (e.g. debit) and earnings balance type of accounts (e.g. on demand pay).
   */
  accountType: "CARD";
  /**
   * The subtype of the account. Additional subtypes may be added over time
   */
  subtype: AccountAttributesCardSubtype;
  /**
   * The banking details of the account and account holder.
   */
  cardAccountDetails: CardAccountDetailsInput;
};

/**
 * The details of the account.
 */
export type AccountAttributesInput =
  | CardInput
  | DepositoryInput
  | EarningsBalanceReadOnlyInput;

/** @internal */
export const AccountAttributesDepositoryVerificationStatus$inboundSchema:
  z.ZodNativeEnum<typeof AccountAttributesDepositoryVerificationStatus> = z
    .nativeEnum(AccountAttributesDepositoryVerificationStatus);

/** @internal */
export const AccountAttributesDepositoryVerificationStatus$outboundSchema:
  z.ZodNativeEnum<typeof AccountAttributesDepositoryVerificationStatus> =
    AccountAttributesDepositoryVerificationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountAttributesDepositoryVerificationStatus$ {
  /** @deprecated use `AccountAttributesDepositoryVerificationStatus$inboundSchema` instead. */
  export const inboundSchema =
    AccountAttributesDepositoryVerificationStatus$inboundSchema;
  /** @deprecated use `AccountAttributesDepositoryVerificationStatus$outboundSchema` instead. */
  export const outboundSchema =
    AccountAttributesDepositoryVerificationStatus$outboundSchema;
}

/** @internal */
export const AccountAttributesDepositoryAccountBalances$inboundSchema:
  z.ZodType<AccountAttributesDepositoryAccountBalances, z.ZodTypeDef, unknown> =
    z.object({
      available: z.nullable(z.number().int()),
      current: z.nullable(z.number().int()),
      currency: z.string(),
    });

/** @internal */
export type AccountAttributesDepositoryAccountBalances$Outbound = {
  available: number | null;
  current: number | null;
  currency: string;
};

/** @internal */
export const AccountAttributesDepositoryAccountBalances$outboundSchema:
  z.ZodType<
    AccountAttributesDepositoryAccountBalances$Outbound,
    z.ZodTypeDef,
    AccountAttributesDepositoryAccountBalances
  > = z.object({
    available: z.nullable(z.number().int()),
    current: z.nullable(z.number().int()),
    currency: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountAttributesDepositoryAccountBalances$ {
  /** @deprecated use `AccountAttributesDepositoryAccountBalances$inboundSchema` instead. */
  export const inboundSchema =
    AccountAttributesDepositoryAccountBalances$inboundSchema;
  /** @deprecated use `AccountAttributesDepositoryAccountBalances$outboundSchema` instead. */
  export const outboundSchema =
    AccountAttributesDepositoryAccountBalances$outboundSchema;
  /** @deprecated use `AccountAttributesDepositoryAccountBalances$Outbound` instead. */
  export type Outbound = AccountAttributesDepositoryAccountBalances$Outbound;
}

export function accountAttributesDepositoryAccountBalancesToJSON(
  accountAttributesDepositoryAccountBalances:
    AccountAttributesDepositoryAccountBalances,
): string {
  return JSON.stringify(
    AccountAttributesDepositoryAccountBalances$outboundSchema.parse(
      accountAttributesDepositoryAccountBalances,
    ),
  );
}

export function accountAttributesDepositoryAccountBalancesFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountAttributesDepositoryAccountBalances,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountAttributesDepositoryAccountBalances$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountAttributesDepositoryAccountBalances' from JSON`,
  );
}

/** @internal */
export const AccountAttributesDepositoryAccountCapabilities$inboundSchema:
  z.ZodType<
    AccountAttributesDepositoryAccountCapabilities,
    z.ZodTypeDef,
    unknown
  > = z.object({
    transfer_destination: z.array(TransferDestinationCapability$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "transfer_destination": "transferDestination",
    });
  });

/** @internal */
export type AccountAttributesDepositoryAccountCapabilities$Outbound = {
  transfer_destination: Array<TransferDestinationCapability$Outbound>;
};

/** @internal */
export const AccountAttributesDepositoryAccountCapabilities$outboundSchema:
  z.ZodType<
    AccountAttributesDepositoryAccountCapabilities$Outbound,
    z.ZodTypeDef,
    AccountAttributesDepositoryAccountCapabilities
  > = z.object({
    transferDestination: z.array(TransferDestinationCapability$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      transferDestination: "transfer_destination",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountAttributesDepositoryAccountCapabilities$ {
  /** @deprecated use `AccountAttributesDepositoryAccountCapabilities$inboundSchema` instead. */
  export const inboundSchema =
    AccountAttributesDepositoryAccountCapabilities$inboundSchema;
  /** @deprecated use `AccountAttributesDepositoryAccountCapabilities$outboundSchema` instead. */
  export const outboundSchema =
    AccountAttributesDepositoryAccountCapabilities$outboundSchema;
  /** @deprecated use `AccountAttributesDepositoryAccountCapabilities$Outbound` instead. */
  export type Outbound =
    AccountAttributesDepositoryAccountCapabilities$Outbound;
}

export function accountAttributesDepositoryAccountCapabilitiesToJSON(
  accountAttributesDepositoryAccountCapabilities:
    AccountAttributesDepositoryAccountCapabilities,
): string {
  return JSON.stringify(
    AccountAttributesDepositoryAccountCapabilities$outboundSchema.parse(
      accountAttributesDepositoryAccountCapabilities,
    ),
  );
}

export function accountAttributesDepositoryAccountCapabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountAttributesDepositoryAccountCapabilities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountAttributesDepositoryAccountCapabilities$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountAttributesDepositoryAccountCapabilities' from JSON`,
  );
}

/** @internal */
export const AccountAttributesDepositorySubtype$inboundSchema: z.ZodNativeEnum<
  typeof AccountAttributesDepositorySubtype
> = z.nativeEnum(AccountAttributesDepositorySubtype);

/** @internal */
export const AccountAttributesDepositorySubtype$outboundSchema: z.ZodNativeEnum<
  typeof AccountAttributesDepositorySubtype
> = AccountAttributesDepositorySubtype$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountAttributesDepositorySubtype$ {
  /** @deprecated use `AccountAttributesDepositorySubtype$inboundSchema` instead. */
  export const inboundSchema = AccountAttributesDepositorySubtype$inboundSchema;
  /** @deprecated use `AccountAttributesDepositorySubtype$outboundSchema` instead. */
  export const outboundSchema =
    AccountAttributesDepositorySubtype$outboundSchema;
}

/** @internal */
export const DepositoryAccountDetails$inboundSchema: z.ZodType<
  DepositoryAccountDetails,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string(),
  last_name: z.string(),
  routing_number: z.string(),
  account_number: z.string(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "routing_number": "routingNumber",
    "account_number": "accountNumber",
  });
});

/** @internal */
export type DepositoryAccountDetails$Outbound = {
  first_name: string;
  last_name: string;
  routing_number: string;
  account_number: string;
};

/** @internal */
export const DepositoryAccountDetails$outboundSchema: z.ZodType<
  DepositoryAccountDetails$Outbound,
  z.ZodTypeDef,
  DepositoryAccountDetails
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  routingNumber: z.string(),
  accountNumber: z.string(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    routingNumber: "routing_number",
    accountNumber: "account_number",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DepositoryAccountDetails$ {
  /** @deprecated use `DepositoryAccountDetails$inboundSchema` instead. */
  export const inboundSchema = DepositoryAccountDetails$inboundSchema;
  /** @deprecated use `DepositoryAccountDetails$outboundSchema` instead. */
  export const outboundSchema = DepositoryAccountDetails$outboundSchema;
  /** @deprecated use `DepositoryAccountDetails$Outbound` instead. */
  export type Outbound = DepositoryAccountDetails$Outbound;
}

export function depositoryAccountDetailsToJSON(
  depositoryAccountDetails: DepositoryAccountDetails,
): string {
  return JSON.stringify(
    DepositoryAccountDetails$outboundSchema.parse(depositoryAccountDetails),
  );
}

export function depositoryAccountDetailsFromJSON(
  jsonString: string,
): SafeParseResult<DepositoryAccountDetails, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DepositoryAccountDetails$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DepositoryAccountDetails' from JSON`,
  );
}

/** @internal */
export const Depository$inboundSchema: z.ZodType<
  Depository,
  z.ZodTypeDef,
  unknown
> = z.object({
  verification_status:
    AccountAttributesDepositoryVerificationStatus$inboundSchema,
  balances: z.lazy(() =>
    AccountAttributesDepositoryAccountBalances$inboundSchema
  ),
  capabilities: z.lazy(() =>
    AccountAttributesDepositoryAccountCapabilities$inboundSchema
  ),
  name: z.string(),
  account_type: z.literal("DEPOSITORY"),
  subtype: AccountAttributesDepositorySubtype$inboundSchema,
  details: z.lazy(() => DepositoryAccountDetails$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "verification_status": "verificationStatus",
    "balances": "accountBalances",
    "capabilities": "accountCapabilities",
    "account_type": "accountType",
    "details": "depositoryAccountDetails",
  });
});

/** @internal */
export type Depository$Outbound = {
  verification_status: string;
  balances: AccountAttributesDepositoryAccountBalances$Outbound;
  capabilities: AccountAttributesDepositoryAccountCapabilities$Outbound;
  name: string;
  account_type: "DEPOSITORY";
  subtype: string;
  details: DepositoryAccountDetails$Outbound;
};

/** @internal */
export const Depository$outboundSchema: z.ZodType<
  Depository$Outbound,
  z.ZodTypeDef,
  Depository
> = z.object({
  verificationStatus:
    AccountAttributesDepositoryVerificationStatus$outboundSchema,
  accountBalances: z.lazy(() =>
    AccountAttributesDepositoryAccountBalances$outboundSchema
  ),
  accountCapabilities: z.lazy(() =>
    AccountAttributesDepositoryAccountCapabilities$outboundSchema
  ),
  name: z.string(),
  accountType: z.literal("DEPOSITORY"),
  subtype: AccountAttributesDepositorySubtype$outboundSchema,
  depositoryAccountDetails: z.lazy(() =>
    DepositoryAccountDetails$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    verificationStatus: "verification_status",
    accountBalances: "balances",
    accountCapabilities: "capabilities",
    accountType: "account_type",
    depositoryAccountDetails: "details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Depository$ {
  /** @deprecated use `Depository$inboundSchema` instead. */
  export const inboundSchema = Depository$inboundSchema;
  /** @deprecated use `Depository$outboundSchema` instead. */
  export const outboundSchema = Depository$outboundSchema;
  /** @deprecated use `Depository$Outbound` instead. */
  export type Outbound = Depository$Outbound;
}

export function depositoryToJSON(depository: Depository): string {
  return JSON.stringify(Depository$outboundSchema.parse(depository));
}

export function depositoryFromJSON(
  jsonString: string,
): SafeParseResult<Depository, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Depository$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Depository' from JSON`,
  );
}

/** @internal */
export const AccountAttributesEarningsBalanceVerificationStatus$inboundSchema:
  z.ZodNativeEnum<typeof AccountAttributesEarningsBalanceVerificationStatus> = z
    .nativeEnum(AccountAttributesEarningsBalanceVerificationStatus);

/** @internal */
export const AccountAttributesEarningsBalanceVerificationStatus$outboundSchema:
  z.ZodNativeEnum<typeof AccountAttributesEarningsBalanceVerificationStatus> =
    AccountAttributesEarningsBalanceVerificationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountAttributesEarningsBalanceVerificationStatus$ {
  /** @deprecated use `AccountAttributesEarningsBalanceVerificationStatus$inboundSchema` instead. */
  export const inboundSchema =
    AccountAttributesEarningsBalanceVerificationStatus$inboundSchema;
  /** @deprecated use `AccountAttributesEarningsBalanceVerificationStatus$outboundSchema` instead. */
  export const outboundSchema =
    AccountAttributesEarningsBalanceVerificationStatus$outboundSchema;
}

/** @internal */
export const AccountAttributesEarningsBalanceAccountBalances$inboundSchema:
  z.ZodType<
    AccountAttributesEarningsBalanceAccountBalances,
    z.ZodTypeDef,
    unknown
  > = z.object({
    available: z.nullable(z.number().int()),
    current: z.nullable(z.number().int()),
    currency: z.string(),
  });

/** @internal */
export type AccountAttributesEarningsBalanceAccountBalances$Outbound = {
  available: number | null;
  current: number | null;
  currency: string;
};

/** @internal */
export const AccountAttributesEarningsBalanceAccountBalances$outboundSchema:
  z.ZodType<
    AccountAttributesEarningsBalanceAccountBalances$Outbound,
    z.ZodTypeDef,
    AccountAttributesEarningsBalanceAccountBalances
  > = z.object({
    available: z.nullable(z.number().int()),
    current: z.nullable(z.number().int()),
    currency: z.string(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountAttributesEarningsBalanceAccountBalances$ {
  /** @deprecated use `AccountAttributesEarningsBalanceAccountBalances$inboundSchema` instead. */
  export const inboundSchema =
    AccountAttributesEarningsBalanceAccountBalances$inboundSchema;
  /** @deprecated use `AccountAttributesEarningsBalanceAccountBalances$outboundSchema` instead. */
  export const outboundSchema =
    AccountAttributesEarningsBalanceAccountBalances$outboundSchema;
  /** @deprecated use `AccountAttributesEarningsBalanceAccountBalances$Outbound` instead. */
  export type Outbound =
    AccountAttributesEarningsBalanceAccountBalances$Outbound;
}

export function accountAttributesEarningsBalanceAccountBalancesToJSON(
  accountAttributesEarningsBalanceAccountBalances:
    AccountAttributesEarningsBalanceAccountBalances,
): string {
  return JSON.stringify(
    AccountAttributesEarningsBalanceAccountBalances$outboundSchema.parse(
      accountAttributesEarningsBalanceAccountBalances,
    ),
  );
}

export function accountAttributesEarningsBalanceAccountBalancesFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountAttributesEarningsBalanceAccountBalances,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountAttributesEarningsBalanceAccountBalances$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountAttributesEarningsBalanceAccountBalances' from JSON`,
  );
}

/** @internal */
export const AccountAttributesEarningsBalanceAccountCapabilities$inboundSchema:
  z.ZodType<
    AccountAttributesEarningsBalanceAccountCapabilities,
    z.ZodTypeDef,
    unknown
  > = z.object({
    transfer_destination: z.array(TransferDestinationCapability$inboundSchema),
  }).transform((v) => {
    return remap$(v, {
      "transfer_destination": "transferDestination",
    });
  });

/** @internal */
export type AccountAttributesEarningsBalanceAccountCapabilities$Outbound = {
  transfer_destination: Array<TransferDestinationCapability$Outbound>;
};

/** @internal */
export const AccountAttributesEarningsBalanceAccountCapabilities$outboundSchema:
  z.ZodType<
    AccountAttributesEarningsBalanceAccountCapabilities$Outbound,
    z.ZodTypeDef,
    AccountAttributesEarningsBalanceAccountCapabilities
  > = z.object({
    transferDestination: z.array(TransferDestinationCapability$outboundSchema),
  }).transform((v) => {
    return remap$(v, {
      transferDestination: "transfer_destination",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountAttributesEarningsBalanceAccountCapabilities$ {
  /** @deprecated use `AccountAttributesEarningsBalanceAccountCapabilities$inboundSchema` instead. */
  export const inboundSchema =
    AccountAttributesEarningsBalanceAccountCapabilities$inboundSchema;
  /** @deprecated use `AccountAttributesEarningsBalanceAccountCapabilities$outboundSchema` instead. */
  export const outboundSchema =
    AccountAttributesEarningsBalanceAccountCapabilities$outboundSchema;
  /** @deprecated use `AccountAttributesEarningsBalanceAccountCapabilities$Outbound` instead. */
  export type Outbound =
    AccountAttributesEarningsBalanceAccountCapabilities$Outbound;
}

export function accountAttributesEarningsBalanceAccountCapabilitiesToJSON(
  accountAttributesEarningsBalanceAccountCapabilities:
    AccountAttributesEarningsBalanceAccountCapabilities,
): string {
  return JSON.stringify(
    AccountAttributesEarningsBalanceAccountCapabilities$outboundSchema.parse(
      accountAttributesEarningsBalanceAccountCapabilities,
    ),
  );
}

export function accountAttributesEarningsBalanceAccountCapabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountAttributesEarningsBalanceAccountCapabilities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountAttributesEarningsBalanceAccountCapabilities$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountAttributesEarningsBalanceAccountCapabilities' from JSON`,
  );
}

/** @internal */
export const Details$inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown> =
  z.object({});

/** @internal */
export type Details$Outbound = {};

/** @internal */
export const Details$outboundSchema: z.ZodType<
  Details$Outbound,
  z.ZodTypeDef,
  Details
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Details$ {
  /** @deprecated use `Details$inboundSchema` instead. */
  export const inboundSchema = Details$inboundSchema;
  /** @deprecated use `Details$outboundSchema` instead. */
  export const outboundSchema = Details$outboundSchema;
  /** @deprecated use `Details$Outbound` instead. */
  export type Outbound = Details$Outbound;
}

export function detailsToJSON(details: Details): string {
  return JSON.stringify(Details$outboundSchema.parse(details));
}

export function detailsFromJSON(
  jsonString: string,
): SafeParseResult<Details, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Details$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Details' from JSON`,
  );
}

/** @internal */
export const EarningsBalanceReadOnly$inboundSchema: z.ZodType<
  EarningsBalanceReadOnly,
  z.ZodTypeDef,
  unknown
> = z.object({
  verification_status:
    AccountAttributesEarningsBalanceVerificationStatus$inboundSchema,
  balances: z.lazy(() =>
    AccountAttributesEarningsBalanceAccountBalances$inboundSchema
  ),
  capabilities: z.lazy(() =>
    AccountAttributesEarningsBalanceAccountCapabilities$inboundSchema
  ),
  name: z.string(),
  account_type: z.literal("EARNINGS_BALANCE"),
  subtype: z.literal("ODP"),
  details: z.lazy(() => Details$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "verification_status": "verificationStatus",
    "balances": "accountBalances",
    "capabilities": "accountCapabilities",
    "account_type": "accountType",
  });
});

/** @internal */
export type EarningsBalanceReadOnly$Outbound = {
  verification_status: string;
  balances: AccountAttributesEarningsBalanceAccountBalances$Outbound;
  capabilities: AccountAttributesEarningsBalanceAccountCapabilities$Outbound;
  name: string;
  account_type: "EARNINGS_BALANCE";
  subtype: "ODP";
  details: Details$Outbound;
};

/** @internal */
export const EarningsBalanceReadOnly$outboundSchema: z.ZodType<
  EarningsBalanceReadOnly$Outbound,
  z.ZodTypeDef,
  EarningsBalanceReadOnly
> = z.object({
  verificationStatus:
    AccountAttributesEarningsBalanceVerificationStatus$outboundSchema,
  accountBalances: z.lazy(() =>
    AccountAttributesEarningsBalanceAccountBalances$outboundSchema
  ),
  accountCapabilities: z.lazy(() =>
    AccountAttributesEarningsBalanceAccountCapabilities$outboundSchema
  ),
  name: z.string(),
  accountType: z.literal("EARNINGS_BALANCE"),
  subtype: z.literal("ODP"),
  details: z.lazy(() => Details$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    verificationStatus: "verification_status",
    accountBalances: "balances",
    accountCapabilities: "capabilities",
    accountType: "account_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EarningsBalanceReadOnly$ {
  /** @deprecated use `EarningsBalanceReadOnly$inboundSchema` instead. */
  export const inboundSchema = EarningsBalanceReadOnly$inboundSchema;
  /** @deprecated use `EarningsBalanceReadOnly$outboundSchema` instead. */
  export const outboundSchema = EarningsBalanceReadOnly$outboundSchema;
  /** @deprecated use `EarningsBalanceReadOnly$Outbound` instead. */
  export type Outbound = EarningsBalanceReadOnly$Outbound;
}

export function earningsBalanceReadOnlyToJSON(
  earningsBalanceReadOnly: EarningsBalanceReadOnly,
): string {
  return JSON.stringify(
    EarningsBalanceReadOnly$outboundSchema.parse(earningsBalanceReadOnly),
  );
}

export function earningsBalanceReadOnlyFromJSON(
  jsonString: string,
): SafeParseResult<EarningsBalanceReadOnly, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EarningsBalanceReadOnly$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EarningsBalanceReadOnly' from JSON`,
  );
}

/** @internal */
export const AccountAttributesCardVerificationStatus$inboundSchema:
  z.ZodNativeEnum<typeof AccountAttributesCardVerificationStatus> = z
    .nativeEnum(AccountAttributesCardVerificationStatus);

/** @internal */
export const AccountAttributesCardVerificationStatus$outboundSchema:
  z.ZodNativeEnum<typeof AccountAttributesCardVerificationStatus> =
    AccountAttributesCardVerificationStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountAttributesCardVerificationStatus$ {
  /** @deprecated use `AccountAttributesCardVerificationStatus$inboundSchema` instead. */
  export const inboundSchema =
    AccountAttributesCardVerificationStatus$inboundSchema;
  /** @deprecated use `AccountAttributesCardVerificationStatus$outboundSchema` instead. */
  export const outboundSchema =
    AccountAttributesCardVerificationStatus$outboundSchema;
}

/** @internal */
export const AccountAttributesCardAccountBalances$inboundSchema: z.ZodType<
  AccountAttributesCardAccountBalances,
  z.ZodTypeDef,
  unknown
> = z.object({
  available: z.nullable(z.number().int()),
  current: z.nullable(z.number().int()),
  currency: z.string(),
});

/** @internal */
export type AccountAttributesCardAccountBalances$Outbound = {
  available: number | null;
  current: number | null;
  currency: string;
};

/** @internal */
export const AccountAttributesCardAccountBalances$outboundSchema: z.ZodType<
  AccountAttributesCardAccountBalances$Outbound,
  z.ZodTypeDef,
  AccountAttributesCardAccountBalances
> = z.object({
  available: z.nullable(z.number().int()),
  current: z.nullable(z.number().int()),
  currency: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountAttributesCardAccountBalances$ {
  /** @deprecated use `AccountAttributesCardAccountBalances$inboundSchema` instead. */
  export const inboundSchema =
    AccountAttributesCardAccountBalances$inboundSchema;
  /** @deprecated use `AccountAttributesCardAccountBalances$outboundSchema` instead. */
  export const outboundSchema =
    AccountAttributesCardAccountBalances$outboundSchema;
  /** @deprecated use `AccountAttributesCardAccountBalances$Outbound` instead. */
  export type Outbound = AccountAttributesCardAccountBalances$Outbound;
}

export function accountAttributesCardAccountBalancesToJSON(
  accountAttributesCardAccountBalances: AccountAttributesCardAccountBalances,
): string {
  return JSON.stringify(
    AccountAttributesCardAccountBalances$outboundSchema.parse(
      accountAttributesCardAccountBalances,
    ),
  );
}

export function accountAttributesCardAccountBalancesFromJSON(
  jsonString: string,
): SafeParseResult<AccountAttributesCardAccountBalances, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AccountAttributesCardAccountBalances$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountAttributesCardAccountBalances' from JSON`,
  );
}

/** @internal */
export const AccountAttributesCardAccountCapabilities$inboundSchema: z.ZodType<
  AccountAttributesCardAccountCapabilities,
  z.ZodTypeDef,
  unknown
> = z.object({
  transfer_destination: z.array(TransferDestinationCapability$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "transfer_destination": "transferDestination",
  });
});

/** @internal */
export type AccountAttributesCardAccountCapabilities$Outbound = {
  transfer_destination: Array<TransferDestinationCapability$Outbound>;
};

/** @internal */
export const AccountAttributesCardAccountCapabilities$outboundSchema: z.ZodType<
  AccountAttributesCardAccountCapabilities$Outbound,
  z.ZodTypeDef,
  AccountAttributesCardAccountCapabilities
> = z.object({
  transferDestination: z.array(TransferDestinationCapability$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    transferDestination: "transfer_destination",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountAttributesCardAccountCapabilities$ {
  /** @deprecated use `AccountAttributesCardAccountCapabilities$inboundSchema` instead. */
  export const inboundSchema =
    AccountAttributesCardAccountCapabilities$inboundSchema;
  /** @deprecated use `AccountAttributesCardAccountCapabilities$outboundSchema` instead. */
  export const outboundSchema =
    AccountAttributesCardAccountCapabilities$outboundSchema;
  /** @deprecated use `AccountAttributesCardAccountCapabilities$Outbound` instead. */
  export type Outbound = AccountAttributesCardAccountCapabilities$Outbound;
}

export function accountAttributesCardAccountCapabilitiesToJSON(
  accountAttributesCardAccountCapabilities:
    AccountAttributesCardAccountCapabilities,
): string {
  return JSON.stringify(
    AccountAttributesCardAccountCapabilities$outboundSchema.parse(
      accountAttributesCardAccountCapabilities,
    ),
  );
}

export function accountAttributesCardAccountCapabilitiesFromJSON(
  jsonString: string,
): SafeParseResult<
  AccountAttributesCardAccountCapabilities,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AccountAttributesCardAccountCapabilities$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AccountAttributesCardAccountCapabilities' from JSON`,
  );
}

/** @internal */
export const AccountAttributesCardSubtype$inboundSchema: z.ZodNativeEnum<
  typeof AccountAttributesCardSubtype
> = z.nativeEnum(AccountAttributesCardSubtype);

/** @internal */
export const AccountAttributesCardSubtype$outboundSchema: z.ZodNativeEnum<
  typeof AccountAttributesCardSubtype
> = AccountAttributesCardSubtype$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountAttributesCardSubtype$ {
  /** @deprecated use `AccountAttributesCardSubtype$inboundSchema` instead. */
  export const inboundSchema = AccountAttributesCardSubtype$inboundSchema;
  /** @deprecated use `AccountAttributesCardSubtype$outboundSchema` instead. */
  export const outboundSchema = AccountAttributesCardSubtype$outboundSchema;
}

/** @internal */
export const CardAccountDetailsOutput$inboundSchema: z.ZodType<
  CardAccountDetailsOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  last_four: z.string(),
  issuer: z.string(),
  first_name: z.string(),
  last_name: z.string(),
  expiration_month: z.string(),
  expiration_year: z.string(),
}).transform((v) => {
  return remap$(v, {
    "last_four": "lastFour",
    "first_name": "firstName",
    "last_name": "lastName",
    "expiration_month": "expirationMonth",
    "expiration_year": "expirationYear",
  });
});

/** @internal */
export type CardAccountDetailsOutput$Outbound = {
  last_four: string;
  issuer: string;
  first_name: string;
  last_name: string;
  expiration_month: string;
  expiration_year: string;
};

/** @internal */
export const CardAccountDetailsOutput$outboundSchema: z.ZodType<
  CardAccountDetailsOutput$Outbound,
  z.ZodTypeDef,
  CardAccountDetailsOutput
> = z.object({
  lastFour: z.string(),
  issuer: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  expirationMonth: z.string(),
  expirationYear: z.string(),
}).transform((v) => {
  return remap$(v, {
    lastFour: "last_four",
    firstName: "first_name",
    lastName: "last_name",
    expirationMonth: "expiration_month",
    expirationYear: "expiration_year",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardAccountDetailsOutput$ {
  /** @deprecated use `CardAccountDetailsOutput$inboundSchema` instead. */
  export const inboundSchema = CardAccountDetailsOutput$inboundSchema;
  /** @deprecated use `CardAccountDetailsOutput$outboundSchema` instead. */
  export const outboundSchema = CardAccountDetailsOutput$outboundSchema;
  /** @deprecated use `CardAccountDetailsOutput$Outbound` instead. */
  export type Outbound = CardAccountDetailsOutput$Outbound;
}

export function cardAccountDetailsOutputToJSON(
  cardAccountDetailsOutput: CardAccountDetailsOutput,
): string {
  return JSON.stringify(
    CardAccountDetailsOutput$outboundSchema.parse(cardAccountDetailsOutput),
  );
}

export function cardAccountDetailsOutputFromJSON(
  jsonString: string,
): SafeParseResult<CardAccountDetailsOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CardAccountDetailsOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CardAccountDetailsOutput' from JSON`,
  );
}

/** @internal */
export const CardOutput$inboundSchema: z.ZodType<
  CardOutput,
  z.ZodTypeDef,
  unknown
> = z.object({
  verification_status: AccountAttributesCardVerificationStatus$inboundSchema,
  balances: z.lazy(() => AccountAttributesCardAccountBalances$inboundSchema),
  capabilities: z.lazy(() =>
    AccountAttributesCardAccountCapabilities$inboundSchema
  ),
  name: z.string(),
  account_type: z.literal("CARD"),
  subtype: AccountAttributesCardSubtype$inboundSchema,
  details: z.lazy(() => CardAccountDetailsOutput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "verification_status": "verificationStatus",
    "balances": "accountBalances",
    "capabilities": "accountCapabilities",
    "account_type": "accountType",
    "details": "cardAccountDetails",
  });
});

/** @internal */
export type CardOutput$Outbound = {
  verification_status: string;
  balances: AccountAttributesCardAccountBalances$Outbound;
  capabilities: AccountAttributesCardAccountCapabilities$Outbound;
  name: string;
  account_type: "CARD";
  subtype: string;
  details: CardAccountDetailsOutput$Outbound;
};

/** @internal */
export const CardOutput$outboundSchema: z.ZodType<
  CardOutput$Outbound,
  z.ZodTypeDef,
  CardOutput
> = z.object({
  verificationStatus: AccountAttributesCardVerificationStatus$outboundSchema,
  accountBalances: z.lazy(() =>
    AccountAttributesCardAccountBalances$outboundSchema
  ),
  accountCapabilities: z.lazy(() =>
    AccountAttributesCardAccountCapabilities$outboundSchema
  ),
  name: z.string(),
  accountType: z.literal("CARD"),
  subtype: AccountAttributesCardSubtype$outboundSchema,
  cardAccountDetails: z.lazy(() => CardAccountDetailsOutput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    verificationStatus: "verification_status",
    accountBalances: "balances",
    accountCapabilities: "capabilities",
    accountType: "account_type",
    cardAccountDetails: "details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardOutput$ {
  /** @deprecated use `CardOutput$inboundSchema` instead. */
  export const inboundSchema = CardOutput$inboundSchema;
  /** @deprecated use `CardOutput$outboundSchema` instead. */
  export const outboundSchema = CardOutput$outboundSchema;
  /** @deprecated use `CardOutput$Outbound` instead. */
  export type Outbound = CardOutput$Outbound;
}

export function cardOutputToJSON(cardOutput: CardOutput): string {
  return JSON.stringify(CardOutput$outboundSchema.parse(cardOutput));
}

export function cardOutputFromJSON(
  jsonString: string,
): SafeParseResult<CardOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CardOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CardOutput' from JSON`,
  );
}

/** @internal */
export const AccountAttributesOutput$inboundSchema: z.ZodType<
  AccountAttributesOutput,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CardOutput$inboundSchema),
  z.lazy(() => EarningsBalanceReadOnly$inboundSchema),
  z.lazy(() => Depository$inboundSchema),
]);

/** @internal */
export type AccountAttributesOutput$Outbound =
  | CardOutput$Outbound
  | EarningsBalanceReadOnly$Outbound
  | Depository$Outbound;

/** @internal */
export const AccountAttributesOutput$outboundSchema: z.ZodType<
  AccountAttributesOutput$Outbound,
  z.ZodTypeDef,
  AccountAttributesOutput
> = z.union([
  z.lazy(() => CardOutput$outboundSchema),
  z.lazy(() => EarningsBalanceReadOnly$outboundSchema),
  z.lazy(() => Depository$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountAttributesOutput$ {
  /** @deprecated use `AccountAttributesOutput$inboundSchema` instead. */
  export const inboundSchema = AccountAttributesOutput$inboundSchema;
  /** @deprecated use `AccountAttributesOutput$outboundSchema` instead. */
  export const outboundSchema = AccountAttributesOutput$outboundSchema;
  /** @deprecated use `AccountAttributesOutput$Outbound` instead. */
  export type Outbound = AccountAttributesOutput$Outbound;
}

export function accountAttributesOutputToJSON(
  accountAttributesOutput: AccountAttributesOutput,
): string {
  return JSON.stringify(
    AccountAttributesOutput$outboundSchema.parse(accountAttributesOutput),
  );
}

export function accountAttributesOutputFromJSON(
  jsonString: string,
): SafeParseResult<AccountAttributesOutput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountAttributesOutput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountAttributesOutput' from JSON`,
  );
}

/** @internal */
export const DepositoryInput$inboundSchema: z.ZodType<
  DepositoryInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  account_type: z.literal("DEPOSITORY"),
  subtype: AccountAttributesDepositorySubtype$inboundSchema,
  details: z.lazy(() => DepositoryAccountDetails$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "account_type": "accountType",
    "details": "depositoryAccountDetails",
  });
});

/** @internal */
export type DepositoryInput$Outbound = {
  name: string;
  account_type: "DEPOSITORY";
  subtype: string;
  details: DepositoryAccountDetails$Outbound;
};

/** @internal */
export const DepositoryInput$outboundSchema: z.ZodType<
  DepositoryInput$Outbound,
  z.ZodTypeDef,
  DepositoryInput
> = z.object({
  name: z.string(),
  accountType: z.literal("DEPOSITORY"),
  subtype: AccountAttributesDepositorySubtype$outboundSchema,
  depositoryAccountDetails: z.lazy(() =>
    DepositoryAccountDetails$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    accountType: "account_type",
    depositoryAccountDetails: "details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DepositoryInput$ {
  /** @deprecated use `DepositoryInput$inboundSchema` instead. */
  export const inboundSchema = DepositoryInput$inboundSchema;
  /** @deprecated use `DepositoryInput$outboundSchema` instead. */
  export const outboundSchema = DepositoryInput$outboundSchema;
  /** @deprecated use `DepositoryInput$Outbound` instead. */
  export type Outbound = DepositoryInput$Outbound;
}

export function depositoryInputToJSON(
  depositoryInput: DepositoryInput,
): string {
  return JSON.stringify(DepositoryInput$outboundSchema.parse(depositoryInput));
}

export function depositoryInputFromJSON(
  jsonString: string,
): SafeParseResult<DepositoryInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DepositoryInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DepositoryInput' from JSON`,
  );
}

/** @internal */
export const EarningsBalanceReadOnlyInput$inboundSchema: z.ZodType<
  EarningsBalanceReadOnlyInput,
  z.ZodTypeDef,
  unknown
> = z.object({});

/** @internal */
export type EarningsBalanceReadOnlyInput$Outbound = {};

/** @internal */
export const EarningsBalanceReadOnlyInput$outboundSchema: z.ZodType<
  EarningsBalanceReadOnlyInput$Outbound,
  z.ZodTypeDef,
  EarningsBalanceReadOnlyInput
> = z.object({});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EarningsBalanceReadOnlyInput$ {
  /** @deprecated use `EarningsBalanceReadOnlyInput$inboundSchema` instead. */
  export const inboundSchema = EarningsBalanceReadOnlyInput$inboundSchema;
  /** @deprecated use `EarningsBalanceReadOnlyInput$outboundSchema` instead. */
  export const outboundSchema = EarningsBalanceReadOnlyInput$outboundSchema;
  /** @deprecated use `EarningsBalanceReadOnlyInput$Outbound` instead. */
  export type Outbound = EarningsBalanceReadOnlyInput$Outbound;
}

export function earningsBalanceReadOnlyInputToJSON(
  earningsBalanceReadOnlyInput: EarningsBalanceReadOnlyInput,
): string {
  return JSON.stringify(
    EarningsBalanceReadOnlyInput$outboundSchema.parse(
      earningsBalanceReadOnlyInput,
    ),
  );
}

export function earningsBalanceReadOnlyInputFromJSON(
  jsonString: string,
): SafeParseResult<EarningsBalanceReadOnlyInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EarningsBalanceReadOnlyInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EarningsBalanceReadOnlyInput' from JSON`,
  );
}

/** @internal */
export const CardAccountDetailsInput$inboundSchema: z.ZodType<
  CardAccountDetailsInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
  issuer: z.string(),
  first_name: z.string(),
  last_name: z.string(),
  expiration_month: z.string(),
  expiration_year: z.string(),
  address_line_one: z.string(),
  address_line_two: z.string().optional(),
  address_city: z.string(),
  address_state: z.string(),
  address_zip_code: z.string(),
  address_country: z.string(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "expiration_month": "expirationMonth",
    "expiration_year": "expirationYear",
    "address_line_one": "addressLineOne",
    "address_line_two": "addressLineTwo",
    "address_city": "addressCity",
    "address_state": "addressState",
    "address_zip_code": "addressZipCode",
    "address_country": "addressCountry",
  });
});

/** @internal */
export type CardAccountDetailsInput$Outbound = {
  token: string;
  issuer: string;
  first_name: string;
  last_name: string;
  expiration_month: string;
  expiration_year: string;
  address_line_one: string;
  address_line_two?: string | undefined;
  address_city: string;
  address_state: string;
  address_zip_code: string;
  address_country: string;
};

/** @internal */
export const CardAccountDetailsInput$outboundSchema: z.ZodType<
  CardAccountDetailsInput$Outbound,
  z.ZodTypeDef,
  CardAccountDetailsInput
> = z.object({
  token: z.string(),
  issuer: z.string(),
  firstName: z.string(),
  lastName: z.string(),
  expirationMonth: z.string(),
  expirationYear: z.string(),
  addressLineOne: z.string(),
  addressLineTwo: z.string().optional(),
  addressCity: z.string(),
  addressState: z.string(),
  addressZipCode: z.string(),
  addressCountry: z.string(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    expirationMonth: "expiration_month",
    expirationYear: "expiration_year",
    addressLineOne: "address_line_one",
    addressLineTwo: "address_line_two",
    addressCity: "address_city",
    addressState: "address_state",
    addressZipCode: "address_zip_code",
    addressCountry: "address_country",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardAccountDetailsInput$ {
  /** @deprecated use `CardAccountDetailsInput$inboundSchema` instead. */
  export const inboundSchema = CardAccountDetailsInput$inboundSchema;
  /** @deprecated use `CardAccountDetailsInput$outboundSchema` instead. */
  export const outboundSchema = CardAccountDetailsInput$outboundSchema;
  /** @deprecated use `CardAccountDetailsInput$Outbound` instead. */
  export type Outbound = CardAccountDetailsInput$Outbound;
}

export function cardAccountDetailsInputToJSON(
  cardAccountDetailsInput: CardAccountDetailsInput,
): string {
  return JSON.stringify(
    CardAccountDetailsInput$outboundSchema.parse(cardAccountDetailsInput),
  );
}

export function cardAccountDetailsInputFromJSON(
  jsonString: string,
): SafeParseResult<CardAccountDetailsInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CardAccountDetailsInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CardAccountDetailsInput' from JSON`,
  );
}

/** @internal */
export const CardInput$inboundSchema: z.ZodType<
  CardInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  account_type: z.literal("CARD"),
  subtype: AccountAttributesCardSubtype$inboundSchema,
  details: z.lazy(() => CardAccountDetailsInput$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "account_type": "accountType",
    "details": "cardAccountDetails",
  });
});

/** @internal */
export type CardInput$Outbound = {
  name: string;
  account_type: "CARD";
  subtype: string;
  details: CardAccountDetailsInput$Outbound;
};

/** @internal */
export const CardInput$outboundSchema: z.ZodType<
  CardInput$Outbound,
  z.ZodTypeDef,
  CardInput
> = z.object({
  name: z.string(),
  accountType: z.literal("CARD"),
  subtype: AccountAttributesCardSubtype$outboundSchema,
  cardAccountDetails: z.lazy(() => CardAccountDetailsInput$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    accountType: "account_type",
    cardAccountDetails: "details",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CardInput$ {
  /** @deprecated use `CardInput$inboundSchema` instead. */
  export const inboundSchema = CardInput$inboundSchema;
  /** @deprecated use `CardInput$outboundSchema` instead. */
  export const outboundSchema = CardInput$outboundSchema;
  /** @deprecated use `CardInput$Outbound` instead. */
  export type Outbound = CardInput$Outbound;
}

export function cardInputToJSON(cardInput: CardInput): string {
  return JSON.stringify(CardInput$outboundSchema.parse(cardInput));
}

export function cardInputFromJSON(
  jsonString: string,
): SafeParseResult<CardInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CardInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CardInput' from JSON`,
  );
}

/** @internal */
export const AccountAttributesInput$inboundSchema: z.ZodType<
  AccountAttributesInput,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => CardInput$inboundSchema),
  z.lazy(() => DepositoryInput$inboundSchema),
  z.lazy(() => EarningsBalanceReadOnlyInput$inboundSchema),
]);

/** @internal */
export type AccountAttributesInput$Outbound =
  | CardInput$Outbound
  | DepositoryInput$Outbound
  | EarningsBalanceReadOnlyInput$Outbound;

/** @internal */
export const AccountAttributesInput$outboundSchema: z.ZodType<
  AccountAttributesInput$Outbound,
  z.ZodTypeDef,
  AccountAttributesInput
> = z.union([
  z.lazy(() => CardInput$outboundSchema),
  z.lazy(() => DepositoryInput$outboundSchema),
  z.lazy(() => EarningsBalanceReadOnlyInput$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountAttributesInput$ {
  /** @deprecated use `AccountAttributesInput$inboundSchema` instead. */
  export const inboundSchema = AccountAttributesInput$inboundSchema;
  /** @deprecated use `AccountAttributesInput$outboundSchema` instead. */
  export const outboundSchema = AccountAttributesInput$outboundSchema;
  /** @deprecated use `AccountAttributesInput$Outbound` instead. */
  export type Outbound = AccountAttributesInput$Outbound;
}

export function accountAttributesInputToJSON(
  accountAttributesInput: AccountAttributesInput,
): string {
  return JSON.stringify(
    AccountAttributesInput$outboundSchema.parse(accountAttributesInput),
  );
}

export function accountAttributesInputFromJSON(
  jsonString: string,
): SafeParseResult<AccountAttributesInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountAttributesInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountAttributesInput' from JSON`,
  );
}
