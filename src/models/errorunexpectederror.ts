/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A list of links to resources that may be helpful in resolving the error.
 */
export type ErrorUnexpectedErrorLinks = {
  about?: string | undefined;
};

/**
 * Location in the request that may have caused the error.
 */
export type ErrorUnexpectedErrorSource = {
  /**
   * The name of the parameter that caused the error.
   */
  parameter?: string | undefined;
  /**
   * A JSON Pointer to the location in the request that caused the error.
   */
  pointer?: string | undefined;
  /**
   * The name of the header that caused the error.
   */
  header?: string | undefined;
};

/**
 * Additional information about the error.
 */
export type ErrorUnexpectedErrorMeta = {
  /**
   * A UUID for the originating request.
   */
  requestId?: string | undefined;
  /**
   * An ID used for tracing purposes.
   */
  traceId?: string | undefined;
};

/**
 * A code that indicates what went wrong.
 */
export const ErrorUnexpectedErrorCode = {
  UnexpectedError: "UNEXPECTED_ERROR",
} as const;
/**
 * A code that indicates what went wrong.
 */
export type ErrorUnexpectedErrorCode = ClosedEnum<
  typeof ErrorUnexpectedErrorCode
>;

export type ErrorUnexpectedError = {
  /**
   * The HTTP status code for the error.
   */
  status: string;
  /**
   * A message that explains the meaning of the error code. Developers are advised not to make programmatic use of this value, as it may change
   */
  detail: string;
  /**
   * A list of links to resources that may be helpful in resolving the error.
   */
  links: ErrorUnexpectedErrorLinks;
  /**
   * Location in the request that may have caused the error.
   */
  source?: ErrorUnexpectedErrorSource | undefined;
  /**
   * Additional information about the error.
   */
  meta: ErrorUnexpectedErrorMeta;
  /**
   * A code that indicates what went wrong.
   */
  code: ErrorUnexpectedErrorCode;
};

/** @internal */
export const ErrorUnexpectedErrorLinks$inboundSchema: z.ZodType<
  ErrorUnexpectedErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  about: z.string().optional(),
});

/** @internal */
export type ErrorUnexpectedErrorLinks$Outbound = {
  about?: string | undefined;
};

/** @internal */
export const ErrorUnexpectedErrorLinks$outboundSchema: z.ZodType<
  ErrorUnexpectedErrorLinks$Outbound,
  z.ZodTypeDef,
  ErrorUnexpectedErrorLinks
> = z.object({
  about: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorUnexpectedErrorLinks$ {
  /** @deprecated use `ErrorUnexpectedErrorLinks$inboundSchema` instead. */
  export const inboundSchema = ErrorUnexpectedErrorLinks$inboundSchema;
  /** @deprecated use `ErrorUnexpectedErrorLinks$outboundSchema` instead. */
  export const outboundSchema = ErrorUnexpectedErrorLinks$outboundSchema;
  /** @deprecated use `ErrorUnexpectedErrorLinks$Outbound` instead. */
  export type Outbound = ErrorUnexpectedErrorLinks$Outbound;
}

export function errorUnexpectedErrorLinksToJSON(
  errorUnexpectedErrorLinks: ErrorUnexpectedErrorLinks,
): string {
  return JSON.stringify(
    ErrorUnexpectedErrorLinks$outboundSchema.parse(errorUnexpectedErrorLinks),
  );
}

export function errorUnexpectedErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<ErrorUnexpectedErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorUnexpectedErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorUnexpectedErrorLinks' from JSON`,
  );
}

/** @internal */
export const ErrorUnexpectedErrorSource$inboundSchema: z.ZodType<
  ErrorUnexpectedErrorSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameter: z.string().optional(),
  pointer: z.string().optional(),
  header: z.string().optional(),
});

/** @internal */
export type ErrorUnexpectedErrorSource$Outbound = {
  parameter?: string | undefined;
  pointer?: string | undefined;
  header?: string | undefined;
};

/** @internal */
export const ErrorUnexpectedErrorSource$outboundSchema: z.ZodType<
  ErrorUnexpectedErrorSource$Outbound,
  z.ZodTypeDef,
  ErrorUnexpectedErrorSource
> = z.object({
  parameter: z.string().optional(),
  pointer: z.string().optional(),
  header: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorUnexpectedErrorSource$ {
  /** @deprecated use `ErrorUnexpectedErrorSource$inboundSchema` instead. */
  export const inboundSchema = ErrorUnexpectedErrorSource$inboundSchema;
  /** @deprecated use `ErrorUnexpectedErrorSource$outboundSchema` instead. */
  export const outboundSchema = ErrorUnexpectedErrorSource$outboundSchema;
  /** @deprecated use `ErrorUnexpectedErrorSource$Outbound` instead. */
  export type Outbound = ErrorUnexpectedErrorSource$Outbound;
}

export function errorUnexpectedErrorSourceToJSON(
  errorUnexpectedErrorSource: ErrorUnexpectedErrorSource,
): string {
  return JSON.stringify(
    ErrorUnexpectedErrorSource$outboundSchema.parse(errorUnexpectedErrorSource),
  );
}

export function errorUnexpectedErrorSourceFromJSON(
  jsonString: string,
): SafeParseResult<ErrorUnexpectedErrorSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorUnexpectedErrorSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorUnexpectedErrorSource' from JSON`,
  );
}

/** @internal */
export const ErrorUnexpectedErrorMeta$inboundSchema: z.ZodType<
  ErrorUnexpectedErrorMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  request_id: z.string().optional(),
  trace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
    "trace_id": "traceId",
  });
});

/** @internal */
export type ErrorUnexpectedErrorMeta$Outbound = {
  request_id?: string | undefined;
  trace_id?: string | undefined;
};

/** @internal */
export const ErrorUnexpectedErrorMeta$outboundSchema: z.ZodType<
  ErrorUnexpectedErrorMeta$Outbound,
  z.ZodTypeDef,
  ErrorUnexpectedErrorMeta
> = z.object({
  requestId: z.string().optional(),
  traceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
    traceId: "trace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorUnexpectedErrorMeta$ {
  /** @deprecated use `ErrorUnexpectedErrorMeta$inboundSchema` instead. */
  export const inboundSchema = ErrorUnexpectedErrorMeta$inboundSchema;
  /** @deprecated use `ErrorUnexpectedErrorMeta$outboundSchema` instead. */
  export const outboundSchema = ErrorUnexpectedErrorMeta$outboundSchema;
  /** @deprecated use `ErrorUnexpectedErrorMeta$Outbound` instead. */
  export type Outbound = ErrorUnexpectedErrorMeta$Outbound;
}

export function errorUnexpectedErrorMetaToJSON(
  errorUnexpectedErrorMeta: ErrorUnexpectedErrorMeta,
): string {
  return JSON.stringify(
    ErrorUnexpectedErrorMeta$outboundSchema.parse(errorUnexpectedErrorMeta),
  );
}

export function errorUnexpectedErrorMetaFromJSON(
  jsonString: string,
): SafeParseResult<ErrorUnexpectedErrorMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorUnexpectedErrorMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorUnexpectedErrorMeta' from JSON`,
  );
}

/** @internal */
export const ErrorUnexpectedErrorCode$inboundSchema: z.ZodNativeEnum<
  typeof ErrorUnexpectedErrorCode
> = z.nativeEnum(ErrorUnexpectedErrorCode);

/** @internal */
export const ErrorUnexpectedErrorCode$outboundSchema: z.ZodNativeEnum<
  typeof ErrorUnexpectedErrorCode
> = ErrorUnexpectedErrorCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorUnexpectedErrorCode$ {
  /** @deprecated use `ErrorUnexpectedErrorCode$inboundSchema` instead. */
  export const inboundSchema = ErrorUnexpectedErrorCode$inboundSchema;
  /** @deprecated use `ErrorUnexpectedErrorCode$outboundSchema` instead. */
  export const outboundSchema = ErrorUnexpectedErrorCode$outboundSchema;
}

/** @internal */
export const ErrorUnexpectedError$inboundSchema: z.ZodType<
  ErrorUnexpectedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string(),
  detail: z.string(),
  links: z.lazy(() => ErrorUnexpectedErrorLinks$inboundSchema),
  source: z.lazy(() => ErrorUnexpectedErrorSource$inboundSchema).optional(),
  meta: z.lazy(() => ErrorUnexpectedErrorMeta$inboundSchema),
  code: ErrorUnexpectedErrorCode$inboundSchema,
});

/** @internal */
export type ErrorUnexpectedError$Outbound = {
  status: string;
  detail: string;
  links: ErrorUnexpectedErrorLinks$Outbound;
  source?: ErrorUnexpectedErrorSource$Outbound | undefined;
  meta: ErrorUnexpectedErrorMeta$Outbound;
  code: string;
};

/** @internal */
export const ErrorUnexpectedError$outboundSchema: z.ZodType<
  ErrorUnexpectedError$Outbound,
  z.ZodTypeDef,
  ErrorUnexpectedError
> = z.object({
  status: z.string(),
  detail: z.string(),
  links: z.lazy(() => ErrorUnexpectedErrorLinks$outboundSchema),
  source: z.lazy(() => ErrorUnexpectedErrorSource$outboundSchema).optional(),
  meta: z.lazy(() => ErrorUnexpectedErrorMeta$outboundSchema),
  code: ErrorUnexpectedErrorCode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorUnexpectedError$ {
  /** @deprecated use `ErrorUnexpectedError$inboundSchema` instead. */
  export const inboundSchema = ErrorUnexpectedError$inboundSchema;
  /** @deprecated use `ErrorUnexpectedError$outboundSchema` instead. */
  export const outboundSchema = ErrorUnexpectedError$outboundSchema;
  /** @deprecated use `ErrorUnexpectedError$Outbound` instead. */
  export type Outbound = ErrorUnexpectedError$Outbound;
}

export function errorUnexpectedErrorToJSON(
  errorUnexpectedError: ErrorUnexpectedError,
): string {
  return JSON.stringify(
    ErrorUnexpectedError$outboundSchema.parse(errorUnexpectedError),
  );
}

export function errorUnexpectedErrorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorUnexpectedError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorUnexpectedError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorUnexpectedError' from JSON`,
  );
}
