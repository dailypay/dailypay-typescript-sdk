/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PersonAttributesInput,
  PersonAttributesInput$inboundSchema,
  PersonAttributesInput$Outbound,
  PersonAttributesInput$outboundSchema,
} from "./personattributesinput.js";

export type PersonResourceInput = {
  type: "people";
  id: string;
  /**
   * A person is a record of someone known to DailyPay. There will only ever be one person record per human being.
   */
  attributes: PersonAttributesInput;
};

/** @internal */
export const PersonResourceInput$inboundSchema: z.ZodType<
  PersonResourceInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("people"),
  id: z.string(),
  attributes: PersonAttributesInput$inboundSchema,
});

/** @internal */
export type PersonResourceInput$Outbound = {
  type: "people";
  id: string;
  attributes: PersonAttributesInput$Outbound;
};

/** @internal */
export const PersonResourceInput$outboundSchema: z.ZodType<
  PersonResourceInput$Outbound,
  z.ZodTypeDef,
  PersonResourceInput
> = z.object({
  type: z.literal("people"),
  id: z.string(),
  attributes: PersonAttributesInput$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PersonResourceInput$ {
  /** @deprecated use `PersonResourceInput$inboundSchema` instead. */
  export const inboundSchema = PersonResourceInput$inboundSchema;
  /** @deprecated use `PersonResourceInput$outboundSchema` instead. */
  export const outboundSchema = PersonResourceInput$outboundSchema;
  /** @deprecated use `PersonResourceInput$Outbound` instead. */
  export type Outbound = PersonResourceInput$Outbound;
}

export function personResourceInputToJSON(
  personResourceInput: PersonResourceInput,
): string {
  return JSON.stringify(
    PersonResourceInput$outboundSchema.parse(personResourceInput),
  );
}

export function personResourceInputFromJSON(
  jsonString: string,
): SafeParseResult<PersonResourceInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PersonResourceInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PersonResourceInput' from JSON`,
  );
}
