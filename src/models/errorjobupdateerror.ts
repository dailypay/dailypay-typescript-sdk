/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A list of links to resources that may be helpful in resolving the error.
 */
export type ErrorJobUpdateErrorLinks = {
  about?: string | undefined;
};

/**
 * Location in the request that may have caused the error.
 */
export type ErrorJobUpdateErrorSource = {
  /**
   * The name of the parameter that caused the error.
   */
  parameter?: string | undefined;
  /**
   * A JSON Pointer to the location in the request that caused the error.
   */
  pointer?: string | undefined;
  /**
   * The name of the header that caused the error.
   */
  header?: string | undefined;
};

/**
 * Additional information about the error.
 */
export type ErrorJobUpdateErrorMeta = {
  /**
   * A UUID for the originating request.
   */
  requestId?: string | undefined;
  /**
   * An ID used for tracing purposes.
   */
  traceId?: string | undefined;
};

export type ErrorJobUpdateError = {
  /**
   * A code that indicates what went wrong. Please consider this an open enum, where new codes may be added over time.
   */
  code: string;
  /**
   * The HTTP status code for the error.
   */
  status: string;
  /**
   * A message that explains the meaning of the error code. Developers are advised not to make programmatic use of this value, as it may change
   */
  detail: string;
  /**
   * A list of links to resources that may be helpful in resolving the error.
   */
  links: ErrorJobUpdateErrorLinks;
  /**
   * Location in the request that may have caused the error.
   */
  source?: ErrorJobUpdateErrorSource | undefined;
  /**
   * Additional information about the error.
   */
  meta: ErrorJobUpdateErrorMeta;
};

/** @internal */
export const ErrorJobUpdateErrorLinks$inboundSchema: z.ZodType<
  ErrorJobUpdateErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  about: z.string().optional(),
});

/** @internal */
export type ErrorJobUpdateErrorLinks$Outbound = {
  about?: string | undefined;
};

/** @internal */
export const ErrorJobUpdateErrorLinks$outboundSchema: z.ZodType<
  ErrorJobUpdateErrorLinks$Outbound,
  z.ZodTypeDef,
  ErrorJobUpdateErrorLinks
> = z.object({
  about: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorJobUpdateErrorLinks$ {
  /** @deprecated use `ErrorJobUpdateErrorLinks$inboundSchema` instead. */
  export const inboundSchema = ErrorJobUpdateErrorLinks$inboundSchema;
  /** @deprecated use `ErrorJobUpdateErrorLinks$outboundSchema` instead. */
  export const outboundSchema = ErrorJobUpdateErrorLinks$outboundSchema;
  /** @deprecated use `ErrorJobUpdateErrorLinks$Outbound` instead. */
  export type Outbound = ErrorJobUpdateErrorLinks$Outbound;
}

export function errorJobUpdateErrorLinksToJSON(
  errorJobUpdateErrorLinks: ErrorJobUpdateErrorLinks,
): string {
  return JSON.stringify(
    ErrorJobUpdateErrorLinks$outboundSchema.parse(errorJobUpdateErrorLinks),
  );
}

export function errorJobUpdateErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<ErrorJobUpdateErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorJobUpdateErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorJobUpdateErrorLinks' from JSON`,
  );
}

/** @internal */
export const ErrorJobUpdateErrorSource$inboundSchema: z.ZodType<
  ErrorJobUpdateErrorSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameter: z.string().optional(),
  pointer: z.string().optional(),
  header: z.string().optional(),
});

/** @internal */
export type ErrorJobUpdateErrorSource$Outbound = {
  parameter?: string | undefined;
  pointer?: string | undefined;
  header?: string | undefined;
};

/** @internal */
export const ErrorJobUpdateErrorSource$outboundSchema: z.ZodType<
  ErrorJobUpdateErrorSource$Outbound,
  z.ZodTypeDef,
  ErrorJobUpdateErrorSource
> = z.object({
  parameter: z.string().optional(),
  pointer: z.string().optional(),
  header: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorJobUpdateErrorSource$ {
  /** @deprecated use `ErrorJobUpdateErrorSource$inboundSchema` instead. */
  export const inboundSchema = ErrorJobUpdateErrorSource$inboundSchema;
  /** @deprecated use `ErrorJobUpdateErrorSource$outboundSchema` instead. */
  export const outboundSchema = ErrorJobUpdateErrorSource$outboundSchema;
  /** @deprecated use `ErrorJobUpdateErrorSource$Outbound` instead. */
  export type Outbound = ErrorJobUpdateErrorSource$Outbound;
}

export function errorJobUpdateErrorSourceToJSON(
  errorJobUpdateErrorSource: ErrorJobUpdateErrorSource,
): string {
  return JSON.stringify(
    ErrorJobUpdateErrorSource$outboundSchema.parse(errorJobUpdateErrorSource),
  );
}

export function errorJobUpdateErrorSourceFromJSON(
  jsonString: string,
): SafeParseResult<ErrorJobUpdateErrorSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorJobUpdateErrorSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorJobUpdateErrorSource' from JSON`,
  );
}

/** @internal */
export const ErrorJobUpdateErrorMeta$inboundSchema: z.ZodType<
  ErrorJobUpdateErrorMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  request_id: z.string().optional(),
  trace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
    "trace_id": "traceId",
  });
});

/** @internal */
export type ErrorJobUpdateErrorMeta$Outbound = {
  request_id?: string | undefined;
  trace_id?: string | undefined;
};

/** @internal */
export const ErrorJobUpdateErrorMeta$outboundSchema: z.ZodType<
  ErrorJobUpdateErrorMeta$Outbound,
  z.ZodTypeDef,
  ErrorJobUpdateErrorMeta
> = z.object({
  requestId: z.string().optional(),
  traceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
    traceId: "trace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorJobUpdateErrorMeta$ {
  /** @deprecated use `ErrorJobUpdateErrorMeta$inboundSchema` instead. */
  export const inboundSchema = ErrorJobUpdateErrorMeta$inboundSchema;
  /** @deprecated use `ErrorJobUpdateErrorMeta$outboundSchema` instead. */
  export const outboundSchema = ErrorJobUpdateErrorMeta$outboundSchema;
  /** @deprecated use `ErrorJobUpdateErrorMeta$Outbound` instead. */
  export type Outbound = ErrorJobUpdateErrorMeta$Outbound;
}

export function errorJobUpdateErrorMetaToJSON(
  errorJobUpdateErrorMeta: ErrorJobUpdateErrorMeta,
): string {
  return JSON.stringify(
    ErrorJobUpdateErrorMeta$outboundSchema.parse(errorJobUpdateErrorMeta),
  );
}

export function errorJobUpdateErrorMetaFromJSON(
  jsonString: string,
): SafeParseResult<ErrorJobUpdateErrorMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorJobUpdateErrorMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorJobUpdateErrorMeta' from JSON`,
  );
}

/** @internal */
export const ErrorJobUpdateError$inboundSchema: z.ZodType<
  ErrorJobUpdateError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  status: z.string(),
  detail: z.string(),
  links: z.lazy(() => ErrorJobUpdateErrorLinks$inboundSchema),
  source: z.lazy(() => ErrorJobUpdateErrorSource$inboundSchema).optional(),
  meta: z.lazy(() => ErrorJobUpdateErrorMeta$inboundSchema),
});

/** @internal */
export type ErrorJobUpdateError$Outbound = {
  code: string;
  status: string;
  detail: string;
  links: ErrorJobUpdateErrorLinks$Outbound;
  source?: ErrorJobUpdateErrorSource$Outbound | undefined;
  meta: ErrorJobUpdateErrorMeta$Outbound;
};

/** @internal */
export const ErrorJobUpdateError$outboundSchema: z.ZodType<
  ErrorJobUpdateError$Outbound,
  z.ZodTypeDef,
  ErrorJobUpdateError
> = z.object({
  code: z.string(),
  status: z.string(),
  detail: z.string(),
  links: z.lazy(() => ErrorJobUpdateErrorLinks$outboundSchema),
  source: z.lazy(() => ErrorJobUpdateErrorSource$outboundSchema).optional(),
  meta: z.lazy(() => ErrorJobUpdateErrorMeta$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorJobUpdateError$ {
  /** @deprecated use `ErrorJobUpdateError$inboundSchema` instead. */
  export const inboundSchema = ErrorJobUpdateError$inboundSchema;
  /** @deprecated use `ErrorJobUpdateError$outboundSchema` instead. */
  export const outboundSchema = ErrorJobUpdateError$outboundSchema;
  /** @deprecated use `ErrorJobUpdateError$Outbound` instead. */
  export type Outbound = ErrorJobUpdateError$Outbound;
}

export function errorJobUpdateErrorToJSON(
  errorJobUpdateError: ErrorJobUpdateError,
): string {
  return JSON.stringify(
    ErrorJobUpdateError$outboundSchema.parse(errorJobUpdateError),
  );
}

export function errorJobUpdateErrorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorJobUpdateError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorJobUpdateError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorJobUpdateError' from JSON`,
  );
}
