/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A paycheck expected for an open pay period will have the status ESTIMATED. At the end of the pay period, the paycheck will begin PROCESSING. When it is sent, it will become IN_TRANSIT. Finally, once deposited in an account it will have the status DEPOSITED.
 */
export const PaycheckAttributesStatus = {
  Estimated: "ESTIMATED",
  Processing: "PROCESSING",
  InTransit: "IN_TRANSIT",
  Deposited: "DEPOSITED",
} as const;
/**
 * A paycheck expected for an open pay period will have the status ESTIMATED. At the end of the pay period, the paycheck will begin PROCESSING. When it is sent, it will become IN_TRANSIT. Finally, once deposited in an account it will have the status DEPOSITED.
 */
export type PaycheckAttributesStatus = ClosedEnum<
  typeof PaycheckAttributesStatus
>;

export type PaycheckAttributes = {
  /**
   * A paycheck expected for an open pay period will have the status ESTIMATED. At the end of the pay period, the paycheck will begin PROCESSING. When it is sent, it will become IN_TRANSIT. Finally, once deposited in an account it will have the status DEPOSITED.
   */
  status: PaycheckAttributesStatus;
  /**
   * An ISO 8601 timestamp denoting the ending day of a paycheck's pay period. For example, a pay period that ends during the day of March 15 will have a value of 2023-03-15T04:00:00Z.
   */
  payPeriodEndsAt: Date;
  /**
   * An ISO 8601 timestamp denoting the first day of a paycheck's pay period. For example, a pay period that starts during the day of March 15 will have a value of 2023-03-15T04:00:00Z.
   */
  payPeriodStartsAt: Date;
  /**
   * An ISO 8601 timestamp denoting the day the paycheck is scheduled to be delivered.
   */
  depositExpectedAt: Date;
  /**
   * The amount debited and settled from this paycheck prior to the end of the pay period. Debits are settled during a pay period in order to cover withdrawals from an earnings balance account. This amount is given as a monetary quantity expressed in units of the lowest denomination in the associated currency. For example, { total_debited: 7050 } with currency USD resolves to $70.50.
   */
  totalDebited: number | null;
  /**
   * The total earnings for this paycheck before any deductions are applied. This amount is given as a monetary quantity expressed in units of the lowest denomination in the associated currency. For example, { gross_earnings: 55370 } with currency USD resolves to $553.70
   */
  grossEarnings: number;
  /**
   * The amount withheld from this paycheck by the employer, usually for taxes. This amount is given as a monetary quantity expressed in units of the lowest denomination in the associated currency. For example, { withholdings: 5000 } with currency USD resolves to $50.00.
   */
  employerWithholdings: number | null;
  /**
   * The net earnings for the paycheck once settled given in a monetary quantity expressed in units of the lowest denomination in the associated currency. For example, { earnings: 50370 } with currency USD resolves to $503.70.
   */
  netEarnings: number | null;
  /**
   * A three-letter ISO 4217 currency code. For example, `USD` for US Dollars, `EUR` for Euros, or `JPY` for Japanese Yen.
   */
  currency: string;
};

/** @internal */
export const PaycheckAttributesStatus$inboundSchema: z.ZodNativeEnum<
  typeof PaycheckAttributesStatus
> = z.nativeEnum(PaycheckAttributesStatus);

/** @internal */
export const PaycheckAttributesStatus$outboundSchema: z.ZodNativeEnum<
  typeof PaycheckAttributesStatus
> = PaycheckAttributesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaycheckAttributesStatus$ {
  /** @deprecated use `PaycheckAttributesStatus$inboundSchema` instead. */
  export const inboundSchema = PaycheckAttributesStatus$inboundSchema;
  /** @deprecated use `PaycheckAttributesStatus$outboundSchema` instead. */
  export const outboundSchema = PaycheckAttributesStatus$outboundSchema;
}

/** @internal */
export const PaycheckAttributes$inboundSchema: z.ZodType<
  PaycheckAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: PaycheckAttributesStatus$inboundSchema,
  pay_period_ends_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  pay_period_starts_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  deposit_expected_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  total_debited: z.nullable(z.number().int()),
  gross_earnings: z.number().int(),
  employer_withholdings: z.nullable(z.number().int()),
  net_earnings: z.nullable(z.number().int()),
  currency: z.string(),
}).transform((v) => {
  return remap$(v, {
    "pay_period_ends_at": "payPeriodEndsAt",
    "pay_period_starts_at": "payPeriodStartsAt",
    "deposit_expected_at": "depositExpectedAt",
    "total_debited": "totalDebited",
    "gross_earnings": "grossEarnings",
    "employer_withholdings": "employerWithholdings",
    "net_earnings": "netEarnings",
  });
});

/** @internal */
export type PaycheckAttributes$Outbound = {
  status: string;
  pay_period_ends_at: string;
  pay_period_starts_at: string;
  deposit_expected_at: string;
  total_debited: number | null;
  gross_earnings: number;
  employer_withholdings: number | null;
  net_earnings: number | null;
  currency: string;
};

/** @internal */
export const PaycheckAttributes$outboundSchema: z.ZodType<
  PaycheckAttributes$Outbound,
  z.ZodTypeDef,
  PaycheckAttributes
> = z.object({
  status: PaycheckAttributesStatus$outboundSchema,
  payPeriodEndsAt: z.date().transform(v => v.toISOString()),
  payPeriodStartsAt: z.date().transform(v => v.toISOString()),
  depositExpectedAt: z.date().transform(v => v.toISOString()),
  totalDebited: z.nullable(z.number().int()),
  grossEarnings: z.number().int(),
  employerWithholdings: z.nullable(z.number().int()),
  netEarnings: z.nullable(z.number().int()),
  currency: z.string(),
}).transform((v) => {
  return remap$(v, {
    payPeriodEndsAt: "pay_period_ends_at",
    payPeriodStartsAt: "pay_period_starts_at",
    depositExpectedAt: "deposit_expected_at",
    totalDebited: "total_debited",
    grossEarnings: "gross_earnings",
    employerWithholdings: "employer_withholdings",
    netEarnings: "net_earnings",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PaycheckAttributes$ {
  /** @deprecated use `PaycheckAttributes$inboundSchema` instead. */
  export const inboundSchema = PaycheckAttributes$inboundSchema;
  /** @deprecated use `PaycheckAttributes$outboundSchema` instead. */
  export const outboundSchema = PaycheckAttributes$outboundSchema;
  /** @deprecated use `PaycheckAttributes$Outbound` instead. */
  export type Outbound = PaycheckAttributes$Outbound;
}

export function paycheckAttributesToJSON(
  paycheckAttributes: PaycheckAttributes,
): string {
  return JSON.stringify(
    PaycheckAttributes$outboundSchema.parse(paycheckAttributes),
  );
}

export function paycheckAttributesFromJSON(
  jsonString: string,
): SafeParseResult<PaycheckAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PaycheckAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PaycheckAttributes' from JSON`,
  );
}
