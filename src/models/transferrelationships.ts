/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AccountRelationship,
  AccountRelationship$inboundSchema,
  AccountRelationship$Outbound,
  AccountRelationship$outboundSchema,
} from "./accountrelationship.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FundingSourcesRelationship,
  FundingSourcesRelationship$inboundSchema,
  FundingSourcesRelationship$Outbound,
  FundingSourcesRelationship$outboundSchema,
} from "./fundingsourcesrelationship.js";
import {
  PaycheckRelationship,
  PaycheckRelationship$inboundSchema,
  PaycheckRelationship$Outbound,
  PaycheckRelationship$outboundSchema,
} from "./paycheckrelationship.js";
import {
  PersonRelationship,
  PersonRelationship$inboundSchema,
  PersonRelationship$Outbound,
  PersonRelationship$outboundSchema,
} from "./personrelationship.js";

/**
 * Origin may be a reference to either a Paycheck or an Account.
 *
 * @remarks
 *
 * User-created transfers always originate from an Account with `account_type` `EARNINGS_BALANCE`.
 *
 * A transfer that originates from a Paycheck is a
 * system-created record that describes a credit of earnings to an account with `account_type` `EARNINGS_BALANCE`.
 */
export type Origin = AccountRelationship | PaycheckRelationship;

/**
 * The relationships between the transfer and other resources, including the destination account, the origination account, and the person who initiated the transfer.
 *
 * @remarks
 */
export type TransferRelationships = {
  /**
   * Origin may be a reference to either a Paycheck or an Account.
   *
   * @remarks
   *
   * User-created transfers always originate from an Account with `account_type` `EARNINGS_BALANCE`.
   *
   * A transfer that originates from a Paycheck is a
   * system-created record that describes a credit of earnings to an account with `account_type` `EARNINGS_BALANCE`.
   */
  origin: AccountRelationship | PaycheckRelationship;
  destination: AccountRelationship;
  person: PersonRelationship;
  estimatedFundingSources: FundingSourcesRelationship;
  finalFundingSources: FundingSourcesRelationship;
};

/** @internal */
export const Origin$inboundSchema: z.ZodType<Origin, z.ZodTypeDef, unknown> = z
  .union([
    AccountRelationship$inboundSchema,
    PaycheckRelationship$inboundSchema,
  ]);

/** @internal */
export type Origin$Outbound =
  | AccountRelationship$Outbound
  | PaycheckRelationship$Outbound;

/** @internal */
export const Origin$outboundSchema: z.ZodType<
  Origin$Outbound,
  z.ZodTypeDef,
  Origin
> = z.union([
  AccountRelationship$outboundSchema,
  PaycheckRelationship$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Origin$ {
  /** @deprecated use `Origin$inboundSchema` instead. */
  export const inboundSchema = Origin$inboundSchema;
  /** @deprecated use `Origin$outboundSchema` instead. */
  export const outboundSchema = Origin$outboundSchema;
  /** @deprecated use `Origin$Outbound` instead. */
  export type Outbound = Origin$Outbound;
}

export function originToJSON(origin: Origin): string {
  return JSON.stringify(Origin$outboundSchema.parse(origin));
}

export function originFromJSON(
  jsonString: string,
): SafeParseResult<Origin, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Origin$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Origin' from JSON`,
  );
}

/** @internal */
export const TransferRelationships$inboundSchema: z.ZodType<
  TransferRelationships,
  z.ZodTypeDef,
  unknown
> = z.object({
  origin: z.union([
    AccountRelationship$inboundSchema,
    PaycheckRelationship$inboundSchema,
  ]),
  destination: AccountRelationship$inboundSchema,
  person: PersonRelationship$inboundSchema,
  estimated_funding_sources: FundingSourcesRelationship$inboundSchema,
  final_funding_sources: FundingSourcesRelationship$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "estimated_funding_sources": "estimatedFundingSources",
    "final_funding_sources": "finalFundingSources",
  });
});

/** @internal */
export type TransferRelationships$Outbound = {
  origin: AccountRelationship$Outbound | PaycheckRelationship$Outbound;
  destination: AccountRelationship$Outbound;
  person: PersonRelationship$Outbound;
  estimated_funding_sources: FundingSourcesRelationship$Outbound;
  final_funding_sources: FundingSourcesRelationship$Outbound;
};

/** @internal */
export const TransferRelationships$outboundSchema: z.ZodType<
  TransferRelationships$Outbound,
  z.ZodTypeDef,
  TransferRelationships
> = z.object({
  origin: z.union([
    AccountRelationship$outboundSchema,
    PaycheckRelationship$outboundSchema,
  ]),
  destination: AccountRelationship$outboundSchema,
  person: PersonRelationship$outboundSchema,
  estimatedFundingSources: FundingSourcesRelationship$outboundSchema,
  finalFundingSources: FundingSourcesRelationship$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    estimatedFundingSources: "estimated_funding_sources",
    finalFundingSources: "final_funding_sources",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferRelationships$ {
  /** @deprecated use `TransferRelationships$inboundSchema` instead. */
  export const inboundSchema = TransferRelationships$inboundSchema;
  /** @deprecated use `TransferRelationships$outboundSchema` instead. */
  export const outboundSchema = TransferRelationships$outboundSchema;
  /** @deprecated use `TransferRelationships$Outbound` instead. */
  export type Outbound = TransferRelationships$Outbound;
}

export function transferRelationshipsToJSON(
  transferRelationships: TransferRelationships,
): string {
  return JSON.stringify(
    TransferRelationships$outboundSchema.parse(transferRelationships),
  );
}

export function transferRelationshipsFromJSON(
  jsonString: string,
): SafeParseResult<TransferRelationships, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferRelationships$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferRelationships' from JSON`,
  );
}
