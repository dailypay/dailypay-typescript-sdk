/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import * as models from "../index.js";
import * as operations from "../operations/index.js";
import { DailyPayError } from "./dailypayerror.js";

/**
 * Something went wrong when exchanging oauth grant or refresh token for an access token. NOTE: This conforms to the OAuth spec and does not follow the same error pattern as the rest of the API
 */
export type BadRequestErrorData = {
  /**
   * Error code indicating what went wrong with the oauth token exchange. See the OAuth2 RFC for further context https://datatracker.ietf.org/doc/html/rfc6749#section-5.2
   */
  errorCode?: operations.ErrorCode | undefined;
  /**
   * A description of exactly went wrong with the oauth token exchange. This is meant to improve developer experience, and is subject to change, so this should not be relied upon programatically.
   */
  errorDescription?: string | undefined;
  httpMeta: models.HTTPMetadata;
};

/**
 * Something went wrong when exchanging oauth grant or refresh token for an access token. NOTE: This conforms to the OAuth spec and does not follow the same error pattern as the rest of the API
 */
export class BadRequestError extends DailyPayError {
  /**
   * Error code indicating what went wrong with the oauth token exchange. See the OAuth2 RFC for further context https://datatracker.ietf.org/doc/html/rfc6749#section-5.2
   */
  errorCode?: operations.ErrorCode | undefined;
  /**
   * A description of exactly went wrong with the oauth token exchange. This is meant to improve developer experience, and is subject to change, so this should not be relied upon programatically.
   */
  errorDescription?: string | undefined;

  /** The original data that was passed to this error instance. */
  data$: BadRequestErrorData;

  constructor(
    err: BadRequestErrorData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    if (err.errorCode != null) this.errorCode = err.errorCode;
    if (err.errorDescription != null) {
      this.errorDescription = err.errorDescription;
    }

    this.name = "BadRequestError";
  }
}

/** @internal */
export const BadRequestError$inboundSchema: z.ZodType<
  BadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  error_code: operations.ErrorCode$inboundSchema.optional(),
  error_description: z.string().optional(),
  HttpMeta: models.HTTPMetadata$inboundSchema,
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "error_code": "errorCode",
      "error_description": "errorDescription",
      "HttpMeta": "httpMeta",
    });

    return new BadRequestError(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type BadRequestError$Outbound = {
  error_code?: string | undefined;
  error_description?: string | undefined;
  HttpMeta: models.HTTPMetadata$Outbound;
};

/** @internal */
export const BadRequestError$outboundSchema: z.ZodType<
  BadRequestError$Outbound,
  z.ZodTypeDef,
  BadRequestError
> = z.instanceof(BadRequestError)
  .transform(v => v.data$)
  .pipe(
    z.object({
      errorCode: operations.ErrorCode$outboundSchema.optional(),
      errorDescription: z.string().optional(),
      httpMeta: models.HTTPMetadata$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        errorCode: "error_code",
        errorDescription: "error_description",
        httpMeta: "HttpMeta",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BadRequestError$ {
  /** @deprecated use `BadRequestError$inboundSchema` instead. */
  export const inboundSchema = BadRequestError$inboundSchema;
  /** @deprecated use `BadRequestError$outboundSchema` instead. */
  export const outboundSchema = BadRequestError$outboundSchema;
  /** @deprecated use `BadRequestError$Outbound` instead. */
  export type Outbound = BadRequestError$Outbound;
}
