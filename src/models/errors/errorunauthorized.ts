/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import * as models from "../index.js";
import { DailyPayError } from "./dailypayerror.js";

/**
 * Invalid authentication credentials
 */
export type ErrorUnauthorizedData = {
  /**
   * A list of errors that occurred.
   */
  errors: Array<models.ErrorUnauthorizedError>;
  httpMeta: models.HTTPMetadata;
};

/**
 * Invalid authentication credentials
 */
export class ErrorUnauthorized extends DailyPayError {
  /**
   * A list of errors that occurred.
   */
  errors: Array<models.ErrorUnauthorizedError>;

  /** The original data that was passed to this error instance. */
  data$: ErrorUnauthorizedData;

  constructor(
    err: ErrorUnauthorizedData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.errors = err.errors;

    this.name = "ErrorUnauthorized";
  }
}

/** @internal */
export const ErrorUnauthorized$inboundSchema: z.ZodType<
  ErrorUnauthorized,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(models.ErrorUnauthorizedError$inboundSchema),
  HttpMeta: models.HTTPMetadata$inboundSchema,
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    const remapped = remap$(v, {
      "HttpMeta": "httpMeta",
    });

    return new ErrorUnauthorized(remapped, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ErrorUnauthorized$Outbound = {
  errors: Array<models.ErrorUnauthorizedError$Outbound>;
  HttpMeta: models.HTTPMetadata$Outbound;
};

/** @internal */
export const ErrorUnauthorized$outboundSchema: z.ZodType<
  ErrorUnauthorized$Outbound,
  z.ZodTypeDef,
  ErrorUnauthorized
> = z.instanceof(ErrorUnauthorized)
  .transform(v => v.data$)
  .pipe(
    z.object({
      errors: z.array(models.ErrorUnauthorizedError$outboundSchema),
      httpMeta: models.HTTPMetadata$outboundSchema,
    }).transform((v) => {
      return remap$(v, {
        httpMeta: "HttpMeta",
      });
    }),
  );

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorUnauthorized$ {
  /** @deprecated use `ErrorUnauthorized$inboundSchema` instead. */
  export const inboundSchema = ErrorUnauthorized$inboundSchema;
  /** @deprecated use `ErrorUnauthorized$outboundSchema` instead. */
  export const outboundSchema = ErrorUnauthorized$outboundSchema;
  /** @deprecated use `ErrorUnauthorized$Outbound` instead. */
  export type Outbound = ErrorUnauthorized$Outbound;
}
