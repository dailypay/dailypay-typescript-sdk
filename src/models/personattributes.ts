/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The statuses and required actions are:
 *
 * @remarks
 * - `null` The person has not been disallowed, and is free to use DailyPay.
 * - `INACTIVE` The person has not completed registration or account verification.
 * - `DELINQUENT` The person has an outstanding, unrecoverable balance with DailyPay, and should contact support.
 * - `BANNED` Access has been revoked.
 */
export const DisallowReason = {
  Inactive: "INACTIVE",
  Delinquent: "DELINQUENT",
  Banned: "BANNED",
} as const;
/**
 * The statuses and required actions are:
 *
 * @remarks
 * - `null` The person has not been disallowed, and is free to use DailyPay.
 * - `INACTIVE` The person has not completed registration or account verification.
 * - `DELINQUENT` The person has an outstanding, unrecoverable balance with DailyPay, and should contact support.
 * - `BANNED` Access has been revoked.
 */
export type DisallowReason = ClosedEnum<typeof DisallowReason>;

/**
 * The DailyPay Visa®️ Prepaid Card program.
 *
 * @remarks
 */
export type DailyPayCardProductEntitlement = {
  /**
   * Whether the person is eligible to enroll in the DailyPay Visa®️ Prepaid Card program.
   *
   * @remarks
   */
  eligible: boolean;
  /**
   * Whether the person is enrolled in the DailyPay Visa®️ Prepaid Card program.
   *
   * @remarks
   */
  enrolled: boolean;
};

/**
 * Products that the person is enrolled in or eligible for.
 *
 * @remarks
 */
export type Products = {
  /**
   * The DailyPay Visa®️ Prepaid Card program.
   *
   * @remarks
   */
  dailyPayCardProductEntitlement: DailyPayCardProductEntitlement;
};

/**
 * A person is a record of someone known to DailyPay. There will only ever be one person record per human being.
 */
export type PersonAttributes = {
  /**
   * The statuses and required actions are:
   *
   * @remarks
   * - `null` The person has not been disallowed, and is free to use DailyPay.
   * - `INACTIVE` The person has not completed registration or account verification.
   * - `DELINQUENT` The person has an outstanding, unrecoverable balance with DailyPay, and should contact support.
   * - `BANNED` Access has been revoked.
   */
  disallowReason: DisallowReason | null;
  /**
   * The two-letter abbreviation for the state in which the person resides, if located in the United States.  This is used for regulatory compliance purposes.
   *
   * @remarks
   */
  stateOfResidence?: string | undefined;
  /**
   * Products that the person is enrolled in or eligible for.
   *
   * @remarks
   */
  products: Products;
};

/** @internal */
export const DisallowReason$inboundSchema: z.ZodNativeEnum<
  typeof DisallowReason
> = z.nativeEnum(DisallowReason);

/** @internal */
export const DisallowReason$outboundSchema: z.ZodNativeEnum<
  typeof DisallowReason
> = DisallowReason$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DisallowReason$ {
  /** @deprecated use `DisallowReason$inboundSchema` instead. */
  export const inboundSchema = DisallowReason$inboundSchema;
  /** @deprecated use `DisallowReason$outboundSchema` instead. */
  export const outboundSchema = DisallowReason$outboundSchema;
}

/** @internal */
export const DailyPayCardProductEntitlement$inboundSchema: z.ZodType<
  DailyPayCardProductEntitlement,
  z.ZodTypeDef,
  unknown
> = z.object({
  eligible: z.boolean(),
  enrolled: z.boolean(),
});

/** @internal */
export type DailyPayCardProductEntitlement$Outbound = {
  eligible: boolean;
  enrolled: boolean;
};

/** @internal */
export const DailyPayCardProductEntitlement$outboundSchema: z.ZodType<
  DailyPayCardProductEntitlement$Outbound,
  z.ZodTypeDef,
  DailyPayCardProductEntitlement
> = z.object({
  eligible: z.boolean(),
  enrolled: z.boolean(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DailyPayCardProductEntitlement$ {
  /** @deprecated use `DailyPayCardProductEntitlement$inboundSchema` instead. */
  export const inboundSchema = DailyPayCardProductEntitlement$inboundSchema;
  /** @deprecated use `DailyPayCardProductEntitlement$outboundSchema` instead. */
  export const outboundSchema = DailyPayCardProductEntitlement$outboundSchema;
  /** @deprecated use `DailyPayCardProductEntitlement$Outbound` instead. */
  export type Outbound = DailyPayCardProductEntitlement$Outbound;
}

export function dailyPayCardProductEntitlementToJSON(
  dailyPayCardProductEntitlement: DailyPayCardProductEntitlement,
): string {
  return JSON.stringify(
    DailyPayCardProductEntitlement$outboundSchema.parse(
      dailyPayCardProductEntitlement,
    ),
  );
}

export function dailyPayCardProductEntitlementFromJSON(
  jsonString: string,
): SafeParseResult<DailyPayCardProductEntitlement, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DailyPayCardProductEntitlement$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DailyPayCardProductEntitlement' from JSON`,
  );
}

/** @internal */
export const Products$inboundSchema: z.ZodType<
  Products,
  z.ZodTypeDef,
  unknown
> = z.object({
  dailypay_card: z.lazy(() => DailyPayCardProductEntitlement$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "dailypay_card": "dailyPayCardProductEntitlement",
  });
});

/** @internal */
export type Products$Outbound = {
  dailypay_card: DailyPayCardProductEntitlement$Outbound;
};

/** @internal */
export const Products$outboundSchema: z.ZodType<
  Products$Outbound,
  z.ZodTypeDef,
  Products
> = z.object({
  dailyPayCardProductEntitlement: z.lazy(() =>
    DailyPayCardProductEntitlement$outboundSchema
  ),
}).transform((v) => {
  return remap$(v, {
    dailyPayCardProductEntitlement: "dailypay_card",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Products$ {
  /** @deprecated use `Products$inboundSchema` instead. */
  export const inboundSchema = Products$inboundSchema;
  /** @deprecated use `Products$outboundSchema` instead. */
  export const outboundSchema = Products$outboundSchema;
  /** @deprecated use `Products$Outbound` instead. */
  export type Outbound = Products$Outbound;
}

export function productsToJSON(products: Products): string {
  return JSON.stringify(Products$outboundSchema.parse(products));
}

export function productsFromJSON(
  jsonString: string,
): SafeParseResult<Products, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Products$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Products' from JSON`,
  );
}

/** @internal */
export const PersonAttributes$inboundSchema: z.ZodType<
  PersonAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  disallow_reason: z.nullable(DisallowReason$inboundSchema),
  state_of_residence: z.string().optional(),
  products: z.lazy(() => Products$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "disallow_reason": "disallowReason",
    "state_of_residence": "stateOfResidence",
  });
});

/** @internal */
export type PersonAttributes$Outbound = {
  disallow_reason: string | null;
  state_of_residence?: string | undefined;
  products: Products$Outbound;
};

/** @internal */
export const PersonAttributes$outboundSchema: z.ZodType<
  PersonAttributes$Outbound,
  z.ZodTypeDef,
  PersonAttributes
> = z.object({
  disallowReason: z.nullable(DisallowReason$outboundSchema),
  stateOfResidence: z.string().optional(),
  products: z.lazy(() => Products$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    disallowReason: "disallow_reason",
    stateOfResidence: "state_of_residence",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PersonAttributes$ {
  /** @deprecated use `PersonAttributes$inboundSchema` instead. */
  export const inboundSchema = PersonAttributes$inboundSchema;
  /** @deprecated use `PersonAttributes$outboundSchema` instead. */
  export const outboundSchema = PersonAttributes$outboundSchema;
  /** @deprecated use `PersonAttributes$Outbound` instead. */
  export type Outbound = PersonAttributes$Outbound;
}

export function personAttributesToJSON(
  personAttributes: PersonAttributes,
): string {
  return JSON.stringify(
    PersonAttributes$outboundSchema.parse(personAttributes),
  );
}

export function personAttributesFromJSON(
  jsonString: string,
): SafeParseResult<PersonAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PersonAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PersonAttributes' from JSON`,
  );
}
