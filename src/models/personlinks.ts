/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type PersonLinks = {
  /**
   * The URI for the user
   */
  self: string;
};

/** @internal */
export const PersonLinks$inboundSchema: z.ZodType<
  PersonLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  self: z.string(),
});

/** @internal */
export type PersonLinks$Outbound = {
  self: string;
};

/** @internal */
export const PersonLinks$outboundSchema: z.ZodType<
  PersonLinks$Outbound,
  z.ZodTypeDef,
  PersonLinks
> = z.object({
  self: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PersonLinks$ {
  /** @deprecated use `PersonLinks$inboundSchema` instead. */
  export const inboundSchema = PersonLinks$inboundSchema;
  /** @deprecated use `PersonLinks$outboundSchema` instead. */
  export const outboundSchema = PersonLinks$outboundSchema;
  /** @deprecated use `PersonLinks$Outbound` instead. */
  export type Outbound = PersonLinks$Outbound;
}

export function personLinksToJSON(personLinks: PersonLinks): string {
  return JSON.stringify(PersonLinks$outboundSchema.parse(personLinks));
}

export function personLinksFromJSON(
  jsonString: string,
): SafeParseResult<PersonLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PersonLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PersonLinks' from JSON`,
  );
}
