/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ReadJobGlobals = {
  /**
   * The version of the DailyPay API to use for this request. If not provided, the latest version of the API will be used.
   *
   * @remarks
   */
  version?: number | undefined;
};

export type ReadJobRequest = {
  /**
   * Unique ID of the job
   */
  jobId: string;
};

export type ReadJobResponse = {
  httpMeta: models.HTTPMetadata;
  /**
   * Returns the job object.
   */
  jobData?: models.JobData | undefined;
};

/** @internal */
export const ReadJobGlobals$inboundSchema: z.ZodType<
  ReadJobGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().int().default(3),
});

/** @internal */
export type ReadJobGlobals$Outbound = {
  version: number;
};

/** @internal */
export const ReadJobGlobals$outboundSchema: z.ZodType<
  ReadJobGlobals$Outbound,
  z.ZodTypeDef,
  ReadJobGlobals
> = z.object({
  version: z.number().int().default(3),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadJobGlobals$ {
  /** @deprecated use `ReadJobGlobals$inboundSchema` instead. */
  export const inboundSchema = ReadJobGlobals$inboundSchema;
  /** @deprecated use `ReadJobGlobals$outboundSchema` instead. */
  export const outboundSchema = ReadJobGlobals$outboundSchema;
  /** @deprecated use `ReadJobGlobals$Outbound` instead. */
  export type Outbound = ReadJobGlobals$Outbound;
}

export function readJobGlobalsToJSON(readJobGlobals: ReadJobGlobals): string {
  return JSON.stringify(ReadJobGlobals$outboundSchema.parse(readJobGlobals));
}

export function readJobGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ReadJobGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadJobGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadJobGlobals' from JSON`,
  );
}

/** @internal */
export const ReadJobRequest$inboundSchema: z.ZodType<
  ReadJobRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  job_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "job_id": "jobId",
  });
});

/** @internal */
export type ReadJobRequest$Outbound = {
  job_id: string;
};

/** @internal */
export const ReadJobRequest$outboundSchema: z.ZodType<
  ReadJobRequest$Outbound,
  z.ZodTypeDef,
  ReadJobRequest
> = z.object({
  jobId: z.string(),
}).transform((v) => {
  return remap$(v, {
    jobId: "job_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadJobRequest$ {
  /** @deprecated use `ReadJobRequest$inboundSchema` instead. */
  export const inboundSchema = ReadJobRequest$inboundSchema;
  /** @deprecated use `ReadJobRequest$outboundSchema` instead. */
  export const outboundSchema = ReadJobRequest$outboundSchema;
  /** @deprecated use `ReadJobRequest$Outbound` instead. */
  export type Outbound = ReadJobRequest$Outbound;
}

export function readJobRequestToJSON(readJobRequest: ReadJobRequest): string {
  return JSON.stringify(ReadJobRequest$outboundSchema.parse(readJobRequest));
}

export function readJobRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReadJobRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadJobRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadJobRequest' from JSON`,
  );
}

/** @internal */
export const ReadJobResponse$inboundSchema: z.ZodType<
  ReadJobResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: models.HTTPMetadata$inboundSchema,
  JobData: models.JobData$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "JobData": "jobData",
  });
});

/** @internal */
export type ReadJobResponse$Outbound = {
  HttpMeta: models.HTTPMetadata$Outbound;
  JobData?: models.JobData$Outbound | undefined;
};

/** @internal */
export const ReadJobResponse$outboundSchema: z.ZodType<
  ReadJobResponse$Outbound,
  z.ZodTypeDef,
  ReadJobResponse
> = z.object({
  httpMeta: models.HTTPMetadata$outboundSchema,
  jobData: models.JobData$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    jobData: "JobData",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadJobResponse$ {
  /** @deprecated use `ReadJobResponse$inboundSchema` instead. */
  export const inboundSchema = ReadJobResponse$inboundSchema;
  /** @deprecated use `ReadJobResponse$outboundSchema` instead. */
  export const outboundSchema = ReadJobResponse$outboundSchema;
  /** @deprecated use `ReadJobResponse$Outbound` instead. */
  export type Outbound = ReadJobResponse$Outbound;
}

export function readJobResponseToJSON(
  readJobResponse: ReadJobResponse,
): string {
  return JSON.stringify(ReadJobResponse$outboundSchema.parse(readJobResponse));
}

export function readJobResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReadJobResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadJobResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadJobResponse' from JSON`,
  );
}
