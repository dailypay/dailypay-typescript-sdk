/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type GetHealthResponse = {
  httpMeta: models.HTTPMetadata;
  /**
   * Returns a healthcheck document
   */
  health200?: models.Health200 | undefined;
};

/** @internal */
export const GetHealthResponse$inboundSchema: z.ZodType<
  GetHealthResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: models.HTTPMetadata$inboundSchema,
  Health200: models.Health200$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "Health200": "health200",
  });
});

/** @internal */
export type GetHealthResponse$Outbound = {
  HttpMeta: models.HTTPMetadata$Outbound;
  Health200?: models.Health200$Outbound | undefined;
};

/** @internal */
export const GetHealthResponse$outboundSchema: z.ZodType<
  GetHealthResponse$Outbound,
  z.ZodTypeDef,
  GetHealthResponse
> = z.object({
  httpMeta: models.HTTPMetadata$outboundSchema,
  health200: models.Health200$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    health200: "Health200",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetHealthResponse$ {
  /** @deprecated use `GetHealthResponse$inboundSchema` instead. */
  export const inboundSchema = GetHealthResponse$inboundSchema;
  /** @deprecated use `GetHealthResponse$outboundSchema` instead. */
  export const outboundSchema = GetHealthResponse$outboundSchema;
  /** @deprecated use `GetHealthResponse$Outbound` instead. */
  export type Outbound = GetHealthResponse$Outbound;
}

export function getHealthResponseToJSON(
  getHealthResponse: GetHealthResponse,
): string {
  return JSON.stringify(
    GetHealthResponse$outboundSchema.parse(getHealthResponse),
  );
}

export function getHealthResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetHealthResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetHealthResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetHealthResponse' from JSON`,
  );
}
