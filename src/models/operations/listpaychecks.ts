/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListPaychecksGlobals = {
  /**
   * The version of the DailyPay API to use for this request. If not provided, the latest version of the API will be used.
   *
   * @remarks
   */
  version?: number | undefined;
};

export type ListPaychecksRequest = {
  /**
   * Limit the results to documents related to a specific job
   */
  filterJobId?: string | undefined;
  /**
   * Limit the results to paychecks with the specified status
   */
  filterStatus?: models.FilterPaycheckStatus | undefined;
  /**
   * Limit the results to paychecks with deposit_expected_at greater than or equal to the specified date
   */
  filterDepositExpectedAtGte?: Date | undefined;
  /**
   * Limit the results to paychecks with deposit_expected_at less than the specified date
   */
  filterDepositExpectedAtLt?: Date | undefined;
  /**
   * Limit the results to paychecks with pay_period_ends_at greater than or equal to the specified date
   */
  filterPayPeriodEndsAtGte?: Date | undefined;
  /**
   * Limit the results to paychecks with pay_period_ends_at less than the specified date
   */
  filterPayPeriodEndsAtLt?: Date | undefined;
  /**
   * Limit the results to paychecks with pay_period_starts_at greater than or equal to the specified date
   */
  filterPayPeriodStartsAtGte?: Date | undefined;
  /**
   * Limit the results to paychecks with pay_period_starts_at less than the specified date
   */
  filterPayPeriodStartsAtLt?: Date | undefined;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  filterBy?: string | undefined;
};

export type ListPaychecksResponse = {
  httpMeta: models.HTTPMetadata;
  /**
   * Returns the paycheck object.
   */
  paychecksData?: models.PaychecksData | undefined;
};

/** @internal */
export const ListPaychecksGlobals$inboundSchema: z.ZodType<
  ListPaychecksGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().int().default(3),
});

/** @internal */
export type ListPaychecksGlobals$Outbound = {
  version: number;
};

/** @internal */
export const ListPaychecksGlobals$outboundSchema: z.ZodType<
  ListPaychecksGlobals$Outbound,
  z.ZodTypeDef,
  ListPaychecksGlobals
> = z.object({
  version: z.number().int().default(3),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaychecksGlobals$ {
  /** @deprecated use `ListPaychecksGlobals$inboundSchema` instead. */
  export const inboundSchema = ListPaychecksGlobals$inboundSchema;
  /** @deprecated use `ListPaychecksGlobals$outboundSchema` instead. */
  export const outboundSchema = ListPaychecksGlobals$outboundSchema;
  /** @deprecated use `ListPaychecksGlobals$Outbound` instead. */
  export type Outbound = ListPaychecksGlobals$Outbound;
}

export function listPaychecksGlobalsToJSON(
  listPaychecksGlobals: ListPaychecksGlobals,
): string {
  return JSON.stringify(
    ListPaychecksGlobals$outboundSchema.parse(listPaychecksGlobals),
  );
}

export function listPaychecksGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListPaychecksGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaychecksGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaychecksGlobals' from JSON`,
  );
}

/** @internal */
export const ListPaychecksRequest$inboundSchema: z.ZodType<
  ListPaychecksRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "filter[job.id]": z.string().optional(),
  "filter[status]": models.FilterPaycheckStatus$inboundSchema.optional(),
  "filter[deposit_expected_at__gte]": z.string().datetime({ offset: true })
    .transform(v => new Date(v)).optional(),
  "filter[deposit_expected_at__lt]": z.string().datetime({ offset: true })
    .transform(v => new Date(v)).optional(),
  "filter[pay_period_ends_at__gte]": z.string().datetime({ offset: true })
    .transform(v => new Date(v)).optional(),
  "filter[pay_period_ends_at__lt]": z.string().datetime({ offset: true })
    .transform(v => new Date(v)).optional(),
  "filter[pay_period_starts_at__gte]": z.string().datetime({ offset: true })
    .transform(v => new Date(v)).optional(),
  "filter[pay_period_starts_at__lt]": z.string().datetime({ offset: true })
    .transform(v => new Date(v)).optional(),
  "filter-by": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "filter[job.id]": "filterJobId",
    "filter[status]": "filterStatus",
    "filter[deposit_expected_at__gte]": "filterDepositExpectedAtGte",
    "filter[deposit_expected_at__lt]": "filterDepositExpectedAtLt",
    "filter[pay_period_ends_at__gte]": "filterPayPeriodEndsAtGte",
    "filter[pay_period_ends_at__lt]": "filterPayPeriodEndsAtLt",
    "filter[pay_period_starts_at__gte]": "filterPayPeriodStartsAtGte",
    "filter[pay_period_starts_at__lt]": "filterPayPeriodStartsAtLt",
    "filter-by": "filterBy",
  });
});

/** @internal */
export type ListPaychecksRequest$Outbound = {
  "filter[job.id]"?: string | undefined;
  "filter[status]"?: string | undefined;
  "filter[deposit_expected_at__gte]"?: string | undefined;
  "filter[deposit_expected_at__lt]"?: string | undefined;
  "filter[pay_period_ends_at__gte]"?: string | undefined;
  "filter[pay_period_ends_at__lt]"?: string | undefined;
  "filter[pay_period_starts_at__gte]"?: string | undefined;
  "filter[pay_period_starts_at__lt]"?: string | undefined;
  "filter-by"?: string | undefined;
};

/** @internal */
export const ListPaychecksRequest$outboundSchema: z.ZodType<
  ListPaychecksRequest$Outbound,
  z.ZodTypeDef,
  ListPaychecksRequest
> = z.object({
  filterJobId: z.string().optional(),
  filterStatus: models.FilterPaycheckStatus$outboundSchema.optional(),
  filterDepositExpectedAtGte: z.date().transform(v => v.toISOString())
    .optional(),
  filterDepositExpectedAtLt: z.date().transform(v => v.toISOString())
    .optional(),
  filterPayPeriodEndsAtGte: z.date().transform(v => v.toISOString()).optional(),
  filterPayPeriodEndsAtLt: z.date().transform(v => v.toISOString()).optional(),
  filterPayPeriodStartsAtGte: z.date().transform(v => v.toISOString())
    .optional(),
  filterPayPeriodStartsAtLt: z.date().transform(v => v.toISOString())
    .optional(),
  filterBy: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    filterJobId: "filter[job.id]",
    filterStatus: "filter[status]",
    filterDepositExpectedAtGte: "filter[deposit_expected_at__gte]",
    filterDepositExpectedAtLt: "filter[deposit_expected_at__lt]",
    filterPayPeriodEndsAtGte: "filter[pay_period_ends_at__gte]",
    filterPayPeriodEndsAtLt: "filter[pay_period_ends_at__lt]",
    filterPayPeriodStartsAtGte: "filter[pay_period_starts_at__gte]",
    filterPayPeriodStartsAtLt: "filter[pay_period_starts_at__lt]",
    filterBy: "filter-by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaychecksRequest$ {
  /** @deprecated use `ListPaychecksRequest$inboundSchema` instead. */
  export const inboundSchema = ListPaychecksRequest$inboundSchema;
  /** @deprecated use `ListPaychecksRequest$outboundSchema` instead. */
  export const outboundSchema = ListPaychecksRequest$outboundSchema;
  /** @deprecated use `ListPaychecksRequest$Outbound` instead. */
  export type Outbound = ListPaychecksRequest$Outbound;
}

export function listPaychecksRequestToJSON(
  listPaychecksRequest: ListPaychecksRequest,
): string {
  return JSON.stringify(
    ListPaychecksRequest$outboundSchema.parse(listPaychecksRequest),
  );
}

export function listPaychecksRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListPaychecksRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaychecksRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaychecksRequest' from JSON`,
  );
}

/** @internal */
export const ListPaychecksResponse$inboundSchema: z.ZodType<
  ListPaychecksResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: models.HTTPMetadata$inboundSchema,
  PaychecksData: models.PaychecksData$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "PaychecksData": "paychecksData",
  });
});

/** @internal */
export type ListPaychecksResponse$Outbound = {
  HttpMeta: models.HTTPMetadata$Outbound;
  PaychecksData?: models.PaychecksData$Outbound | undefined;
};

/** @internal */
export const ListPaychecksResponse$outboundSchema: z.ZodType<
  ListPaychecksResponse$Outbound,
  z.ZodTypeDef,
  ListPaychecksResponse
> = z.object({
  httpMeta: models.HTTPMetadata$outboundSchema,
  paychecksData: models.PaychecksData$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    paychecksData: "PaychecksData",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListPaychecksResponse$ {
  /** @deprecated use `ListPaychecksResponse$inboundSchema` instead. */
  export const inboundSchema = ListPaychecksResponse$inboundSchema;
  /** @deprecated use `ListPaychecksResponse$outboundSchema` instead. */
  export const outboundSchema = ListPaychecksResponse$outboundSchema;
  /** @deprecated use `ListPaychecksResponse$Outbound` instead. */
  export type Outbound = ListPaychecksResponse$Outbound;
}

export function listPaychecksResponseToJSON(
  listPaychecksResponse: ListPaychecksResponse,
): string {
  return JSON.stringify(
    ListPaychecksResponse$outboundSchema.parse(listPaychecksResponse),
  );
}

export function listPaychecksResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListPaychecksResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListPaychecksResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListPaychecksResponse' from JSON`,
  );
}
