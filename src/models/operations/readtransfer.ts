/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ReadTransferGlobals = {
  /**
   * The version of the DailyPay API to use for this request. If not provided, the latest version of the API will be used.
   *
   * @remarks
   */
  version?: number | undefined;
};

export type ReadTransferRequest = {
  /**
   * Add related resources to the response.
   *
   * @remarks
   *
   * The value of the include parameter must be a comma-separated (U+002C COMMA, “,”) list of relationship paths.
   */
  include?: string | undefined;
  /**
   * Unique ID of the transfer
   */
  transferId: string;
};

export type ReadTransferResponse = {
  httpMeta: models.HTTPMetadata;
  /**
   * Returns the newly created transfer object.
   */
  transferData?: models.TransferData | undefined;
};

/** @internal */
export const ReadTransferGlobals$inboundSchema: z.ZodType<
  ReadTransferGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().int().default(3),
});

/** @internal */
export type ReadTransferGlobals$Outbound = {
  version: number;
};

/** @internal */
export const ReadTransferGlobals$outboundSchema: z.ZodType<
  ReadTransferGlobals$Outbound,
  z.ZodTypeDef,
  ReadTransferGlobals
> = z.object({
  version: z.number().int().default(3),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadTransferGlobals$ {
  /** @deprecated use `ReadTransferGlobals$inboundSchema` instead. */
  export const inboundSchema = ReadTransferGlobals$inboundSchema;
  /** @deprecated use `ReadTransferGlobals$outboundSchema` instead. */
  export const outboundSchema = ReadTransferGlobals$outboundSchema;
  /** @deprecated use `ReadTransferGlobals$Outbound` instead. */
  export type Outbound = ReadTransferGlobals$Outbound;
}

export function readTransferGlobalsToJSON(
  readTransferGlobals: ReadTransferGlobals,
): string {
  return JSON.stringify(
    ReadTransferGlobals$outboundSchema.parse(readTransferGlobals),
  );
}

export function readTransferGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ReadTransferGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadTransferGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadTransferGlobals' from JSON`,
  );
}

/** @internal */
export const ReadTransferRequest$inboundSchema: z.ZodType<
  ReadTransferRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  include: z.string().optional(),
  transfer_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "transfer_id": "transferId",
  });
});

/** @internal */
export type ReadTransferRequest$Outbound = {
  include?: string | undefined;
  transfer_id: string;
};

/** @internal */
export const ReadTransferRequest$outboundSchema: z.ZodType<
  ReadTransferRequest$Outbound,
  z.ZodTypeDef,
  ReadTransferRequest
> = z.object({
  include: z.string().optional(),
  transferId: z.string(),
}).transform((v) => {
  return remap$(v, {
    transferId: "transfer_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadTransferRequest$ {
  /** @deprecated use `ReadTransferRequest$inboundSchema` instead. */
  export const inboundSchema = ReadTransferRequest$inboundSchema;
  /** @deprecated use `ReadTransferRequest$outboundSchema` instead. */
  export const outboundSchema = ReadTransferRequest$outboundSchema;
  /** @deprecated use `ReadTransferRequest$Outbound` instead. */
  export type Outbound = ReadTransferRequest$Outbound;
}

export function readTransferRequestToJSON(
  readTransferRequest: ReadTransferRequest,
): string {
  return JSON.stringify(
    ReadTransferRequest$outboundSchema.parse(readTransferRequest),
  );
}

export function readTransferRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReadTransferRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadTransferRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadTransferRequest' from JSON`,
  );
}

/** @internal */
export const ReadTransferResponse$inboundSchema: z.ZodType<
  ReadTransferResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: models.HTTPMetadata$inboundSchema,
  TransferData: models.TransferData$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "TransferData": "transferData",
  });
});

/** @internal */
export type ReadTransferResponse$Outbound = {
  HttpMeta: models.HTTPMetadata$Outbound;
  TransferData?: models.TransferData$Outbound | undefined;
};

/** @internal */
export const ReadTransferResponse$outboundSchema: z.ZodType<
  ReadTransferResponse$Outbound,
  z.ZodTypeDef,
  ReadTransferResponse
> = z.object({
  httpMeta: models.HTTPMetadata$outboundSchema,
  transferData: models.TransferData$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    transferData: "TransferData",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadTransferResponse$ {
  /** @deprecated use `ReadTransferResponse$inboundSchema` instead. */
  export const inboundSchema = ReadTransferResponse$inboundSchema;
  /** @deprecated use `ReadTransferResponse$outboundSchema` instead. */
  export const outboundSchema = ReadTransferResponse$outboundSchema;
  /** @deprecated use `ReadTransferResponse$Outbound` instead. */
  export type Outbound = ReadTransferResponse$Outbound;
}

export function readTransferResponseToJSON(
  readTransferResponse: ReadTransferResponse,
): string {
  return JSON.stringify(
    ReadTransferResponse$outboundSchema.parse(readTransferResponse),
  );
}

export function readTransferResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReadTransferResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadTransferResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadTransferResponse' from JSON`,
  );
}
