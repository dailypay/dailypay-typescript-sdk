/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ReadAccountGlobals = {
  /**
   * The version of the DailyPay API to use for this request. If not provided, the latest version of the API will be used.
   *
   * @remarks
   */
  version?: number | undefined;
};

export type ReadAccountRequest = {
  /**
   * Unique UUID of the Account.
   */
  accountId: string;
};

export type ReadAccountResponse = {
  httpMeta: models.HTTPMetadata;
  /**
   * Returns the account object.
   */
  accountData?: models.AccountDataOutput | undefined;
};

/** @internal */
export const ReadAccountGlobals$inboundSchema: z.ZodType<
  ReadAccountGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().int().default(3),
});

/** @internal */
export type ReadAccountGlobals$Outbound = {
  version: number;
};

/** @internal */
export const ReadAccountGlobals$outboundSchema: z.ZodType<
  ReadAccountGlobals$Outbound,
  z.ZodTypeDef,
  ReadAccountGlobals
> = z.object({
  version: z.number().int().default(3),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadAccountGlobals$ {
  /** @deprecated use `ReadAccountGlobals$inboundSchema` instead. */
  export const inboundSchema = ReadAccountGlobals$inboundSchema;
  /** @deprecated use `ReadAccountGlobals$outboundSchema` instead. */
  export const outboundSchema = ReadAccountGlobals$outboundSchema;
  /** @deprecated use `ReadAccountGlobals$Outbound` instead. */
  export type Outbound = ReadAccountGlobals$Outbound;
}

export function readAccountGlobalsToJSON(
  readAccountGlobals: ReadAccountGlobals,
): string {
  return JSON.stringify(
    ReadAccountGlobals$outboundSchema.parse(readAccountGlobals),
  );
}

export function readAccountGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ReadAccountGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadAccountGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadAccountGlobals' from JSON`,
  );
}

/** @internal */
export const ReadAccountRequest$inboundSchema: z.ZodType<
  ReadAccountRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  account_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "account_id": "accountId",
  });
});

/** @internal */
export type ReadAccountRequest$Outbound = {
  account_id: string;
};

/** @internal */
export const ReadAccountRequest$outboundSchema: z.ZodType<
  ReadAccountRequest$Outbound,
  z.ZodTypeDef,
  ReadAccountRequest
> = z.object({
  accountId: z.string(),
}).transform((v) => {
  return remap$(v, {
    accountId: "account_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadAccountRequest$ {
  /** @deprecated use `ReadAccountRequest$inboundSchema` instead. */
  export const inboundSchema = ReadAccountRequest$inboundSchema;
  /** @deprecated use `ReadAccountRequest$outboundSchema` instead. */
  export const outboundSchema = ReadAccountRequest$outboundSchema;
  /** @deprecated use `ReadAccountRequest$Outbound` instead. */
  export type Outbound = ReadAccountRequest$Outbound;
}

export function readAccountRequestToJSON(
  readAccountRequest: ReadAccountRequest,
): string {
  return JSON.stringify(
    ReadAccountRequest$outboundSchema.parse(readAccountRequest),
  );
}

export function readAccountRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReadAccountRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadAccountRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadAccountRequest' from JSON`,
  );
}

/** @internal */
export const ReadAccountResponse$inboundSchema: z.ZodType<
  ReadAccountResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: models.HTTPMetadata$inboundSchema,
  AccountData: models.AccountDataOutput$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "AccountData": "accountData",
  });
});

/** @internal */
export type ReadAccountResponse$Outbound = {
  HttpMeta: models.HTTPMetadata$Outbound;
  AccountData?: models.AccountDataOutput$Outbound | undefined;
};

/** @internal */
export const ReadAccountResponse$outboundSchema: z.ZodType<
  ReadAccountResponse$Outbound,
  z.ZodTypeDef,
  ReadAccountResponse
> = z.object({
  httpMeta: models.HTTPMetadata$outboundSchema,
  accountData: models.AccountDataOutput$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    accountData: "AccountData",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadAccountResponse$ {
  /** @deprecated use `ReadAccountResponse$inboundSchema` instead. */
  export const inboundSchema = ReadAccountResponse$inboundSchema;
  /** @deprecated use `ReadAccountResponse$outboundSchema` instead. */
  export const outboundSchema = ReadAccountResponse$outboundSchema;
  /** @deprecated use `ReadAccountResponse$Outbound` instead. */
  export type Outbound = ReadAccountResponse$Outbound;
}

export function readAccountResponseToJSON(
  readAccountResponse: ReadAccountResponse,
): string {
  return JSON.stringify(
    ReadAccountResponse$outboundSchema.parse(readAccountResponse),
  );
}

export function readAccountResponseFromJSON(
  jsonString: string,
): SafeParseResult<ReadAccountResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadAccountResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadAccountResponse' from JSON`,
  );
}
