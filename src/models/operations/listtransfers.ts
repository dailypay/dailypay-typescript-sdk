/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListTransfersGlobals = {
  /**
   * The version of the DailyPay API to use for this request. If not provided, the latest version of the API will be used.
   *
   * @remarks
   */
  version?: number | undefined;
};

export type ListTransfersRequest = {
  /**
   * Limit the results to documents related to a specific person
   */
  filterPersonId?: string | undefined;
  /**
   * Add related resources to the response.
   *
   * @remarks
   *
   * The value of the include parameter must be a comma-separated (U+002C COMMA, “,”) list of relationship paths.
   */
  include?: string | undefined;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  filterBy?: string | undefined;
};

export type ListTransfersResponse = {
  httpMeta: models.HTTPMetadata;
  /**
   * A list of transfer objects.
   */
  transfersData?: models.TransfersData | undefined;
};

/** @internal */
export const ListTransfersGlobals$inboundSchema: z.ZodType<
  ListTransfersGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().int().default(3),
});

/** @internal */
export type ListTransfersGlobals$Outbound = {
  version: number;
};

/** @internal */
export const ListTransfersGlobals$outboundSchema: z.ZodType<
  ListTransfersGlobals$Outbound,
  z.ZodTypeDef,
  ListTransfersGlobals
> = z.object({
  version: z.number().int().default(3),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransfersGlobals$ {
  /** @deprecated use `ListTransfersGlobals$inboundSchema` instead. */
  export const inboundSchema = ListTransfersGlobals$inboundSchema;
  /** @deprecated use `ListTransfersGlobals$outboundSchema` instead. */
  export const outboundSchema = ListTransfersGlobals$outboundSchema;
  /** @deprecated use `ListTransfersGlobals$Outbound` instead. */
  export type Outbound = ListTransfersGlobals$Outbound;
}

export function listTransfersGlobalsToJSON(
  listTransfersGlobals: ListTransfersGlobals,
): string {
  return JSON.stringify(
    ListTransfersGlobals$outboundSchema.parse(listTransfersGlobals),
  );
}

export function listTransfersGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListTransfersGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTransfersGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTransfersGlobals' from JSON`,
  );
}

/** @internal */
export const ListTransfersRequest$inboundSchema: z.ZodType<
  ListTransfersRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "filter[person.id]": z.string().optional(),
  include: z.string().optional(),
  "filter-by": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "filter[person.id]": "filterPersonId",
    "filter-by": "filterBy",
  });
});

/** @internal */
export type ListTransfersRequest$Outbound = {
  "filter[person.id]"?: string | undefined;
  include?: string | undefined;
  "filter-by"?: string | undefined;
};

/** @internal */
export const ListTransfersRequest$outboundSchema: z.ZodType<
  ListTransfersRequest$Outbound,
  z.ZodTypeDef,
  ListTransfersRequest
> = z.object({
  filterPersonId: z.string().optional(),
  include: z.string().optional(),
  filterBy: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    filterPersonId: "filter[person.id]",
    filterBy: "filter-by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransfersRequest$ {
  /** @deprecated use `ListTransfersRequest$inboundSchema` instead. */
  export const inboundSchema = ListTransfersRequest$inboundSchema;
  /** @deprecated use `ListTransfersRequest$outboundSchema` instead. */
  export const outboundSchema = ListTransfersRequest$outboundSchema;
  /** @deprecated use `ListTransfersRequest$Outbound` instead. */
  export type Outbound = ListTransfersRequest$Outbound;
}

export function listTransfersRequestToJSON(
  listTransfersRequest: ListTransfersRequest,
): string {
  return JSON.stringify(
    ListTransfersRequest$outboundSchema.parse(listTransfersRequest),
  );
}

export function listTransfersRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListTransfersRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTransfersRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTransfersRequest' from JSON`,
  );
}

/** @internal */
export const ListTransfersResponse$inboundSchema: z.ZodType<
  ListTransfersResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: models.HTTPMetadata$inboundSchema,
  TransfersData: models.TransfersData$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "TransfersData": "transfersData",
  });
});

/** @internal */
export type ListTransfersResponse$Outbound = {
  HttpMeta: models.HTTPMetadata$Outbound;
  TransfersData?: models.TransfersData$Outbound | undefined;
};

/** @internal */
export const ListTransfersResponse$outboundSchema: z.ZodType<
  ListTransfersResponse$Outbound,
  z.ZodTypeDef,
  ListTransfersResponse
> = z.object({
  httpMeta: models.HTTPMetadata$outboundSchema,
  transfersData: models.TransfersData$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    transfersData: "TransfersData",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListTransfersResponse$ {
  /** @deprecated use `ListTransfersResponse$inboundSchema` instead. */
  export const inboundSchema = ListTransfersResponse$inboundSchema;
  /** @deprecated use `ListTransfersResponse$outboundSchema` instead. */
  export const outboundSchema = ListTransfersResponse$outboundSchema;
  /** @deprecated use `ListTransfersResponse$Outbound` instead. */
  export type Outbound = ListTransfersResponse$Outbound;
}

export function listTransfersResponseToJSON(
  listTransfersResponse: ListTransfersResponse,
): string {
  return JSON.stringify(
    ListTransfersResponse$outboundSchema.parse(listTransfersResponse),
  );
}

export function listTransfersResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListTransfersResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListTransfersResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListTransfersResponse' from JSON`,
  );
}
