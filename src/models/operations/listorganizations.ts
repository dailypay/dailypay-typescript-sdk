/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListOrganizationsGlobals = {
  /**
   * The version of the DailyPay API to use for this request. If not provided, the latest version of the API will be used.
   *
   * @remarks
   */
  version?: number | undefined;
};

export type ListOrganizationsRequest = {
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  filterBy?: string | undefined;
};

/** @internal */
export const ListOrganizationsGlobals$inboundSchema: z.ZodType<
  ListOrganizationsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().int().default(3),
});

/** @internal */
export type ListOrganizationsGlobals$Outbound = {
  version: number;
};

/** @internal */
export const ListOrganizationsGlobals$outboundSchema: z.ZodType<
  ListOrganizationsGlobals$Outbound,
  z.ZodTypeDef,
  ListOrganizationsGlobals
> = z.object({
  version: z.number().int().default(3),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrganizationsGlobals$ {
  /** @deprecated use `ListOrganizationsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListOrganizationsGlobals$inboundSchema;
  /** @deprecated use `ListOrganizationsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListOrganizationsGlobals$outboundSchema;
  /** @deprecated use `ListOrganizationsGlobals$Outbound` instead. */
  export type Outbound = ListOrganizationsGlobals$Outbound;
}

export function listOrganizationsGlobalsToJSON(
  listOrganizationsGlobals: ListOrganizationsGlobals,
): string {
  return JSON.stringify(
    ListOrganizationsGlobals$outboundSchema.parse(listOrganizationsGlobals),
  );
}

export function listOrganizationsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListOrganizationsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrganizationsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrganizationsGlobals' from JSON`,
  );
}

/** @internal */
export const ListOrganizationsRequest$inboundSchema: z.ZodType<
  ListOrganizationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "filter-by": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "filter-by": "filterBy",
  });
});

/** @internal */
export type ListOrganizationsRequest$Outbound = {
  "filter-by"?: string | undefined;
};

/** @internal */
export const ListOrganizationsRequest$outboundSchema: z.ZodType<
  ListOrganizationsRequest$Outbound,
  z.ZodTypeDef,
  ListOrganizationsRequest
> = z.object({
  filterBy: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    filterBy: "filter-by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListOrganizationsRequest$ {
  /** @deprecated use `ListOrganizationsRequest$inboundSchema` instead. */
  export const inboundSchema = ListOrganizationsRequest$inboundSchema;
  /** @deprecated use `ListOrganizationsRequest$outboundSchema` instead. */
  export const outboundSchema = ListOrganizationsRequest$outboundSchema;
  /** @deprecated use `ListOrganizationsRequest$Outbound` instead. */
  export type Outbound = ListOrganizationsRequest$Outbound;
}

export function listOrganizationsRequestToJSON(
  listOrganizationsRequest: ListOrganizationsRequest,
): string {
  return JSON.stringify(
    ListOrganizationsRequest$outboundSchema.parse(listOrganizationsRequest),
  );
}

export function listOrganizationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListOrganizationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListOrganizationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListOrganizationsRequest' from JSON`,
  );
}
