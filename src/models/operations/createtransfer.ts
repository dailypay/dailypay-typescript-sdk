/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type CreateTransferGlobals = {
  /**
   * The version of the DailyPay API to use for this request. If not provided, the latest version of the API will be used.
   *
   * @remarks
   */
  version?: number | undefined;
};

export type CreateTransferRequest = {
  /**
   * An idempotency key is a unique string that you provide to ensure a request is only processed once.
   *
   * @remarks
   * Any number of requests with the same idempotency key and payload will return an identical response.
   */
  idempotencyKey: string;
  /**
   * Add related resources to the response.
   *
   * @remarks
   *
   * The value of the include parameter must be a comma-separated (U+002C COMMA, “,”) list of relationship paths.
   */
  include?: string | undefined;
  transferCreateData: models.TransferCreateData;
};

export type CreateTransferResponse = {
  httpMeta: models.HTTPMetadata;
  /**
   * Returns the newly created transfer object.
   */
  transferData?: models.TransferData | undefined;
};

/** @internal */
export const CreateTransferGlobals$inboundSchema: z.ZodType<
  CreateTransferGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().int().default(3),
});

/** @internal */
export type CreateTransferGlobals$Outbound = {
  version: number;
};

/** @internal */
export const CreateTransferGlobals$outboundSchema: z.ZodType<
  CreateTransferGlobals$Outbound,
  z.ZodTypeDef,
  CreateTransferGlobals
> = z.object({
  version: z.number().int().default(3),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransferGlobals$ {
  /** @deprecated use `CreateTransferGlobals$inboundSchema` instead. */
  export const inboundSchema = CreateTransferGlobals$inboundSchema;
  /** @deprecated use `CreateTransferGlobals$outboundSchema` instead. */
  export const outboundSchema = CreateTransferGlobals$outboundSchema;
  /** @deprecated use `CreateTransferGlobals$Outbound` instead. */
  export type Outbound = CreateTransferGlobals$Outbound;
}

export function createTransferGlobalsToJSON(
  createTransferGlobals: CreateTransferGlobals,
): string {
  return JSON.stringify(
    CreateTransferGlobals$outboundSchema.parse(createTransferGlobals),
  );
}

export function createTransferGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransferGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransferGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransferGlobals' from JSON`,
  );
}

/** @internal */
export const CreateTransferRequest$inboundSchema: z.ZodType<
  CreateTransferRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "Idempotency-Key": z.string(),
  include: z.string().optional(),
  TransferCreateData: models.TransferCreateData$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "Idempotency-Key": "idempotencyKey",
    "TransferCreateData": "transferCreateData",
  });
});

/** @internal */
export type CreateTransferRequest$Outbound = {
  "Idempotency-Key": string;
  include?: string | undefined;
  TransferCreateData: models.TransferCreateData$Outbound;
};

/** @internal */
export const CreateTransferRequest$outboundSchema: z.ZodType<
  CreateTransferRequest$Outbound,
  z.ZodTypeDef,
  CreateTransferRequest
> = z.object({
  idempotencyKey: z.string(),
  include: z.string().optional(),
  transferCreateData: models.TransferCreateData$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    idempotencyKey: "Idempotency-Key",
    transferCreateData: "TransferCreateData",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransferRequest$ {
  /** @deprecated use `CreateTransferRequest$inboundSchema` instead. */
  export const inboundSchema = CreateTransferRequest$inboundSchema;
  /** @deprecated use `CreateTransferRequest$outboundSchema` instead. */
  export const outboundSchema = CreateTransferRequest$outboundSchema;
  /** @deprecated use `CreateTransferRequest$Outbound` instead. */
  export type Outbound = CreateTransferRequest$Outbound;
}

export function createTransferRequestToJSON(
  createTransferRequest: CreateTransferRequest,
): string {
  return JSON.stringify(
    CreateTransferRequest$outboundSchema.parse(createTransferRequest),
  );
}

export function createTransferRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransferRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransferRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransferRequest' from JSON`,
  );
}

/** @internal */
export const CreateTransferResponse$inboundSchema: z.ZodType<
  CreateTransferResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: models.HTTPMetadata$inboundSchema,
  TransferData: models.TransferData$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "TransferData": "transferData",
  });
});

/** @internal */
export type CreateTransferResponse$Outbound = {
  HttpMeta: models.HTTPMetadata$Outbound;
  TransferData?: models.TransferData$Outbound | undefined;
};

/** @internal */
export const CreateTransferResponse$outboundSchema: z.ZodType<
  CreateTransferResponse$Outbound,
  z.ZodTypeDef,
  CreateTransferResponse
> = z.object({
  httpMeta: models.HTTPMetadata$outboundSchema,
  transferData: models.TransferData$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    transferData: "TransferData",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateTransferResponse$ {
  /** @deprecated use `CreateTransferResponse$inboundSchema` instead. */
  export const inboundSchema = CreateTransferResponse$inboundSchema;
  /** @deprecated use `CreateTransferResponse$outboundSchema` instead. */
  export const outboundSchema = CreateTransferResponse$outboundSchema;
  /** @deprecated use `CreateTransferResponse$Outbound` instead. */
  export type Outbound = CreateTransferResponse$Outbound;
}

export function createTransferResponseToJSON(
  createTransferResponse: CreateTransferResponse,
): string {
  return JSON.stringify(
    CreateTransferResponse$outboundSchema.parse(createTransferResponse),
  );
}

export function createTransferResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateTransferResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateTransferResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateTransferResponse' from JSON`,
  );
}
