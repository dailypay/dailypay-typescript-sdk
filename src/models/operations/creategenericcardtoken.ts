/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export const CreateGenericCardTokenServerList = [
  "https://payments.dailypay.com/v2",
] as const;

export type CreateGenericCardTokenRequest = {
  /**
   * The first name or given name of the cardholder.
   */
  firstName: string;
  /**
   * The last name or surname of the cardholder.
   */
  lastName: string;
  /**
   * The full card number without spaces or hyphenation.
   */
  cardNumber: string;
  /**
   * The four-digit year of expiration for the card.
   */
  expirationYear: string;
  /**
   * The two-digit month of the expiration date for the card.
   */
  expirationMonth: string;
  /**
   * The CVV card code.
   */
  cvv?: string | null | undefined;
  /**
   * The first line of the address associated with the card.
   */
  addressLineOne: string;
  /**
   * The second line of the address associated with the card.
   */
  addressLineTwo?: string | null | undefined;
  /**
   * The city component of the address associated with the card.
   */
  addressCity: string;
  /**
   * The two-letter state component of the address associated with the card.
   */
  addressState: string;
  /**
   * The 5 digit zip-code component of the address associated with the card.
   */
  addressZipCode: string;
  /**
   * The two-letter ISO 3166 country code component of the address associated with the card.
   */
  addressCountry: string;
};

/**
 * Returns an opaque string representing the card details.
 *
 * @remarks
 */
export type CreateGenericCardTokenResponseBody = {
  /**
   * This token should be supplied in the `generic_token` field when creating a TransferAccount with
   *
   * @remarks
   * `transfer_account_type` of DebitCard using the Extend API "Create a transfer account" endpoint.
   */
  token: string;
};

export type CreateGenericCardTokenResponse = {
  httpMeta: models.HTTPMetadata;
  /**
   * Returns an opaque string representing the card details.
   *
   * @remarks
   */
  object?: CreateGenericCardTokenResponseBody | undefined;
};

/** @internal */
export const CreateGenericCardTokenRequest$inboundSchema: z.ZodType<
  CreateGenericCardTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  first_name: z.string(),
  last_name: z.string(),
  card_number: z.string(),
  expiration_year: z.string(),
  expiration_month: z.string(),
  cvv: z.nullable(z.string()).optional(),
  address_line_one: z.string(),
  address_line_two: z.nullable(z.string()).optional(),
  address_city: z.string(),
  address_state: z.string(),
  address_zip_code: z.string(),
  address_country: z.string(),
}).transform((v) => {
  return remap$(v, {
    "first_name": "firstName",
    "last_name": "lastName",
    "card_number": "cardNumber",
    "expiration_year": "expirationYear",
    "expiration_month": "expirationMonth",
    "address_line_one": "addressLineOne",
    "address_line_two": "addressLineTwo",
    "address_city": "addressCity",
    "address_state": "addressState",
    "address_zip_code": "addressZipCode",
    "address_country": "addressCountry",
  });
});

/** @internal */
export type CreateGenericCardTokenRequest$Outbound = {
  first_name: string;
  last_name: string;
  card_number: string;
  expiration_year: string;
  expiration_month: string;
  cvv?: string | null | undefined;
  address_line_one: string;
  address_line_two?: string | null | undefined;
  address_city: string;
  address_state: string;
  address_zip_code: string;
  address_country: string;
};

/** @internal */
export const CreateGenericCardTokenRequest$outboundSchema: z.ZodType<
  CreateGenericCardTokenRequest$Outbound,
  z.ZodTypeDef,
  CreateGenericCardTokenRequest
> = z.object({
  firstName: z.string(),
  lastName: z.string(),
  cardNumber: z.string(),
  expirationYear: z.string(),
  expirationMonth: z.string(),
  cvv: z.nullable(z.string()).optional(),
  addressLineOne: z.string(),
  addressLineTwo: z.nullable(z.string()).optional(),
  addressCity: z.string(),
  addressState: z.string(),
  addressZipCode: z.string(),
  addressCountry: z.string(),
}).transform((v) => {
  return remap$(v, {
    firstName: "first_name",
    lastName: "last_name",
    cardNumber: "card_number",
    expirationYear: "expiration_year",
    expirationMonth: "expiration_month",
    addressLineOne: "address_line_one",
    addressLineTwo: "address_line_two",
    addressCity: "address_city",
    addressState: "address_state",
    addressZipCode: "address_zip_code",
    addressCountry: "address_country",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateGenericCardTokenRequest$ {
  /** @deprecated use `CreateGenericCardTokenRequest$inboundSchema` instead. */
  export const inboundSchema = CreateGenericCardTokenRequest$inboundSchema;
  /** @deprecated use `CreateGenericCardTokenRequest$outboundSchema` instead. */
  export const outboundSchema = CreateGenericCardTokenRequest$outboundSchema;
  /** @deprecated use `CreateGenericCardTokenRequest$Outbound` instead. */
  export type Outbound = CreateGenericCardTokenRequest$Outbound;
}

export function createGenericCardTokenRequestToJSON(
  createGenericCardTokenRequest: CreateGenericCardTokenRequest,
): string {
  return JSON.stringify(
    CreateGenericCardTokenRequest$outboundSchema.parse(
      createGenericCardTokenRequest,
    ),
  );
}

export function createGenericCardTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<CreateGenericCardTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateGenericCardTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateGenericCardTokenRequest' from JSON`,
  );
}

/** @internal */
export const CreateGenericCardTokenResponseBody$inboundSchema: z.ZodType<
  CreateGenericCardTokenResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  token: z.string(),
});

/** @internal */
export type CreateGenericCardTokenResponseBody$Outbound = {
  token: string;
};

/** @internal */
export const CreateGenericCardTokenResponseBody$outboundSchema: z.ZodType<
  CreateGenericCardTokenResponseBody$Outbound,
  z.ZodTypeDef,
  CreateGenericCardTokenResponseBody
> = z.object({
  token: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateGenericCardTokenResponseBody$ {
  /** @deprecated use `CreateGenericCardTokenResponseBody$inboundSchema` instead. */
  export const inboundSchema = CreateGenericCardTokenResponseBody$inboundSchema;
  /** @deprecated use `CreateGenericCardTokenResponseBody$outboundSchema` instead. */
  export const outboundSchema =
    CreateGenericCardTokenResponseBody$outboundSchema;
  /** @deprecated use `CreateGenericCardTokenResponseBody$Outbound` instead. */
  export type Outbound = CreateGenericCardTokenResponseBody$Outbound;
}

export function createGenericCardTokenResponseBodyToJSON(
  createGenericCardTokenResponseBody: CreateGenericCardTokenResponseBody,
): string {
  return JSON.stringify(
    CreateGenericCardTokenResponseBody$outboundSchema.parse(
      createGenericCardTokenResponseBody,
    ),
  );
}

export function createGenericCardTokenResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateGenericCardTokenResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      CreateGenericCardTokenResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateGenericCardTokenResponseBody' from JSON`,
  );
}

/** @internal */
export const CreateGenericCardTokenResponse$inboundSchema: z.ZodType<
  CreateGenericCardTokenResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: models.HTTPMetadata$inboundSchema,
  object: z.lazy(() => CreateGenericCardTokenResponseBody$inboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
  });
});

/** @internal */
export type CreateGenericCardTokenResponse$Outbound = {
  HttpMeta: models.HTTPMetadata$Outbound;
  object?: CreateGenericCardTokenResponseBody$Outbound | undefined;
};

/** @internal */
export const CreateGenericCardTokenResponse$outboundSchema: z.ZodType<
  CreateGenericCardTokenResponse$Outbound,
  z.ZodTypeDef,
  CreateGenericCardTokenResponse
> = z.object({
  httpMeta: models.HTTPMetadata$outboundSchema,
  object: z.lazy(() => CreateGenericCardTokenResponseBody$outboundSchema)
    .optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateGenericCardTokenResponse$ {
  /** @deprecated use `CreateGenericCardTokenResponse$inboundSchema` instead. */
  export const inboundSchema = CreateGenericCardTokenResponse$inboundSchema;
  /** @deprecated use `CreateGenericCardTokenResponse$outboundSchema` instead. */
  export const outboundSchema = CreateGenericCardTokenResponse$outboundSchema;
  /** @deprecated use `CreateGenericCardTokenResponse$Outbound` instead. */
  export type Outbound = CreateGenericCardTokenResponse$Outbound;
}

export function createGenericCardTokenResponseToJSON(
  createGenericCardTokenResponse: CreateGenericCardTokenResponse,
): string {
  return JSON.stringify(
    CreateGenericCardTokenResponse$outboundSchema.parse(
      createGenericCardTokenResponse,
    ),
  );
}

export function createGenericCardTokenResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateGenericCardTokenResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateGenericCardTokenResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateGenericCardTokenResponse' from JSON`,
  );
}
