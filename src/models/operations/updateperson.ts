/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdatePersonGlobals = {
  /**
   * The version of the DailyPay API to use for this request. If not provided, the latest version of the API will be used.
   *
   * @remarks
   */
  version?: number | undefined;
};

export type UpdatePersonRequest = {
  /**
   * Unique ID of the person
   */
  personId: string;
  personData: models.PersonDataInput;
};

export type UpdatePersonResponse = {
  httpMeta: models.HTTPMetadata;
  /**
   * Returns the person object.
   */
  personData?: models.PersonData | undefined;
};

/** @internal */
export const UpdatePersonGlobals$inboundSchema: z.ZodType<
  UpdatePersonGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().int().default(3),
});

/** @internal */
export type UpdatePersonGlobals$Outbound = {
  version: number;
};

/** @internal */
export const UpdatePersonGlobals$outboundSchema: z.ZodType<
  UpdatePersonGlobals$Outbound,
  z.ZodTypeDef,
  UpdatePersonGlobals
> = z.object({
  version: z.number().int().default(3),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePersonGlobals$ {
  /** @deprecated use `UpdatePersonGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdatePersonGlobals$inboundSchema;
  /** @deprecated use `UpdatePersonGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdatePersonGlobals$outboundSchema;
  /** @deprecated use `UpdatePersonGlobals$Outbound` instead. */
  export type Outbound = UpdatePersonGlobals$Outbound;
}

export function updatePersonGlobalsToJSON(
  updatePersonGlobals: UpdatePersonGlobals,
): string {
  return JSON.stringify(
    UpdatePersonGlobals$outboundSchema.parse(updatePersonGlobals),
  );
}

export function updatePersonGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePersonGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePersonGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePersonGlobals' from JSON`,
  );
}

/** @internal */
export const UpdatePersonRequest$inboundSchema: z.ZodType<
  UpdatePersonRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  person_id: z.string(),
  PersonData: models.PersonDataInput$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "person_id": "personId",
    "PersonData": "personData",
  });
});

/** @internal */
export type UpdatePersonRequest$Outbound = {
  person_id: string;
  PersonData: models.PersonDataInput$Outbound;
};

/** @internal */
export const UpdatePersonRequest$outboundSchema: z.ZodType<
  UpdatePersonRequest$Outbound,
  z.ZodTypeDef,
  UpdatePersonRequest
> = z.object({
  personId: z.string(),
  personData: models.PersonDataInput$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    personId: "person_id",
    personData: "PersonData",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePersonRequest$ {
  /** @deprecated use `UpdatePersonRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePersonRequest$inboundSchema;
  /** @deprecated use `UpdatePersonRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePersonRequest$outboundSchema;
  /** @deprecated use `UpdatePersonRequest$Outbound` instead. */
  export type Outbound = UpdatePersonRequest$Outbound;
}

export function updatePersonRequestToJSON(
  updatePersonRequest: UpdatePersonRequest,
): string {
  return JSON.stringify(
    UpdatePersonRequest$outboundSchema.parse(updatePersonRequest),
  );
}

export function updatePersonRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePersonRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePersonRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePersonRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePersonResponse$inboundSchema: z.ZodType<
  UpdatePersonResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  HttpMeta: models.HTTPMetadata$inboundSchema,
  PersonData: models.PersonData$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "HttpMeta": "httpMeta",
    "PersonData": "personData",
  });
});

/** @internal */
export type UpdatePersonResponse$Outbound = {
  HttpMeta: models.HTTPMetadata$Outbound;
  PersonData?: models.PersonData$Outbound | undefined;
};

/** @internal */
export const UpdatePersonResponse$outboundSchema: z.ZodType<
  UpdatePersonResponse$Outbound,
  z.ZodTypeDef,
  UpdatePersonResponse
> = z.object({
  httpMeta: models.HTTPMetadata$outboundSchema,
  personData: models.PersonData$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    httpMeta: "HttpMeta",
    personData: "PersonData",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePersonResponse$ {
  /** @deprecated use `UpdatePersonResponse$inboundSchema` instead. */
  export const inboundSchema = UpdatePersonResponse$inboundSchema;
  /** @deprecated use `UpdatePersonResponse$outboundSchema` instead. */
  export const outboundSchema = UpdatePersonResponse$outboundSchema;
  /** @deprecated use `UpdatePersonResponse$Outbound` instead. */
  export type Outbound = UpdatePersonResponse$Outbound;
}

export function updatePersonResponseToJSON(
  updatePersonResponse: UpdatePersonResponse,
): string {
  return JSON.stringify(
    UpdatePersonResponse$outboundSchema.parse(updatePersonResponse),
  );
}

export function updatePersonResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePersonResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePersonResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePersonResponse' from JSON`,
  );
}
