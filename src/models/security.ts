/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SchemeOauthClientCredentialsToken,
  SchemeOauthClientCredentialsToken$inboundSchema,
  SchemeOauthClientCredentialsToken$Outbound,
  SchemeOauthClientCredentialsToken$outboundSchema,
} from "./schemeoauthclientcredentialstoken.js";

export type Security = {
  oauthClientCredentialsToken?: SchemeOauthClientCredentialsToken | undefined;
  oauthUserToken?: string | undefined;
};

/** @internal */
export const Security$inboundSchema: z.ZodType<
  Security,
  z.ZodTypeDef,
  unknown
> = z.object({
  oauth_client_credentials_token:
    SchemeOauthClientCredentialsToken$inboundSchema.optional(),
  oauth_user_token: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "oauth_client_credentials_token": "oauthClientCredentialsToken",
    "oauth_user_token": "oauthUserToken",
  });
});

/** @internal */
export type Security$Outbound = {
  oauth_client_credentials_token?:
    | SchemeOauthClientCredentialsToken$Outbound
    | undefined;
  oauth_user_token?: string | undefined;
};

/** @internal */
export const Security$outboundSchema: z.ZodType<
  Security$Outbound,
  z.ZodTypeDef,
  Security
> = z.object({
  oauthClientCredentialsToken: SchemeOauthClientCredentialsToken$outboundSchema
    .optional(),
  oauthUserToken: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    oauthClientCredentialsToken: "oauth_client_credentials_token",
    oauthUserToken: "oauth_user_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Security$ {
  /** @deprecated use `Security$inboundSchema` instead. */
  export const inboundSchema = Security$inboundSchema;
  /** @deprecated use `Security$outboundSchema` instead. */
  export const outboundSchema = Security$outboundSchema;
  /** @deprecated use `Security$Outbound` instead. */
  export type Outbound = Security$Outbound;
}

export function securityToJSON(security: Security): string {
  return JSON.stringify(Security$outboundSchema.parse(security));
}

export function securityFromJSON(
  jsonString: string,
): SafeParseResult<Security, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Security$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Security' from JSON`,
  );
}
