/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A list of links to resources that may be helpful in resolving the error.
 */
export type ErrorAccountCreateErrorLinks = {
  about?: string | undefined;
};

/**
 * Location in the request that may have caused the error.
 */
export type ErrorAccountCreateErrorSource = {
  /**
   * The name of the parameter that caused the error.
   */
  parameter?: string | undefined;
  /**
   * A JSON Pointer to the location in the request that caused the error.
   */
  pointer?: string | undefined;
  /**
   * The name of the header that caused the error.
   */
  header?: string | undefined;
};

/**
 * Additional information about the error.
 */
export type ErrorAccountCreateErrorMeta = {
  /**
   * A UUID for the originating request.
   */
  requestId?: string | undefined;
  /**
   * An ID used for tracing purposes.
   */
  traceId?: string | undefined;
};

export type ErrorAccountCreateError = {
  /**
   * A code that indicates what went wrong. Please consider this an open enum, where new codes may be added over time.
   */
  code: string;
  /**
   * The HTTP status code for the error.
   */
  status: string;
  /**
   * A message that explains the meaning of the error code. Developers are advised not to make programmatic use of this value, as it may change
   */
  detail: string;
  /**
   * A list of links to resources that may be helpful in resolving the error.
   */
  links: ErrorAccountCreateErrorLinks;
  /**
   * Location in the request that may have caused the error.
   */
  source?: ErrorAccountCreateErrorSource | undefined;
  /**
   * Additional information about the error.
   */
  meta: ErrorAccountCreateErrorMeta;
};

/** @internal */
export const ErrorAccountCreateErrorLinks$inboundSchema: z.ZodType<
  ErrorAccountCreateErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  about: z.string().optional(),
});

/** @internal */
export type ErrorAccountCreateErrorLinks$Outbound = {
  about?: string | undefined;
};

/** @internal */
export const ErrorAccountCreateErrorLinks$outboundSchema: z.ZodType<
  ErrorAccountCreateErrorLinks$Outbound,
  z.ZodTypeDef,
  ErrorAccountCreateErrorLinks
> = z.object({
  about: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorAccountCreateErrorLinks$ {
  /** @deprecated use `ErrorAccountCreateErrorLinks$inboundSchema` instead. */
  export const inboundSchema = ErrorAccountCreateErrorLinks$inboundSchema;
  /** @deprecated use `ErrorAccountCreateErrorLinks$outboundSchema` instead. */
  export const outboundSchema = ErrorAccountCreateErrorLinks$outboundSchema;
  /** @deprecated use `ErrorAccountCreateErrorLinks$Outbound` instead. */
  export type Outbound = ErrorAccountCreateErrorLinks$Outbound;
}

export function errorAccountCreateErrorLinksToJSON(
  errorAccountCreateErrorLinks: ErrorAccountCreateErrorLinks,
): string {
  return JSON.stringify(
    ErrorAccountCreateErrorLinks$outboundSchema.parse(
      errorAccountCreateErrorLinks,
    ),
  );
}

export function errorAccountCreateErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<ErrorAccountCreateErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorAccountCreateErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorAccountCreateErrorLinks' from JSON`,
  );
}

/** @internal */
export const ErrorAccountCreateErrorSource$inboundSchema: z.ZodType<
  ErrorAccountCreateErrorSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameter: z.string().optional(),
  pointer: z.string().optional(),
  header: z.string().optional(),
});

/** @internal */
export type ErrorAccountCreateErrorSource$Outbound = {
  parameter?: string | undefined;
  pointer?: string | undefined;
  header?: string | undefined;
};

/** @internal */
export const ErrorAccountCreateErrorSource$outboundSchema: z.ZodType<
  ErrorAccountCreateErrorSource$Outbound,
  z.ZodTypeDef,
  ErrorAccountCreateErrorSource
> = z.object({
  parameter: z.string().optional(),
  pointer: z.string().optional(),
  header: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorAccountCreateErrorSource$ {
  /** @deprecated use `ErrorAccountCreateErrorSource$inboundSchema` instead. */
  export const inboundSchema = ErrorAccountCreateErrorSource$inboundSchema;
  /** @deprecated use `ErrorAccountCreateErrorSource$outboundSchema` instead. */
  export const outboundSchema = ErrorAccountCreateErrorSource$outboundSchema;
  /** @deprecated use `ErrorAccountCreateErrorSource$Outbound` instead. */
  export type Outbound = ErrorAccountCreateErrorSource$Outbound;
}

export function errorAccountCreateErrorSourceToJSON(
  errorAccountCreateErrorSource: ErrorAccountCreateErrorSource,
): string {
  return JSON.stringify(
    ErrorAccountCreateErrorSource$outboundSchema.parse(
      errorAccountCreateErrorSource,
    ),
  );
}

export function errorAccountCreateErrorSourceFromJSON(
  jsonString: string,
): SafeParseResult<ErrorAccountCreateErrorSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorAccountCreateErrorSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorAccountCreateErrorSource' from JSON`,
  );
}

/** @internal */
export const ErrorAccountCreateErrorMeta$inboundSchema: z.ZodType<
  ErrorAccountCreateErrorMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  request_id: z.string().optional(),
  trace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
    "trace_id": "traceId",
  });
});

/** @internal */
export type ErrorAccountCreateErrorMeta$Outbound = {
  request_id?: string | undefined;
  trace_id?: string | undefined;
};

/** @internal */
export const ErrorAccountCreateErrorMeta$outboundSchema: z.ZodType<
  ErrorAccountCreateErrorMeta$Outbound,
  z.ZodTypeDef,
  ErrorAccountCreateErrorMeta
> = z.object({
  requestId: z.string().optional(),
  traceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
    traceId: "trace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorAccountCreateErrorMeta$ {
  /** @deprecated use `ErrorAccountCreateErrorMeta$inboundSchema` instead. */
  export const inboundSchema = ErrorAccountCreateErrorMeta$inboundSchema;
  /** @deprecated use `ErrorAccountCreateErrorMeta$outboundSchema` instead. */
  export const outboundSchema = ErrorAccountCreateErrorMeta$outboundSchema;
  /** @deprecated use `ErrorAccountCreateErrorMeta$Outbound` instead. */
  export type Outbound = ErrorAccountCreateErrorMeta$Outbound;
}

export function errorAccountCreateErrorMetaToJSON(
  errorAccountCreateErrorMeta: ErrorAccountCreateErrorMeta,
): string {
  return JSON.stringify(
    ErrorAccountCreateErrorMeta$outboundSchema.parse(
      errorAccountCreateErrorMeta,
    ),
  );
}

export function errorAccountCreateErrorMetaFromJSON(
  jsonString: string,
): SafeParseResult<ErrorAccountCreateErrorMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorAccountCreateErrorMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorAccountCreateErrorMeta' from JSON`,
  );
}

/** @internal */
export const ErrorAccountCreateError$inboundSchema: z.ZodType<
  ErrorAccountCreateError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  status: z.string(),
  detail: z.string(),
  links: z.lazy(() => ErrorAccountCreateErrorLinks$inboundSchema),
  source: z.lazy(() => ErrorAccountCreateErrorSource$inboundSchema).optional(),
  meta: z.lazy(() => ErrorAccountCreateErrorMeta$inboundSchema),
});

/** @internal */
export type ErrorAccountCreateError$Outbound = {
  code: string;
  status: string;
  detail: string;
  links: ErrorAccountCreateErrorLinks$Outbound;
  source?: ErrorAccountCreateErrorSource$Outbound | undefined;
  meta: ErrorAccountCreateErrorMeta$Outbound;
};

/** @internal */
export const ErrorAccountCreateError$outboundSchema: z.ZodType<
  ErrorAccountCreateError$Outbound,
  z.ZodTypeDef,
  ErrorAccountCreateError
> = z.object({
  code: z.string(),
  status: z.string(),
  detail: z.string(),
  links: z.lazy(() => ErrorAccountCreateErrorLinks$outboundSchema),
  source: z.lazy(() => ErrorAccountCreateErrorSource$outboundSchema).optional(),
  meta: z.lazy(() => ErrorAccountCreateErrorMeta$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorAccountCreateError$ {
  /** @deprecated use `ErrorAccountCreateError$inboundSchema` instead. */
  export const inboundSchema = ErrorAccountCreateError$inboundSchema;
  /** @deprecated use `ErrorAccountCreateError$outboundSchema` instead. */
  export const outboundSchema = ErrorAccountCreateError$outboundSchema;
  /** @deprecated use `ErrorAccountCreateError$Outbound` instead. */
  export type Outbound = ErrorAccountCreateError$Outbound;
}

export function errorAccountCreateErrorToJSON(
  errorAccountCreateError: ErrorAccountCreateError,
): string {
  return JSON.stringify(
    ErrorAccountCreateError$outboundSchema.parse(errorAccountCreateError),
  );
}

export function errorAccountCreateErrorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorAccountCreateError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorAccountCreateError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorAccountCreateError' from JSON`,
  );
}
