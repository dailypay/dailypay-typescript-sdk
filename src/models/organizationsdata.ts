/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OrganizationResource,
  OrganizationResource$inboundSchema,
  OrganizationResource$Outbound,
  OrganizationResource$outboundSchema,
} from "./organizationresource.js";

/**
 * Returns a list of organization objects that match the filter. If no organizations match the filter, the resulting collection will be empty. If no filter is provider, the resulting collection will include all accessible organizations.
 */
export type OrganizationsData = {
  data: Array<OrganizationResource>;
};

/** @internal */
export const OrganizationsData$inboundSchema: z.ZodType<
  OrganizationsData,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(OrganizationResource$inboundSchema),
});

/** @internal */
export type OrganizationsData$Outbound = {
  data: Array<OrganizationResource$Outbound>;
};

/** @internal */
export const OrganizationsData$outboundSchema: z.ZodType<
  OrganizationsData$Outbound,
  z.ZodTypeDef,
  OrganizationsData
> = z.object({
  data: z.array(OrganizationResource$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationsData$ {
  /** @deprecated use `OrganizationsData$inboundSchema` instead. */
  export const inboundSchema = OrganizationsData$inboundSchema;
  /** @deprecated use `OrganizationsData$outboundSchema` instead. */
  export const outboundSchema = OrganizationsData$outboundSchema;
  /** @deprecated use `OrganizationsData$Outbound` instead. */
  export type Outbound = OrganizationsData$Outbound;
}

export function organizationsDataToJSON(
  organizationsData: OrganizationsData,
): string {
  return JSON.stringify(
    OrganizationsData$outboundSchema.parse(organizationsData),
  );
}

export function organizationsDataFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationsData, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationsData$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationsData' from JSON`,
  );
}
