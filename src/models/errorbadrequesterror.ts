/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A list of links to resources that may be helpful in resolving the error.
 */
export type ErrorBadRequestErrorLinks = {
  about?: string | undefined;
};

/**
 * Location in the request that may have caused the error.
 */
export type ErrorBadRequestErrorSource = {
  /**
   * The name of the parameter that caused the error.
   */
  parameter?: string | undefined;
  /**
   * A JSON Pointer to the location in the request that caused the error.
   */
  pointer?: string | undefined;
  /**
   * The name of the header that caused the error.
   */
  header?: string | undefined;
};

/**
 * Additional information about the error.
 */
export type ErrorBadRequestErrorMeta = {
  /**
   * A UUID for the originating request.
   */
  requestId?: string | undefined;
  /**
   * An ID used for tracing purposes.
   */
  traceId?: string | undefined;
};

export type ErrorBadRequestError = {
  /**
   * A code that indicates what went wrong. Please consider this an open enum, where new codes may be added over time.
   */
  code: string;
  /**
   * The HTTP status code for the error.
   */
  status: string;
  /**
   * A message that explains the meaning of the error code. Developers are advised not to make programmatic use of this value, as it may change
   */
  detail: string;
  /**
   * A list of links to resources that may be helpful in resolving the error.
   */
  links: ErrorBadRequestErrorLinks;
  /**
   * Location in the request that may have caused the error.
   */
  source?: ErrorBadRequestErrorSource | undefined;
  /**
   * Additional information about the error.
   */
  meta: ErrorBadRequestErrorMeta;
};

/** @internal */
export const ErrorBadRequestErrorLinks$inboundSchema: z.ZodType<
  ErrorBadRequestErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  about: z.string().optional(),
});

/** @internal */
export type ErrorBadRequestErrorLinks$Outbound = {
  about?: string | undefined;
};

/** @internal */
export const ErrorBadRequestErrorLinks$outboundSchema: z.ZodType<
  ErrorBadRequestErrorLinks$Outbound,
  z.ZodTypeDef,
  ErrorBadRequestErrorLinks
> = z.object({
  about: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorBadRequestErrorLinks$ {
  /** @deprecated use `ErrorBadRequestErrorLinks$inboundSchema` instead. */
  export const inboundSchema = ErrorBadRequestErrorLinks$inboundSchema;
  /** @deprecated use `ErrorBadRequestErrorLinks$outboundSchema` instead. */
  export const outboundSchema = ErrorBadRequestErrorLinks$outboundSchema;
  /** @deprecated use `ErrorBadRequestErrorLinks$Outbound` instead. */
  export type Outbound = ErrorBadRequestErrorLinks$Outbound;
}

export function errorBadRequestErrorLinksToJSON(
  errorBadRequestErrorLinks: ErrorBadRequestErrorLinks,
): string {
  return JSON.stringify(
    ErrorBadRequestErrorLinks$outboundSchema.parse(errorBadRequestErrorLinks),
  );
}

export function errorBadRequestErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<ErrorBadRequestErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorBadRequestErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorBadRequestErrorLinks' from JSON`,
  );
}

/** @internal */
export const ErrorBadRequestErrorSource$inboundSchema: z.ZodType<
  ErrorBadRequestErrorSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameter: z.string().optional(),
  pointer: z.string().optional(),
  header: z.string().optional(),
});

/** @internal */
export type ErrorBadRequestErrorSource$Outbound = {
  parameter?: string | undefined;
  pointer?: string | undefined;
  header?: string | undefined;
};

/** @internal */
export const ErrorBadRequestErrorSource$outboundSchema: z.ZodType<
  ErrorBadRequestErrorSource$Outbound,
  z.ZodTypeDef,
  ErrorBadRequestErrorSource
> = z.object({
  parameter: z.string().optional(),
  pointer: z.string().optional(),
  header: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorBadRequestErrorSource$ {
  /** @deprecated use `ErrorBadRequestErrorSource$inboundSchema` instead. */
  export const inboundSchema = ErrorBadRequestErrorSource$inboundSchema;
  /** @deprecated use `ErrorBadRequestErrorSource$outboundSchema` instead. */
  export const outboundSchema = ErrorBadRequestErrorSource$outboundSchema;
  /** @deprecated use `ErrorBadRequestErrorSource$Outbound` instead. */
  export type Outbound = ErrorBadRequestErrorSource$Outbound;
}

export function errorBadRequestErrorSourceToJSON(
  errorBadRequestErrorSource: ErrorBadRequestErrorSource,
): string {
  return JSON.stringify(
    ErrorBadRequestErrorSource$outboundSchema.parse(errorBadRequestErrorSource),
  );
}

export function errorBadRequestErrorSourceFromJSON(
  jsonString: string,
): SafeParseResult<ErrorBadRequestErrorSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorBadRequestErrorSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorBadRequestErrorSource' from JSON`,
  );
}

/** @internal */
export const ErrorBadRequestErrorMeta$inboundSchema: z.ZodType<
  ErrorBadRequestErrorMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  request_id: z.string().optional(),
  trace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
    "trace_id": "traceId",
  });
});

/** @internal */
export type ErrorBadRequestErrorMeta$Outbound = {
  request_id?: string | undefined;
  trace_id?: string | undefined;
};

/** @internal */
export const ErrorBadRequestErrorMeta$outboundSchema: z.ZodType<
  ErrorBadRequestErrorMeta$Outbound,
  z.ZodTypeDef,
  ErrorBadRequestErrorMeta
> = z.object({
  requestId: z.string().optional(),
  traceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
    traceId: "trace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorBadRequestErrorMeta$ {
  /** @deprecated use `ErrorBadRequestErrorMeta$inboundSchema` instead. */
  export const inboundSchema = ErrorBadRequestErrorMeta$inboundSchema;
  /** @deprecated use `ErrorBadRequestErrorMeta$outboundSchema` instead. */
  export const outboundSchema = ErrorBadRequestErrorMeta$outboundSchema;
  /** @deprecated use `ErrorBadRequestErrorMeta$Outbound` instead. */
  export type Outbound = ErrorBadRequestErrorMeta$Outbound;
}

export function errorBadRequestErrorMetaToJSON(
  errorBadRequestErrorMeta: ErrorBadRequestErrorMeta,
): string {
  return JSON.stringify(
    ErrorBadRequestErrorMeta$outboundSchema.parse(errorBadRequestErrorMeta),
  );
}

export function errorBadRequestErrorMetaFromJSON(
  jsonString: string,
): SafeParseResult<ErrorBadRequestErrorMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorBadRequestErrorMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorBadRequestErrorMeta' from JSON`,
  );
}

/** @internal */
export const ErrorBadRequestError$inboundSchema: z.ZodType<
  ErrorBadRequestError,
  z.ZodTypeDef,
  unknown
> = z.object({
  code: z.string(),
  status: z.string(),
  detail: z.string(),
  links: z.lazy(() => ErrorBadRequestErrorLinks$inboundSchema),
  source: z.lazy(() => ErrorBadRequestErrorSource$inboundSchema).optional(),
  meta: z.lazy(() => ErrorBadRequestErrorMeta$inboundSchema),
});

/** @internal */
export type ErrorBadRequestError$Outbound = {
  code: string;
  status: string;
  detail: string;
  links: ErrorBadRequestErrorLinks$Outbound;
  source?: ErrorBadRequestErrorSource$Outbound | undefined;
  meta: ErrorBadRequestErrorMeta$Outbound;
};

/** @internal */
export const ErrorBadRequestError$outboundSchema: z.ZodType<
  ErrorBadRequestError$Outbound,
  z.ZodTypeDef,
  ErrorBadRequestError
> = z.object({
  code: z.string(),
  status: z.string(),
  detail: z.string(),
  links: z.lazy(() => ErrorBadRequestErrorLinks$outboundSchema),
  source: z.lazy(() => ErrorBadRequestErrorSource$outboundSchema).optional(),
  meta: z.lazy(() => ErrorBadRequestErrorMeta$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorBadRequestError$ {
  /** @deprecated use `ErrorBadRequestError$inboundSchema` instead. */
  export const inboundSchema = ErrorBadRequestError$inboundSchema;
  /** @deprecated use `ErrorBadRequestError$outboundSchema` instead. */
  export const outboundSchema = ErrorBadRequestError$outboundSchema;
  /** @deprecated use `ErrorBadRequestError$Outbound` instead. */
  export type Outbound = ErrorBadRequestError$Outbound;
}

export function errorBadRequestErrorToJSON(
  errorBadRequestError: ErrorBadRequestError,
): string {
  return JSON.stringify(
    ErrorBadRequestError$outboundSchema.parse(errorBadRequestError),
  );
}

export function errorBadRequestErrorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorBadRequestError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorBadRequestError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorBadRequestError' from JSON`,
  );
}
