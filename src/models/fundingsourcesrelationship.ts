/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  FundingSourceIdentifier,
  FundingSourceIdentifier$inboundSchema,
  FundingSourceIdentifier$Outbound,
  FundingSourceIdentifier$outboundSchema,
} from "./fundingsourceidentifier.js";

export type FundingSourcesRelationship = {
  data: Array<FundingSourceIdentifier>;
};

/** @internal */
export const FundingSourcesRelationship$inboundSchema: z.ZodType<
  FundingSourcesRelationship,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(FundingSourceIdentifier$inboundSchema),
});

/** @internal */
export type FundingSourcesRelationship$Outbound = {
  data: Array<FundingSourceIdentifier$Outbound>;
};

/** @internal */
export const FundingSourcesRelationship$outboundSchema: z.ZodType<
  FundingSourcesRelationship$Outbound,
  z.ZodTypeDef,
  FundingSourcesRelationship
> = z.object({
  data: z.array(FundingSourceIdentifier$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace FundingSourcesRelationship$ {
  /** @deprecated use `FundingSourcesRelationship$inboundSchema` instead. */
  export const inboundSchema = FundingSourcesRelationship$inboundSchema;
  /** @deprecated use `FundingSourcesRelationship$outboundSchema` instead. */
  export const outboundSchema = FundingSourcesRelationship$outboundSchema;
  /** @deprecated use `FundingSourcesRelationship$Outbound` instead. */
  export type Outbound = FundingSourcesRelationship$Outbound;
}

export function fundingSourcesRelationshipToJSON(
  fundingSourcesRelationship: FundingSourcesRelationship,
): string {
  return JSON.stringify(
    FundingSourcesRelationship$outboundSchema.parse(fundingSourcesRelationship),
  );
}

export function fundingSourcesRelationshipFromJSON(
  jsonString: string,
): SafeParseResult<FundingSourcesRelationship, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => FundingSourcesRelationship$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'FundingSourcesRelationship' from JSON`,
  );
}
