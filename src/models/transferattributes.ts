/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The status of the transfer.
 */
export const TransferAttributesStatus = {
  Pending: "PENDING",
  Settled: "SETTLED",
  Failed: "FAILED",
} as const;
/**
 * The status of the transfer.
 */
export type TransferAttributesStatus = ClosedEnum<
  typeof TransferAttributesStatus
>;

/**
 * Set the schedule for the transfer. If not set, the transfer will be processed immediately.
 *
 * @remarks
 * A preview transfer will never send.
 */
export const TransferAttributesSchedule = {
  WithinThirtyMinutes: "WITHIN_THIRTY_MINUTES",
  NextBusinessDay: "NEXT_BUSINESS_DAY",
} as const;
/**
 * Set the schedule for the transfer. If not set, the transfer will be processed immediately.
 *
 * @remarks
 * A preview transfer will never send.
 */
export type TransferAttributesSchedule = ClosedEnum<
  typeof TransferAttributesSchedule
>;

/**
 * An object representing a transfer of money from one account to another.
 *
 * @remarks
 * Created when a person takes an advance against a future paycheck, or on a daily basis
 * when we update estimated earnings based on current employment.
 */
export type TransferAttributes = {
  /**
   * Include this field to preview a transfer without sending it, to see, for example, the fee that would be charged. This will return the same response as a typical transfer request.
   *
   * @remarks
   * When the preview field is true in the response to creating a transfer, that indicates no transfer was created.
   */
  preview?: boolean | undefined;
  /**
   * A monetary quantity expressed in units of the lowest denomination in the associated currency. For example, `{ amount: 7250, currency: 'USD' }` resolves to $72.50.
   */
  amount: number;
  /**
   * A three-letter ISO 4217 currency code. For example, `USD` for US Dollars, `EUR` for Euros, or `JPY` for Japanese Yen.
   */
  currency: string;
  /**
   * The status of the transfer.
   */
  status: TransferAttributesStatus;
  /**
   * Set the schedule for the transfer. If not set, the transfer will be processed immediately.
   *
   * @remarks
   * A preview transfer will never send.
   */
  schedule: TransferAttributesSchedule;
  /**
   * An ISO 8601 timestamp denoting the receipt for the request.
   */
  submittedAt: Date;
  /**
   * An ISO 8601 date denoting a successful or unsuccessful resolution for the request.
   */
  resolvedAt: Date | null;
  /**
   * A monetary quantity expressed in units of the lowest denomination in the associated currency. For example, `{ amount: 7250, currency: 'USD' }` resolves to $72.50.
   *
   * @remarks
   * If a transfer incurs a fee, the fee will be deducted from the amount of the transfer.
   */
  fee: number;
};

/**
 * An object representing a transfer of money from one account to another.
 *
 * @remarks
 * Created when a person takes an advance against a future paycheck, or on a daily basis
 * when we update estimated earnings based on current employment.
 */
export type TransferAttributesInput = {
  /**
   * Include this field to preview a transfer without sending it, to see, for example, the fee that would be charged. This will return the same response as a typical transfer request.
   *
   * @remarks
   * When the preview field is true in the response to creating a transfer, that indicates no transfer was created.
   */
  preview?: boolean | undefined;
  /**
   * A monetary quantity expressed in units of the lowest denomination in the associated currency. For example, `{ amount: 7250, currency: 'USD' }` resolves to $72.50.
   */
  amount: number;
  /**
   * A three-letter ISO 4217 currency code. For example, `USD` for US Dollars, `EUR` for Euros, or `JPY` for Japanese Yen.
   */
  currency: string;
  /**
   * Set the schedule for the transfer. If not set, the transfer will be processed immediately.
   *
   * @remarks
   * A preview transfer will never send.
   */
  schedule: TransferAttributesSchedule;
};

/** @internal */
export const TransferAttributesStatus$inboundSchema: z.ZodNativeEnum<
  typeof TransferAttributesStatus
> = z.nativeEnum(TransferAttributesStatus);

/** @internal */
export const TransferAttributesStatus$outboundSchema: z.ZodNativeEnum<
  typeof TransferAttributesStatus
> = TransferAttributesStatus$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferAttributesStatus$ {
  /** @deprecated use `TransferAttributesStatus$inboundSchema` instead. */
  export const inboundSchema = TransferAttributesStatus$inboundSchema;
  /** @deprecated use `TransferAttributesStatus$outboundSchema` instead. */
  export const outboundSchema = TransferAttributesStatus$outboundSchema;
}

/** @internal */
export const TransferAttributesSchedule$inboundSchema: z.ZodNativeEnum<
  typeof TransferAttributesSchedule
> = z.nativeEnum(TransferAttributesSchedule);

/** @internal */
export const TransferAttributesSchedule$outboundSchema: z.ZodNativeEnum<
  typeof TransferAttributesSchedule
> = TransferAttributesSchedule$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferAttributesSchedule$ {
  /** @deprecated use `TransferAttributesSchedule$inboundSchema` instead. */
  export const inboundSchema = TransferAttributesSchedule$inboundSchema;
  /** @deprecated use `TransferAttributesSchedule$outboundSchema` instead. */
  export const outboundSchema = TransferAttributesSchedule$outboundSchema;
}

/** @internal */
export const TransferAttributes$inboundSchema: z.ZodType<
  TransferAttributes,
  z.ZodTypeDef,
  unknown
> = z.object({
  preview: z.boolean().default(false),
  amount: z.number().int(),
  currency: z.string(),
  status: TransferAttributesStatus$inboundSchema,
  schedule: TransferAttributesSchedule$inboundSchema,
  submitted_at: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  resolved_at: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ),
  fee: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "submitted_at": "submittedAt",
    "resolved_at": "resolvedAt",
  });
});

/** @internal */
export type TransferAttributes$Outbound = {
  preview: boolean;
  amount: number;
  currency: string;
  status: string;
  schedule: string;
  submitted_at: string;
  resolved_at: string | null;
  fee: number;
};

/** @internal */
export const TransferAttributes$outboundSchema: z.ZodType<
  TransferAttributes$Outbound,
  z.ZodTypeDef,
  TransferAttributes
> = z.object({
  preview: z.boolean().default(false),
  amount: z.number().int(),
  currency: z.string(),
  status: TransferAttributesStatus$outboundSchema,
  schedule: TransferAttributesSchedule$outboundSchema,
  submittedAt: z.date().transform(v => v.toISOString()),
  resolvedAt: z.nullable(z.date().transform(v => v.toISOString())),
  fee: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    submittedAt: "submitted_at",
    resolvedAt: "resolved_at",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferAttributes$ {
  /** @deprecated use `TransferAttributes$inboundSchema` instead. */
  export const inboundSchema = TransferAttributes$inboundSchema;
  /** @deprecated use `TransferAttributes$outboundSchema` instead. */
  export const outboundSchema = TransferAttributes$outboundSchema;
  /** @deprecated use `TransferAttributes$Outbound` instead. */
  export type Outbound = TransferAttributes$Outbound;
}

export function transferAttributesToJSON(
  transferAttributes: TransferAttributes,
): string {
  return JSON.stringify(
    TransferAttributes$outboundSchema.parse(transferAttributes),
  );
}

export function transferAttributesFromJSON(
  jsonString: string,
): SafeParseResult<TransferAttributes, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferAttributes$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferAttributes' from JSON`,
  );
}

/** @internal */
export const TransferAttributesInput$inboundSchema: z.ZodType<
  TransferAttributesInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  preview: z.boolean().default(false),
  amount: z.number().int(),
  currency: z.string(),
  schedule: TransferAttributesSchedule$inboundSchema,
});

/** @internal */
export type TransferAttributesInput$Outbound = {
  preview: boolean;
  amount: number;
  currency: string;
  schedule: string;
};

/** @internal */
export const TransferAttributesInput$outboundSchema: z.ZodType<
  TransferAttributesInput$Outbound,
  z.ZodTypeDef,
  TransferAttributesInput
> = z.object({
  preview: z.boolean().default(false),
  amount: z.number().int(),
  currency: z.string(),
  schedule: TransferAttributesSchedule$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferAttributesInput$ {
  /** @deprecated use `TransferAttributesInput$inboundSchema` instead. */
  export const inboundSchema = TransferAttributesInput$inboundSchema;
  /** @deprecated use `TransferAttributesInput$outboundSchema` instead. */
  export const outboundSchema = TransferAttributesInput$outboundSchema;
  /** @deprecated use `TransferAttributesInput$Outbound` instead. */
  export type Outbound = TransferAttributesInput$Outbound;
}

export function transferAttributesInputToJSON(
  transferAttributesInput: TransferAttributesInput,
): string {
  return JSON.stringify(
    TransferAttributesInput$outboundSchema.parse(transferAttributesInput),
  );
}

export function transferAttributesInputFromJSON(
  jsonString: string,
): SafeParseResult<TransferAttributesInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferAttributesInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferAttributesInput' from JSON`,
  );
}
