/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A list of links to resources that may be helpful in resolving the error.
 */
export type ErrorUnauthorizedErrorLinks = {
  about?: string | undefined;
};

/**
 * Location in the request that may have caused the error.
 */
export type ErrorUnauthorizedErrorSource = {
  /**
   * The name of the parameter that caused the error.
   */
  parameter?: string | undefined;
  /**
   * A JSON Pointer to the location in the request that caused the error.
   */
  pointer?: string | undefined;
  /**
   * The name of the header that caused the error.
   */
  header?: string | undefined;
};

/**
 * Additional information about the error.
 */
export type ErrorUnauthorizedErrorMeta = {
  /**
   * A UUID for the originating request.
   */
  requestId?: string | undefined;
  /**
   * An ID used for tracing purposes.
   */
  traceId?: string | undefined;
};

/**
 * A code that indicates what went wrong.
 */
export const ErrorUnauthorizedErrorCode = {
  InvalidToken: "INVALID_TOKEN",
  Unauthorized: "UNAUTHORIZED",
} as const;
/**
 * A code that indicates what went wrong.
 */
export type ErrorUnauthorizedErrorCode = ClosedEnum<
  typeof ErrorUnauthorizedErrorCode
>;

export type ErrorUnauthorizedError = {
  /**
   * The HTTP status code for the error.
   */
  status: string;
  /**
   * A message that explains the meaning of the error code. Developers are advised not to make programmatic use of this value, as it may change
   */
  detail: string;
  /**
   * A list of links to resources that may be helpful in resolving the error.
   */
  links: ErrorUnauthorizedErrorLinks;
  /**
   * Location in the request that may have caused the error.
   */
  source?: ErrorUnauthorizedErrorSource | undefined;
  /**
   * Additional information about the error.
   */
  meta: ErrorUnauthorizedErrorMeta;
  /**
   * A code that indicates what went wrong.
   */
  code: ErrorUnauthorizedErrorCode;
};

/** @internal */
export const ErrorUnauthorizedErrorLinks$inboundSchema: z.ZodType<
  ErrorUnauthorizedErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  about: z.string().optional(),
});

/** @internal */
export type ErrorUnauthorizedErrorLinks$Outbound = {
  about?: string | undefined;
};

/** @internal */
export const ErrorUnauthorizedErrorLinks$outboundSchema: z.ZodType<
  ErrorUnauthorizedErrorLinks$Outbound,
  z.ZodTypeDef,
  ErrorUnauthorizedErrorLinks
> = z.object({
  about: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorUnauthorizedErrorLinks$ {
  /** @deprecated use `ErrorUnauthorizedErrorLinks$inboundSchema` instead. */
  export const inboundSchema = ErrorUnauthorizedErrorLinks$inboundSchema;
  /** @deprecated use `ErrorUnauthorizedErrorLinks$outboundSchema` instead. */
  export const outboundSchema = ErrorUnauthorizedErrorLinks$outboundSchema;
  /** @deprecated use `ErrorUnauthorizedErrorLinks$Outbound` instead. */
  export type Outbound = ErrorUnauthorizedErrorLinks$Outbound;
}

export function errorUnauthorizedErrorLinksToJSON(
  errorUnauthorizedErrorLinks: ErrorUnauthorizedErrorLinks,
): string {
  return JSON.stringify(
    ErrorUnauthorizedErrorLinks$outboundSchema.parse(
      errorUnauthorizedErrorLinks,
    ),
  );
}

export function errorUnauthorizedErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<ErrorUnauthorizedErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorUnauthorizedErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorUnauthorizedErrorLinks' from JSON`,
  );
}

/** @internal */
export const ErrorUnauthorizedErrorSource$inboundSchema: z.ZodType<
  ErrorUnauthorizedErrorSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameter: z.string().optional(),
  pointer: z.string().optional(),
  header: z.string().optional(),
});

/** @internal */
export type ErrorUnauthorizedErrorSource$Outbound = {
  parameter?: string | undefined;
  pointer?: string | undefined;
  header?: string | undefined;
};

/** @internal */
export const ErrorUnauthorizedErrorSource$outboundSchema: z.ZodType<
  ErrorUnauthorizedErrorSource$Outbound,
  z.ZodTypeDef,
  ErrorUnauthorizedErrorSource
> = z.object({
  parameter: z.string().optional(),
  pointer: z.string().optional(),
  header: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorUnauthorizedErrorSource$ {
  /** @deprecated use `ErrorUnauthorizedErrorSource$inboundSchema` instead. */
  export const inboundSchema = ErrorUnauthorizedErrorSource$inboundSchema;
  /** @deprecated use `ErrorUnauthorizedErrorSource$outboundSchema` instead. */
  export const outboundSchema = ErrorUnauthorizedErrorSource$outboundSchema;
  /** @deprecated use `ErrorUnauthorizedErrorSource$Outbound` instead. */
  export type Outbound = ErrorUnauthorizedErrorSource$Outbound;
}

export function errorUnauthorizedErrorSourceToJSON(
  errorUnauthorizedErrorSource: ErrorUnauthorizedErrorSource,
): string {
  return JSON.stringify(
    ErrorUnauthorizedErrorSource$outboundSchema.parse(
      errorUnauthorizedErrorSource,
    ),
  );
}

export function errorUnauthorizedErrorSourceFromJSON(
  jsonString: string,
): SafeParseResult<ErrorUnauthorizedErrorSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorUnauthorizedErrorSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorUnauthorizedErrorSource' from JSON`,
  );
}

/** @internal */
export const ErrorUnauthorizedErrorMeta$inboundSchema: z.ZodType<
  ErrorUnauthorizedErrorMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  request_id: z.string().optional(),
  trace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
    "trace_id": "traceId",
  });
});

/** @internal */
export type ErrorUnauthorizedErrorMeta$Outbound = {
  request_id?: string | undefined;
  trace_id?: string | undefined;
};

/** @internal */
export const ErrorUnauthorizedErrorMeta$outboundSchema: z.ZodType<
  ErrorUnauthorizedErrorMeta$Outbound,
  z.ZodTypeDef,
  ErrorUnauthorizedErrorMeta
> = z.object({
  requestId: z.string().optional(),
  traceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
    traceId: "trace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorUnauthorizedErrorMeta$ {
  /** @deprecated use `ErrorUnauthorizedErrorMeta$inboundSchema` instead. */
  export const inboundSchema = ErrorUnauthorizedErrorMeta$inboundSchema;
  /** @deprecated use `ErrorUnauthorizedErrorMeta$outboundSchema` instead. */
  export const outboundSchema = ErrorUnauthorizedErrorMeta$outboundSchema;
  /** @deprecated use `ErrorUnauthorizedErrorMeta$Outbound` instead. */
  export type Outbound = ErrorUnauthorizedErrorMeta$Outbound;
}

export function errorUnauthorizedErrorMetaToJSON(
  errorUnauthorizedErrorMeta: ErrorUnauthorizedErrorMeta,
): string {
  return JSON.stringify(
    ErrorUnauthorizedErrorMeta$outboundSchema.parse(errorUnauthorizedErrorMeta),
  );
}

export function errorUnauthorizedErrorMetaFromJSON(
  jsonString: string,
): SafeParseResult<ErrorUnauthorizedErrorMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorUnauthorizedErrorMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorUnauthorizedErrorMeta' from JSON`,
  );
}

/** @internal */
export const ErrorUnauthorizedErrorCode$inboundSchema: z.ZodNativeEnum<
  typeof ErrorUnauthorizedErrorCode
> = z.nativeEnum(ErrorUnauthorizedErrorCode);

/** @internal */
export const ErrorUnauthorizedErrorCode$outboundSchema: z.ZodNativeEnum<
  typeof ErrorUnauthorizedErrorCode
> = ErrorUnauthorizedErrorCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorUnauthorizedErrorCode$ {
  /** @deprecated use `ErrorUnauthorizedErrorCode$inboundSchema` instead. */
  export const inboundSchema = ErrorUnauthorizedErrorCode$inboundSchema;
  /** @deprecated use `ErrorUnauthorizedErrorCode$outboundSchema` instead. */
  export const outboundSchema = ErrorUnauthorizedErrorCode$outboundSchema;
}

/** @internal */
export const ErrorUnauthorizedError$inboundSchema: z.ZodType<
  ErrorUnauthorizedError,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string(),
  detail: z.string(),
  links: z.lazy(() => ErrorUnauthorizedErrorLinks$inboundSchema),
  source: z.lazy(() => ErrorUnauthorizedErrorSource$inboundSchema).optional(),
  meta: z.lazy(() => ErrorUnauthorizedErrorMeta$inboundSchema),
  code: ErrorUnauthorizedErrorCode$inboundSchema,
});

/** @internal */
export type ErrorUnauthorizedError$Outbound = {
  status: string;
  detail: string;
  links: ErrorUnauthorizedErrorLinks$Outbound;
  source?: ErrorUnauthorizedErrorSource$Outbound | undefined;
  meta: ErrorUnauthorizedErrorMeta$Outbound;
  code: string;
};

/** @internal */
export const ErrorUnauthorizedError$outboundSchema: z.ZodType<
  ErrorUnauthorizedError$Outbound,
  z.ZodTypeDef,
  ErrorUnauthorizedError
> = z.object({
  status: z.string(),
  detail: z.string(),
  links: z.lazy(() => ErrorUnauthorizedErrorLinks$outboundSchema),
  source: z.lazy(() => ErrorUnauthorizedErrorSource$outboundSchema).optional(),
  meta: z.lazy(() => ErrorUnauthorizedErrorMeta$outboundSchema),
  code: ErrorUnauthorizedErrorCode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorUnauthorizedError$ {
  /** @deprecated use `ErrorUnauthorizedError$inboundSchema` instead. */
  export const inboundSchema = ErrorUnauthorizedError$inboundSchema;
  /** @deprecated use `ErrorUnauthorizedError$outboundSchema` instead. */
  export const outboundSchema = ErrorUnauthorizedError$outboundSchema;
  /** @deprecated use `ErrorUnauthorizedError$Outbound` instead. */
  export type Outbound = ErrorUnauthorizedError$Outbound;
}

export function errorUnauthorizedErrorToJSON(
  errorUnauthorizedError: ErrorUnauthorizedError,
): string {
  return JSON.stringify(
    ErrorUnauthorizedError$outboundSchema.parse(errorUnauthorizedError),
  );
}

export function errorUnauthorizedErrorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorUnauthorizedError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorUnauthorizedError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorUnauthorizedError' from JSON`,
  );
}
