/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod/v3";
import { remap as remap$ } from "../lib/primitives.js";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * A list of links to resources that may be helpful in resolving the error.
 */
export type ErrorNotFoundErrorLinks = {
  about?: string | undefined;
};

/**
 * Location in the request that may have caused the error.
 */
export type ErrorNotFoundErrorSource = {
  /**
   * The name of the parameter that caused the error.
   */
  parameter?: string | undefined;
  /**
   * A JSON Pointer to the location in the request that caused the error.
   */
  pointer?: string | undefined;
  /**
   * The name of the header that caused the error.
   */
  header?: string | undefined;
};

/**
 * Additional information about the error.
 */
export type ErrorNotFoundErrorMeta = {
  /**
   * A UUID for the originating request.
   */
  requestId?: string | undefined;
  /**
   * An ID used for tracing purposes.
   */
  traceId?: string | undefined;
};

/**
 * A code that indicates what went wrong.
 */
export const ErrorNotFoundErrorCode = {
  RecordNotFound: "RECORD_NOT_FOUND",
  NotFound: "NOT_FOUND",
} as const;
/**
 * A code that indicates what went wrong.
 */
export type ErrorNotFoundErrorCode = ClosedEnum<typeof ErrorNotFoundErrorCode>;

export type ErrorNotFoundError = {
  /**
   * The HTTP status code for the error.
   */
  status: string;
  /**
   * A message that explains the meaning of the error code. Developers are advised not to make programmatic use of this value, as it may change
   */
  detail: string;
  /**
   * A list of links to resources that may be helpful in resolving the error.
   */
  links: ErrorNotFoundErrorLinks;
  /**
   * Location in the request that may have caused the error.
   */
  source?: ErrorNotFoundErrorSource | undefined;
  /**
   * Additional information about the error.
   */
  meta: ErrorNotFoundErrorMeta;
  /**
   * A code that indicates what went wrong.
   */
  code: ErrorNotFoundErrorCode;
};

/** @internal */
export const ErrorNotFoundErrorLinks$inboundSchema: z.ZodType<
  ErrorNotFoundErrorLinks,
  z.ZodTypeDef,
  unknown
> = z.object({
  about: z.string().optional(),
});

/** @internal */
export type ErrorNotFoundErrorLinks$Outbound = {
  about?: string | undefined;
};

/** @internal */
export const ErrorNotFoundErrorLinks$outboundSchema: z.ZodType<
  ErrorNotFoundErrorLinks$Outbound,
  z.ZodTypeDef,
  ErrorNotFoundErrorLinks
> = z.object({
  about: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorNotFoundErrorLinks$ {
  /** @deprecated use `ErrorNotFoundErrorLinks$inboundSchema` instead. */
  export const inboundSchema = ErrorNotFoundErrorLinks$inboundSchema;
  /** @deprecated use `ErrorNotFoundErrorLinks$outboundSchema` instead. */
  export const outboundSchema = ErrorNotFoundErrorLinks$outboundSchema;
  /** @deprecated use `ErrorNotFoundErrorLinks$Outbound` instead. */
  export type Outbound = ErrorNotFoundErrorLinks$Outbound;
}

export function errorNotFoundErrorLinksToJSON(
  errorNotFoundErrorLinks: ErrorNotFoundErrorLinks,
): string {
  return JSON.stringify(
    ErrorNotFoundErrorLinks$outboundSchema.parse(errorNotFoundErrorLinks),
  );
}

export function errorNotFoundErrorLinksFromJSON(
  jsonString: string,
): SafeParseResult<ErrorNotFoundErrorLinks, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorNotFoundErrorLinks$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorNotFoundErrorLinks' from JSON`,
  );
}

/** @internal */
export const ErrorNotFoundErrorSource$inboundSchema: z.ZodType<
  ErrorNotFoundErrorSource,
  z.ZodTypeDef,
  unknown
> = z.object({
  parameter: z.string().optional(),
  pointer: z.string().optional(),
  header: z.string().optional(),
});

/** @internal */
export type ErrorNotFoundErrorSource$Outbound = {
  parameter?: string | undefined;
  pointer?: string | undefined;
  header?: string | undefined;
};

/** @internal */
export const ErrorNotFoundErrorSource$outboundSchema: z.ZodType<
  ErrorNotFoundErrorSource$Outbound,
  z.ZodTypeDef,
  ErrorNotFoundErrorSource
> = z.object({
  parameter: z.string().optional(),
  pointer: z.string().optional(),
  header: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorNotFoundErrorSource$ {
  /** @deprecated use `ErrorNotFoundErrorSource$inboundSchema` instead. */
  export const inboundSchema = ErrorNotFoundErrorSource$inboundSchema;
  /** @deprecated use `ErrorNotFoundErrorSource$outboundSchema` instead. */
  export const outboundSchema = ErrorNotFoundErrorSource$outboundSchema;
  /** @deprecated use `ErrorNotFoundErrorSource$Outbound` instead. */
  export type Outbound = ErrorNotFoundErrorSource$Outbound;
}

export function errorNotFoundErrorSourceToJSON(
  errorNotFoundErrorSource: ErrorNotFoundErrorSource,
): string {
  return JSON.stringify(
    ErrorNotFoundErrorSource$outboundSchema.parse(errorNotFoundErrorSource),
  );
}

export function errorNotFoundErrorSourceFromJSON(
  jsonString: string,
): SafeParseResult<ErrorNotFoundErrorSource, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorNotFoundErrorSource$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorNotFoundErrorSource' from JSON`,
  );
}

/** @internal */
export const ErrorNotFoundErrorMeta$inboundSchema: z.ZodType<
  ErrorNotFoundErrorMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  request_id: z.string().optional(),
  trace_id: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "request_id": "requestId",
    "trace_id": "traceId",
  });
});

/** @internal */
export type ErrorNotFoundErrorMeta$Outbound = {
  request_id?: string | undefined;
  trace_id?: string | undefined;
};

/** @internal */
export const ErrorNotFoundErrorMeta$outboundSchema: z.ZodType<
  ErrorNotFoundErrorMeta$Outbound,
  z.ZodTypeDef,
  ErrorNotFoundErrorMeta
> = z.object({
  requestId: z.string().optional(),
  traceId: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    requestId: "request_id",
    traceId: "trace_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorNotFoundErrorMeta$ {
  /** @deprecated use `ErrorNotFoundErrorMeta$inboundSchema` instead. */
  export const inboundSchema = ErrorNotFoundErrorMeta$inboundSchema;
  /** @deprecated use `ErrorNotFoundErrorMeta$outboundSchema` instead. */
  export const outboundSchema = ErrorNotFoundErrorMeta$outboundSchema;
  /** @deprecated use `ErrorNotFoundErrorMeta$Outbound` instead. */
  export type Outbound = ErrorNotFoundErrorMeta$Outbound;
}

export function errorNotFoundErrorMetaToJSON(
  errorNotFoundErrorMeta: ErrorNotFoundErrorMeta,
): string {
  return JSON.stringify(
    ErrorNotFoundErrorMeta$outboundSchema.parse(errorNotFoundErrorMeta),
  );
}

export function errorNotFoundErrorMetaFromJSON(
  jsonString: string,
): SafeParseResult<ErrorNotFoundErrorMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorNotFoundErrorMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorNotFoundErrorMeta' from JSON`,
  );
}

/** @internal */
export const ErrorNotFoundErrorCode$inboundSchema: z.ZodNativeEnum<
  typeof ErrorNotFoundErrorCode
> = z.nativeEnum(ErrorNotFoundErrorCode);

/** @internal */
export const ErrorNotFoundErrorCode$outboundSchema: z.ZodNativeEnum<
  typeof ErrorNotFoundErrorCode
> = ErrorNotFoundErrorCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorNotFoundErrorCode$ {
  /** @deprecated use `ErrorNotFoundErrorCode$inboundSchema` instead. */
  export const inboundSchema = ErrorNotFoundErrorCode$inboundSchema;
  /** @deprecated use `ErrorNotFoundErrorCode$outboundSchema` instead. */
  export const outboundSchema = ErrorNotFoundErrorCode$outboundSchema;
}

/** @internal */
export const ErrorNotFoundError$inboundSchema: z.ZodType<
  ErrorNotFoundError,
  z.ZodTypeDef,
  unknown
> = z.object({
  status: z.string(),
  detail: z.string(),
  links: z.lazy(() => ErrorNotFoundErrorLinks$inboundSchema),
  source: z.lazy(() => ErrorNotFoundErrorSource$inboundSchema).optional(),
  meta: z.lazy(() => ErrorNotFoundErrorMeta$inboundSchema),
  code: ErrorNotFoundErrorCode$inboundSchema,
});

/** @internal */
export type ErrorNotFoundError$Outbound = {
  status: string;
  detail: string;
  links: ErrorNotFoundErrorLinks$Outbound;
  source?: ErrorNotFoundErrorSource$Outbound | undefined;
  meta: ErrorNotFoundErrorMeta$Outbound;
  code: string;
};

/** @internal */
export const ErrorNotFoundError$outboundSchema: z.ZodType<
  ErrorNotFoundError$Outbound,
  z.ZodTypeDef,
  ErrorNotFoundError
> = z.object({
  status: z.string(),
  detail: z.string(),
  links: z.lazy(() => ErrorNotFoundErrorLinks$outboundSchema),
  source: z.lazy(() => ErrorNotFoundErrorSource$outboundSchema).optional(),
  meta: z.lazy(() => ErrorNotFoundErrorMeta$outboundSchema),
  code: ErrorNotFoundErrorCode$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorNotFoundError$ {
  /** @deprecated use `ErrorNotFoundError$inboundSchema` instead. */
  export const inboundSchema = ErrorNotFoundError$inboundSchema;
  /** @deprecated use `ErrorNotFoundError$outboundSchema` instead. */
  export const outboundSchema = ErrorNotFoundError$outboundSchema;
  /** @deprecated use `ErrorNotFoundError$Outbound` instead. */
  export type Outbound = ErrorNotFoundError$Outbound;
}

export function errorNotFoundErrorToJSON(
  errorNotFoundError: ErrorNotFoundError,
): string {
  return JSON.stringify(
    ErrorNotFoundError$outboundSchema.parse(errorNotFoundError),
  );
}

export function errorNotFoundErrorFromJSON(
  jsonString: string,
): SafeParseResult<ErrorNotFoundError, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorNotFoundError$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorNotFoundError' from JSON`,
  );
}
