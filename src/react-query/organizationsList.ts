/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SDKCore } from "../core.js";
import { organizationsList } from "../funcs/organizationsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useSDKContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type OrganizationsListQueryData = operations.ListOrganizationsResponse;

/**
 * List organizations
 *
 * @remarks
 * Get organizations with an optional filter
 */
export function useOrganizationsList(
  request?: operations.ListOrganizationsRequest | undefined,
  options?: QueryHookOptions<OrganizationsListQueryData>,
): UseQueryResult<OrganizationsListQueryData, Error> {
  const client = useSDKContext();
  return useQuery({
    ...buildOrganizationsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * List organizations
 *
 * @remarks
 * Get organizations with an optional filter
 */
export function useOrganizationsListSuspense(
  request?: operations.ListOrganizationsRequest | undefined,
  options?: SuspenseQueryHookOptions<OrganizationsListQueryData>,
): UseSuspenseQueryResult<OrganizationsListQueryData, Error> {
  const client = useSDKContext();
  return useSuspenseQuery({
    ...buildOrganizationsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchOrganizationsList(
  queryClient: QueryClient,
  client$: SDKCore,
  request?: operations.ListOrganizationsRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOrganizationsListQuery(
      client$,
      request,
    ),
  });
}

export function setOrganizationsListData(
  client: QueryClient,
  queryKeyBase: [parameters: { filterBy?: string | undefined }],
  data: OrganizationsListQueryData,
): OrganizationsListQueryData | undefined {
  const key = queryKeyOrganizationsList(...queryKeyBase);

  return client.setQueryData<OrganizationsListQueryData>(key, data);
}

export function invalidateOrganizationsList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: { filterBy?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Organizations", "list", ...queryKeyBase],
  });
}

export function invalidateAllOrganizationsList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Organizations", "list"],
  });
}

export function buildOrganizationsListQuery(
  client$: SDKCore,
  request?: operations.ListOrganizationsRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<OrganizationsListQueryData>;
} {
  return {
    queryKey: queryKeyOrganizationsList({ filterBy: request?.filterBy }),
    queryFn: async function organizationsListQueryFn(
      ctx,
    ): Promise<OrganizationsListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(organizationsList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOrganizationsList(
  parameters: { filterBy?: string | undefined },
): QueryKey {
  return ["@dailypay/dailypay", "Organizations", "list", parameters];
}
