/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { SDKCore } from "../core.js";
import { transfersCreate } from "../funcs/transfersCreate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useSDKContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type TransfersCreateMutationVariables = {
  request: operations.CreateTransferRequest;
  options?: RequestOptions;
};

export type TransfersCreateMutationData = operations.CreateTransferResponse;

/**
 * Request a transfer
 *
 * @remarks
 * Request transfer of funds from an `EARNINGS_BALANCE` account to a
 * personal `DEPOSITORY` or `CARD` account.
 */
export function useTransfersCreateMutation(
  options?: MutationHookOptions<
    TransfersCreateMutationData,
    Error,
    TransfersCreateMutationVariables
  >,
): UseMutationResult<
  TransfersCreateMutationData,
  Error,
  TransfersCreateMutationVariables
> {
  const client = useSDKContext();
  return useMutation({
    ...buildTransfersCreateMutation(client, options),
    ...options,
  });
}

export function mutationKeyTransfersCreate(): MutationKey {
  return ["@dailypay/dailypay", "Transfers", "create"];
}

export function buildTransfersCreateMutation(
  client$: SDKCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: TransfersCreateMutationVariables,
  ) => Promise<TransfersCreateMutationData>;
} {
  return {
    mutationKey: mutationKeyTransfersCreate(),
    mutationFn: function transfersCreateMutationFn({
      request,
      options,
    }): Promise<TransfersCreateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(transfersCreate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
