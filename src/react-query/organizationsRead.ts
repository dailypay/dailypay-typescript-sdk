/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SDKCore } from "../core.js";
import { organizationsRead } from "../funcs/organizationsRead.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useSDKContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type OrganizationsReadQueryData = operations.ReadOrganizationResponse;

/**
 * Get an organization
 *
 * @remarks
 * Lookup organization by ID for a detailed view of single organization.
 */
export function useOrganizationsRead(
  request: operations.ReadOrganizationRequest,
  options?: QueryHookOptions<OrganizationsReadQueryData>,
): UseQueryResult<OrganizationsReadQueryData, Error> {
  const client = useSDKContext();
  return useQuery({
    ...buildOrganizationsReadQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get an organization
 *
 * @remarks
 * Lookup organization by ID for a detailed view of single organization.
 */
export function useOrganizationsReadSuspense(
  request: operations.ReadOrganizationRequest,
  options?: SuspenseQueryHookOptions<OrganizationsReadQueryData>,
): UseSuspenseQueryResult<OrganizationsReadQueryData, Error> {
  const client = useSDKContext();
  return useSuspenseQuery({
    ...buildOrganizationsReadQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchOrganizationsRead(
  queryClient: QueryClient,
  client$: SDKCore,
  request: operations.ReadOrganizationRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildOrganizationsReadQuery(
      client$,
      request,
    ),
  });
}

export function setOrganizationsReadData(
  client: QueryClient,
  queryKeyBase: [organizationId: string],
  data: OrganizationsReadQueryData,
): OrganizationsReadQueryData | undefined {
  const key = queryKeyOrganizationsRead(...queryKeyBase);

  return client.setQueryData<OrganizationsReadQueryData>(key, data);
}

export function invalidateOrganizationsRead(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[organizationId: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Organizations", "read", ...queryKeyBase],
  });
}

export function invalidateAllOrganizationsRead(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Organizations", "read"],
  });
}

export function buildOrganizationsReadQuery(
  client$: SDKCore,
  request: operations.ReadOrganizationRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (
    context: QueryFunctionContext,
  ) => Promise<OrganizationsReadQueryData>;
} {
  return {
    queryKey: queryKeyOrganizationsRead(request.organizationId),
    queryFn: async function organizationsReadQueryFn(
      ctx,
    ): Promise<OrganizationsReadQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(organizationsRead(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyOrganizationsRead(organizationId: string): QueryKey {
  return ["@dailypay/dailypay", "Organizations", "read", organizationId];
}
