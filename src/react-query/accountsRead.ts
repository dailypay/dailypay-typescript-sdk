/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SDKCore } from "../core.js";
import { accountsRead } from "../funcs/accountsRead.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useSDKContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type AccountsReadQueryData = operations.ReadAccountResponse;

/**
 * Get an Account object
 *
 * @remarks
 * Returns details about an account. This object represents a person's bank accounts, debit and pay cards, and earnings balance accounts.
 */
export function useAccountsRead(
  request: operations.ReadAccountRequest,
  options?: QueryHookOptions<AccountsReadQueryData>,
): UseQueryResult<AccountsReadQueryData, Error> {
  const client = useSDKContext();
  return useQuery({
    ...buildAccountsReadQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get an Account object
 *
 * @remarks
 * Returns details about an account. This object represents a person's bank accounts, debit and pay cards, and earnings balance accounts.
 */
export function useAccountsReadSuspense(
  request: operations.ReadAccountRequest,
  options?: SuspenseQueryHookOptions<AccountsReadQueryData>,
): UseSuspenseQueryResult<AccountsReadQueryData, Error> {
  const client = useSDKContext();
  return useSuspenseQuery({
    ...buildAccountsReadQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchAccountsRead(
  queryClient: QueryClient,
  client$: SDKCore,
  request: operations.ReadAccountRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildAccountsReadQuery(
      client$,
      request,
    ),
  });
}

export function setAccountsReadData(
  client: QueryClient,
  queryKeyBase: [accountId: string],
  data: AccountsReadQueryData,
): AccountsReadQueryData | undefined {
  const key = queryKeyAccountsRead(...queryKeyBase);

  return client.setQueryData<AccountsReadQueryData>(key, data);
}

export function invalidateAccountsRead(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[accountId: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Accounts", "read", ...queryKeyBase],
  });
}

export function invalidateAllAccountsRead(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Accounts", "read"],
  });
}

export function buildAccountsReadQuery(
  client$: SDKCore,
  request: operations.ReadAccountRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<AccountsReadQueryData>;
} {
  return {
    queryKey: queryKeyAccountsRead(request.accountId),
    queryFn: async function accountsReadQueryFn(
      ctx,
    ): Promise<AccountsReadQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(accountsRead(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyAccountsRead(accountId: string): QueryKey {
  return ["@dailypay/dailypay", "Accounts", "read", accountId];
}
