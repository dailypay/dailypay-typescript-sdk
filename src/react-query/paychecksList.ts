/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SDKCore } from "../core.js";
import { paychecksList } from "../funcs/paychecksList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useSDKContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type PaychecksListQueryData = operations.ListPaychecksResponse;

/**
 * Get a list of paycheck objects
 *
 * @remarks
 * Returns a collection of paycheck objects. This object details a person's pay and pay period.
 * See [Filtering Paychecks](https://developer.dailypay.com/tag/Filtering#section/Supported-Endpoint-Filters) for a description of filterable fields.
 */
export function usePaychecksList(
  request?: operations.ListPaychecksRequest | undefined,
  options?: QueryHookOptions<PaychecksListQueryData>,
): UseQueryResult<PaychecksListQueryData, Error> {
  const client = useSDKContext();
  return useQuery({
    ...buildPaychecksListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a list of paycheck objects
 *
 * @remarks
 * Returns a collection of paycheck objects. This object details a person's pay and pay period.
 * See [Filtering Paychecks](https://developer.dailypay.com/tag/Filtering#section/Supported-Endpoint-Filters) for a description of filterable fields.
 */
export function usePaychecksListSuspense(
  request?: operations.ListPaychecksRequest | undefined,
  options?: SuspenseQueryHookOptions<PaychecksListQueryData>,
): UseSuspenseQueryResult<PaychecksListQueryData, Error> {
  const client = useSDKContext();
  return useSuspenseQuery({
    ...buildPaychecksListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchPaychecksList(
  queryClient: QueryClient,
  client$: SDKCore,
  request?: operations.ListPaychecksRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildPaychecksListQuery(
      client$,
      request,
    ),
  });
}

export function setPaychecksListData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      filterJobId?: string | undefined;
      filterStatus?: models.FilterPaycheckStatus | undefined;
      filterDepositExpectedAtGte?: Date | undefined;
      filterDepositExpectedAtLt?: Date | undefined;
      filterPayPeriodEndsAtGte?: Date | undefined;
      filterPayPeriodEndsAtLt?: Date | undefined;
      filterPayPeriodStartsAtGte?: Date | undefined;
      filterPayPeriodStartsAtLt?: Date | undefined;
      filterBy?: string | undefined;
    },
  ],
  data: PaychecksListQueryData,
): PaychecksListQueryData | undefined {
  const key = queryKeyPaychecksList(...queryKeyBase);

  return client.setQueryData<PaychecksListQueryData>(key, data);
}

export function invalidatePaychecksList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      filterJobId?: string | undefined;
      filterStatus?: models.FilterPaycheckStatus | undefined;
      filterDepositExpectedAtGte?: Date | undefined;
      filterDepositExpectedAtLt?: Date | undefined;
      filterPayPeriodEndsAtGte?: Date | undefined;
      filterPayPeriodEndsAtLt?: Date | undefined;
      filterPayPeriodStartsAtGte?: Date | undefined;
      filterPayPeriodStartsAtLt?: Date | undefined;
      filterBy?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Paychecks", "list", ...queryKeyBase],
  });
}

export function invalidateAllPaychecksList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Paychecks", "list"],
  });
}

export function buildPaychecksListQuery(
  client$: SDKCore,
  request?: operations.ListPaychecksRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<PaychecksListQueryData>;
} {
  return {
    queryKey: queryKeyPaychecksList({
      filterJobId: request?.filterJobId,
      filterStatus: request?.filterStatus,
      filterDepositExpectedAtGte: request?.filterDepositExpectedAtGte,
      filterDepositExpectedAtLt: request?.filterDepositExpectedAtLt,
      filterPayPeriodEndsAtGte: request?.filterPayPeriodEndsAtGte,
      filterPayPeriodEndsAtLt: request?.filterPayPeriodEndsAtLt,
      filterPayPeriodStartsAtGte: request?.filterPayPeriodStartsAtGte,
      filterPayPeriodStartsAtLt: request?.filterPayPeriodStartsAtLt,
      filterBy: request?.filterBy,
    }),
    queryFn: async function paychecksListQueryFn(
      ctx,
    ): Promise<PaychecksListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(paychecksList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyPaychecksList(
  parameters: {
    filterJobId?: string | undefined;
    filterStatus?: models.FilterPaycheckStatus | undefined;
    filterDepositExpectedAtGte?: Date | undefined;
    filterDepositExpectedAtLt?: Date | undefined;
    filterPayPeriodEndsAtGte?: Date | undefined;
    filterPayPeriodEndsAtLt?: Date | undefined;
    filterPayPeriodStartsAtGte?: Date | undefined;
    filterPayPeriodStartsAtLt?: Date | undefined;
    filterBy?: string | undefined;
  },
): QueryKey {
  return ["@dailypay/dailypay", "Paychecks", "list", parameters];
}
