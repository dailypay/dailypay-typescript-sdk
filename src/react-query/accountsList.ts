/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SDKCore } from "../core.js";
import { accountsList } from "../funcs/accountsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useSDKContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type AccountsListQueryData = operations.ListAccountsResponse;

/**
 * Get a list of Account objects
 *
 * @remarks
 * Returns a list of account objects. An account object represents a person's bank accounts, debit and pay cards, and earnings balance accounts.
 * See [Filtering Accounts](https://developer.dailypay.com/tag/Filtering#section/Supported-Endpoint-Filters) for a description of filterable fields.
 */
export function useAccountsList(
  request?: operations.ListAccountsRequest | undefined,
  options?: QueryHookOptions<AccountsListQueryData>,
): UseQueryResult<AccountsListQueryData, Error> {
  const client = useSDKContext();
  return useQuery({
    ...buildAccountsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a list of Account objects
 *
 * @remarks
 * Returns a list of account objects. An account object represents a person's bank accounts, debit and pay cards, and earnings balance accounts.
 * See [Filtering Accounts](https://developer.dailypay.com/tag/Filtering#section/Supported-Endpoint-Filters) for a description of filterable fields.
 */
export function useAccountsListSuspense(
  request?: operations.ListAccountsRequest | undefined,
  options?: SuspenseQueryHookOptions<AccountsListQueryData>,
): UseSuspenseQueryResult<AccountsListQueryData, Error> {
  const client = useSDKContext();
  return useSuspenseQuery({
    ...buildAccountsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchAccountsList(
  queryClient: QueryClient,
  client$: SDKCore,
  request?: operations.ListAccountsRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildAccountsListQuery(
      client$,
      request,
    ),
  });
}

export function setAccountsListData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      filterPersonId?: string | undefined;
      filterAccountType?: models.FilterAccountType | undefined;
      filterSubtype?: string | undefined;
      filterBy?: string | undefined;
    },
  ],
  data: AccountsListQueryData,
): AccountsListQueryData | undefined {
  const key = queryKeyAccountsList(...queryKeyBase);

  return client.setQueryData<AccountsListQueryData>(key, data);
}

export function invalidateAccountsList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      filterPersonId?: string | undefined;
      filterAccountType?: models.FilterAccountType | undefined;
      filterSubtype?: string | undefined;
      filterBy?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Accounts", "list", ...queryKeyBase],
  });
}

export function invalidateAllAccountsList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Accounts", "list"],
  });
}

export function buildAccountsListQuery(
  client$: SDKCore,
  request?: operations.ListAccountsRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<AccountsListQueryData>;
} {
  return {
    queryKey: queryKeyAccountsList({
      filterPersonId: request?.filterPersonId,
      filterAccountType: request?.filterAccountType,
      filterSubtype: request?.filterSubtype,
      filterBy: request?.filterBy,
    }),
    queryFn: async function accountsListQueryFn(
      ctx,
    ): Promise<AccountsListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(accountsList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyAccountsList(
  parameters: {
    filterPersonId?: string | undefined;
    filterAccountType?: models.FilterAccountType | undefined;
    filterSubtype?: string | undefined;
    filterBy?: string | undefined;
  },
): QueryKey {
  return ["@dailypay/dailypay", "Accounts", "list", parameters];
}
