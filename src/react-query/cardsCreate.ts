/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { SDKCore } from "../core.js";
import { cardsCreate } from "../funcs/cardsCreate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useSDKContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type CardsCreateMutationVariables = {
  request: operations.CreateGenericCardTokenRequest;
  options?: RequestOptions;
};

export type CardsCreateMutationData = operations.CreateGenericCardTokenResponse;

/**
 * Obtain a card token
 *
 * @remarks
 * Obtain a PCI DSS Compliant card token. This token must be used in order to add a card to a userâ€™s DailyPay account.
 */
export function useCardsCreateMutation(
  options?: MutationHookOptions<
    CardsCreateMutationData,
    Error,
    CardsCreateMutationVariables
  >,
): UseMutationResult<
  CardsCreateMutationData,
  Error,
  CardsCreateMutationVariables
> {
  const client = useSDKContext();
  return useMutation({
    ...buildCardsCreateMutation(client, options),
    ...options,
  });
}

export function mutationKeyCardsCreate(): MutationKey {
  return ["@dailypay/dailypay", "Cards", "create"];
}

export function buildCardsCreateMutation(
  client$: SDKCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: CardsCreateMutationVariables,
  ) => Promise<CardsCreateMutationData>;
} {
  return {
    mutationKey: mutationKeyCardsCreate(),
    mutationFn: function cardsCreateMutationFn({
      request,
      options,
    }): Promise<CardsCreateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(cardsCreate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
