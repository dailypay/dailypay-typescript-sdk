/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SDKCore } from "../core.js";
import { jobsRead } from "../funcs/jobsRead.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useSDKContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type JobsReadQueryData = operations.ReadJobResponse;

/**
 * Get a job object
 *
 * @remarks
 * Returns details about a person's employment.
 */
export function useJobsRead(
  request: operations.ReadJobRequest,
  options?: QueryHookOptions<JobsReadQueryData>,
): UseQueryResult<JobsReadQueryData, Error> {
  const client = useSDKContext();
  return useQuery({
    ...buildJobsReadQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a job object
 *
 * @remarks
 * Returns details about a person's employment.
 */
export function useJobsReadSuspense(
  request: operations.ReadJobRequest,
  options?: SuspenseQueryHookOptions<JobsReadQueryData>,
): UseSuspenseQueryResult<JobsReadQueryData, Error> {
  const client = useSDKContext();
  return useSuspenseQuery({
    ...buildJobsReadQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchJobsRead(
  queryClient: QueryClient,
  client$: SDKCore,
  request: operations.ReadJobRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildJobsReadQuery(
      client$,
      request,
    ),
  });
}

export function setJobsReadData(
  client: QueryClient,
  queryKeyBase: [jobId: string],
  data: JobsReadQueryData,
): JobsReadQueryData | undefined {
  const key = queryKeyJobsRead(...queryKeyBase);

  return client.setQueryData<JobsReadQueryData>(key, data);
}

export function invalidateJobsRead(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<[jobId: string]>,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Jobs", "read", ...queryKeyBase],
  });
}

export function invalidateAllJobsRead(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Jobs", "read"],
  });
}

export function buildJobsReadQuery(
  client$: SDKCore,
  request: operations.ReadJobRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<JobsReadQueryData>;
} {
  return {
    queryKey: queryKeyJobsRead(request.jobId),
    queryFn: async function jobsReadQueryFn(ctx): Promise<JobsReadQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(jobsRead(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyJobsRead(jobId: string): QueryKey {
  return ["@dailypay/dailypay", "Jobs", "read", jobId];
}
