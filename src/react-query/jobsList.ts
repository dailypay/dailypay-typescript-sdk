/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SDKCore } from "../core.js";
import { jobsList } from "../funcs/jobsList.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useSDKContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type JobsListQueryData = operations.ListJobsResponse;

/**
 * Get a list of job objects
 *
 * @remarks
 * Returns a collection of job objects. This object represents a person's employment details.
 * See [Filtering Jobs](https://developer.dailypay.com/tag/Filtering#section/Supported-Endpoint-Filters) for a description of filterable fields.
 */
export function useJobsList(
  request?: operations.ListJobsRequest | undefined,
  options?: QueryHookOptions<JobsListQueryData>,
): UseQueryResult<JobsListQueryData, Error> {
  const client = useSDKContext();
  return useQuery({
    ...buildJobsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a list of job objects
 *
 * @remarks
 * Returns a collection of job objects. This object represents a person's employment details.
 * See [Filtering Jobs](https://developer.dailypay.com/tag/Filtering#section/Supported-Endpoint-Filters) for a description of filterable fields.
 */
export function useJobsListSuspense(
  request?: operations.ListJobsRequest | undefined,
  options?: SuspenseQueryHookOptions<JobsListQueryData>,
): UseSuspenseQueryResult<JobsListQueryData, Error> {
  const client = useSDKContext();
  return useSuspenseQuery({
    ...buildJobsListQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchJobsList(
  queryClient: QueryClient,
  client$: SDKCore,
  request?: operations.ListJobsRequest | undefined,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildJobsListQuery(
      client$,
      request,
    ),
  });
}

export function setJobsListData(
  client: QueryClient,
  queryKeyBase: [
    parameters: {
      filterExternalIdentifiersPrimaryIdentifier?: string | undefined;
      filterExternalIdentifiersEmployeeId?: string | undefined;
      filterExternalIdentifiersGroup?: string | undefined;
      filterPersonId?: string | undefined;
      filterOrganizationId?: string | undefined;
      filterBy?: string | undefined;
    },
  ],
  data: JobsListQueryData,
): JobsListQueryData | undefined {
  const key = queryKeyJobsList(...queryKeyBase);

  return client.setQueryData<JobsListQueryData>(key, data);
}

export function invalidateJobsList(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [parameters: {
      filterExternalIdentifiersPrimaryIdentifier?: string | undefined;
      filterExternalIdentifiersEmployeeId?: string | undefined;
      filterExternalIdentifiersGroup?: string | undefined;
      filterPersonId?: string | undefined;
      filterOrganizationId?: string | undefined;
      filterBy?: string | undefined;
    }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Jobs", "list", ...queryKeyBase],
  });
}

export function invalidateAllJobsList(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Jobs", "list"],
  });
}

export function buildJobsListQuery(
  client$: SDKCore,
  request?: operations.ListJobsRequest | undefined,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<JobsListQueryData>;
} {
  return {
    queryKey: queryKeyJobsList({
      filterExternalIdentifiersPrimaryIdentifier: request
        ?.filterExternalIdentifiersPrimaryIdentifier,
      filterExternalIdentifiersEmployeeId: request
        ?.filterExternalIdentifiersEmployeeId,
      filterExternalIdentifiersGroup: request?.filterExternalIdentifiersGroup,
      filterPersonId: request?.filterPersonId,
      filterOrganizationId: request?.filterOrganizationId,
      filterBy: request?.filterBy,
    }),
    queryFn: async function jobsListQueryFn(ctx): Promise<JobsListQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(jobsList(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyJobsList(
  parameters: {
    filterExternalIdentifiersPrimaryIdentifier?: string | undefined;
    filterExternalIdentifiersEmployeeId?: string | undefined;
    filterExternalIdentifiersGroup?: string | undefined;
    filterPersonId?: string | undefined;
    filterOrganizationId?: string | undefined;
    filterBy?: string | undefined;
  },
): QueryKey {
  return ["@dailypay/dailypay", "Jobs", "list", parameters];
}
