/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  MutationKey,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { SDKCore } from "../core.js";
import { peopleUpdate } from "../funcs/peopleUpdate.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useSDKContext } from "./_context.js";
import { MutationHookOptions } from "./_types.js";

export type PeopleUpdateMutationVariables = {
  request: operations.UpdatePersonRequest;
  options?: RequestOptions;
};

export type PeopleUpdateMutationData = operations.UpdatePersonResponse;

/**
 * Update a person
 *
 * @remarks
 * Update a person object.
 */
export function usePeopleUpdateMutation(
  options?: MutationHookOptions<
    PeopleUpdateMutationData,
    Error,
    PeopleUpdateMutationVariables
  >,
): UseMutationResult<
  PeopleUpdateMutationData,
  Error,
  PeopleUpdateMutationVariables
> {
  const client = useSDKContext();
  return useMutation({
    ...buildPeopleUpdateMutation(client, options),
    ...options,
  });
}

export function mutationKeyPeopleUpdate(): MutationKey {
  return ["@dailypay/dailypay", "People", "update"];
}

export function buildPeopleUpdateMutation(
  client$: SDKCore,
  hookOptions?: RequestOptions,
): {
  mutationKey: MutationKey;
  mutationFn: (
    variables: PeopleUpdateMutationVariables,
  ) => Promise<PeopleUpdateMutationData>;
} {
  return {
    mutationKey: mutationKeyPeopleUpdate(),
    mutationFn: function peopleUpdateMutationFn({
      request,
      options,
    }): Promise<PeopleUpdateMutationData> {
      const mergedOptions = {
        ...hookOptions,
        ...options,
        fetchOptions: {
          ...hookOptions?.fetchOptions,
          ...options?.fetchOptions,
          signal: combineSignals(
            hookOptions?.fetchOptions?.signal,
            options?.fetchOptions?.signal,
          ),
        },
      };
      return unwrapAsync(peopleUpdate(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}
