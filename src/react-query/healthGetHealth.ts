/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SDKCore } from "../core.js";
import { healthGetHealth } from "../funcs/healthGetHealth.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useSDKContext } from "./_context.js";
import { QueryHookOptions, SuspenseQueryHookOptions } from "./_types.js";

export type HealthGetHealthQueryData = operations.GetHealthResponse;

/**
 * Verify the status of the API
 *
 * @remarks
 * Returns a 200 status code if the API is up and running.
 */
export function useHealthGetHealth(
  options?: QueryHookOptions<HealthGetHealthQueryData>,
): UseQueryResult<HealthGetHealthQueryData, Error> {
  const client = useSDKContext();
  return useQuery({
    ...buildHealthGetHealthQuery(
      client,
      options,
    ),
    ...options,
  });
}

/**
 * Verify the status of the API
 *
 * @remarks
 * Returns a 200 status code if the API is up and running.
 */
export function useHealthGetHealthSuspense(
  options?: SuspenseQueryHookOptions<HealthGetHealthQueryData>,
): UseSuspenseQueryResult<HealthGetHealthQueryData, Error> {
  const client = useSDKContext();
  return useSuspenseQuery({
    ...buildHealthGetHealthQuery(
      client,
      options,
    ),
    ...options,
  });
}

export function prefetchHealthGetHealth(
  queryClient: QueryClient,
  client$: SDKCore,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildHealthGetHealthQuery(
      client$,
    ),
  });
}

export function setHealthGetHealthData(
  client: QueryClient,
  data: HealthGetHealthQueryData,
): HealthGetHealthQueryData | undefined {
  const key = queryKeyHealthGetHealth();

  return client.setQueryData<HealthGetHealthQueryData>(key, data);
}

export function invalidateAllHealthGetHealth(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Health", "getHealth"],
  });
}

export function buildHealthGetHealthQuery(
  client$: SDKCore,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<HealthGetHealthQueryData>;
} {
  return {
    queryKey: queryKeyHealthGetHealth(),
    queryFn: async function healthGetHealthQueryFn(
      ctx,
    ): Promise<HealthGetHealthQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(healthGetHealth(
        client$,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyHealthGetHealth(): QueryKey {
  return ["@dailypay/dailypay", "Health", "getHealth"];
}
