/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  InvalidateQueryFilters,
  QueryClient,
  QueryFunctionContext,
  QueryKey,
  useQuery,
  UseQueryResult,
  useSuspenseQuery,
  UseSuspenseQueryResult,
} from "@tanstack/react-query";
import { SDKCore } from "../core.js";
import { transfersRead } from "../funcs/transfersRead.js";
import { combineSignals } from "../lib/primitives.js";
import { RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";
import { useSDKContext } from "./_context.js";
import {
  QueryHookOptions,
  SuspenseQueryHookOptions,
  TupleToPrefixes,
} from "./_types.js";

export type TransfersReadQueryData = operations.ReadTransferResponse;

/**
 * Get a transfer object
 *
 * @remarks
 * Returns details about a transfer of money from one account to another.
 *
 * Created when a person takes an advance against a future paycheck, or on a daily basis when available balance is updated based on current employment.
 */
export function useTransfersRead(
  request: operations.ReadTransferRequest,
  options?: QueryHookOptions<TransfersReadQueryData>,
): UseQueryResult<TransfersReadQueryData, Error> {
  const client = useSDKContext();
  return useQuery({
    ...buildTransfersReadQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

/**
 * Get a transfer object
 *
 * @remarks
 * Returns details about a transfer of money from one account to another.
 *
 * Created when a person takes an advance against a future paycheck, or on a daily basis when available balance is updated based on current employment.
 */
export function useTransfersReadSuspense(
  request: operations.ReadTransferRequest,
  options?: SuspenseQueryHookOptions<TransfersReadQueryData>,
): UseSuspenseQueryResult<TransfersReadQueryData, Error> {
  const client = useSDKContext();
  return useSuspenseQuery({
    ...buildTransfersReadQuery(
      client,
      request,
      options,
    ),
    ...options,
  });
}

export function prefetchTransfersRead(
  queryClient: QueryClient,
  client$: SDKCore,
  request: operations.ReadTransferRequest,
): Promise<void> {
  return queryClient.prefetchQuery({
    ...buildTransfersReadQuery(
      client$,
      request,
    ),
  });
}

export function setTransfersReadData(
  client: QueryClient,
  queryKeyBase: [
    transferId: string,
    parameters: { include?: string | undefined },
  ],
  data: TransfersReadQueryData,
): TransfersReadQueryData | undefined {
  const key = queryKeyTransfersRead(...queryKeyBase);

  return client.setQueryData<TransfersReadQueryData>(key, data);
}

export function invalidateTransfersRead(
  client: QueryClient,
  queryKeyBase: TupleToPrefixes<
    [transferId: string, parameters: { include?: string | undefined }]
  >,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Transfers", "read", ...queryKeyBase],
  });
}

export function invalidateAllTransfersRead(
  client: QueryClient,
  filters?: Omit<InvalidateQueryFilters, "queryKey" | "predicate" | "exact">,
): Promise<void> {
  return client.invalidateQueries({
    ...filters,
    queryKey: ["@dailypay/dailypay", "Transfers", "read"],
  });
}

export function buildTransfersReadQuery(
  client$: SDKCore,
  request: operations.ReadTransferRequest,
  options?: RequestOptions,
): {
  queryKey: QueryKey;
  queryFn: (context: QueryFunctionContext) => Promise<TransfersReadQueryData>;
} {
  return {
    queryKey: queryKeyTransfersRead(request.transferId, {
      include: request.include,
    }),
    queryFn: async function transfersReadQueryFn(
      ctx,
    ): Promise<TransfersReadQueryData> {
      const sig = combineSignals(ctx.signal, options?.fetchOptions?.signal);
      const mergedOptions = {
        ...options,
        fetchOptions: { ...options?.fetchOptions, signal: sig },
      };

      return unwrapAsync(transfersRead(
        client$,
        request,
        mergedOptions,
      ));
    },
  };
}

export function queryKeyTransfersRead(
  transferId: string,
  parameters: { include?: string | undefined },
): QueryKey {
  return ["@dailypay/dailypay", "Transfers", "read", transferId, parameters];
}
