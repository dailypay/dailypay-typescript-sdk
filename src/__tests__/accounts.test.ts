/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { expect, test } from "vitest";
import { SDK } from "../index.js";
import { createTestHTTPClient } from "./testclient.js";

test("Accounts Read Account", async () => {
  const testHttpClient = createTestHTTPClient("readAccount");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    version: 3,
    httpClient: testHttpClient,
    security: {
      oauthUserToken: "<YOUR_OAUTH_USER_TOKEN_HERE>",
    },
  });

  const result = await sdk.accounts.read({
    accountId: "2bc7d781-3247-46f6-b60f-4090d214936a",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.accountData).toBeDefined();
  expect(result.accountData).toEqual({
    data: {
      id: "2bc7d781-3247-46f6-b60f-4090d214936a",
      type: "accounts",
      attributes: {
        verificationStatus: "VERIFIED",
        accountBalances: {
          available: 12000,
          current: 50000,
          currency: "USD",
        },
        accountCapabilities: {
          transferDestination: [
            {
              schedule: "WITHIN_THIRTY_MINUTES",
              fee: 300,
              currency: "USD",
            },
            {
              schedule: "NEXT_BUSINESS_DAY",
              fee: 0,
              currency: "USD",
            },
          ],
        },
        name: "Checking Account",
        accountType: "DEPOSITORY",
        subtype: "CHECKING",
        depositoryAccountDetails: {
          firstName: "Edith",
          lastName: "Clarke",
          routingNumber: "XXXXX2021",
          accountNumber: "XXXXXX4321",
        },
      },
      links: {
        self:
          "https://api.dailypay.com/rest/accounts/2bc7d781-3247-46f6-b60f-4090d214936a",
      },
      relationships: {
        person: {
          data: {
            type: "people",
            id: "3fa8f641-5717-4562-b3fc-2c963f66afa6",
          },
        },
      },
    },
  });
});

test("Accounts List Accounts", async () => {
  const testHttpClient = createTestHTTPClient("listAccounts");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    version: 3,
    httpClient: testHttpClient,
    security: {
      oauthUserToken: "<YOUR_OAUTH_USER_TOKEN_HERE>",
    },
  });

  const result = await sdk.accounts.list({
    filterAccountType: "EARNINGS_BALANCE",
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.accountsData).toBeDefined();
  expect(result.accountsData).toEqual({
    data: [],
  });
});

test("Accounts Create Account Depository", async () => {
  const testHttpClient = createTestHTTPClient("createAccount-Depository");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    version: 3,
    httpClient: testHttpClient,
    security: {
      oauthUserToken: "<YOUR_OAUTH_USER_TOKEN_HERE>",
    },
  });

  const result = await sdk.accounts.create({
    data: {
      type: "accounts",
      attributes: {
        name: "Acme Bank Checking Account",
        accountType: "DEPOSITORY",
        subtype: "CHECKING",
        depositoryAccountDetails: {
          firstName: "Edith",
          lastName: "Clarke",
          routingNumber: "XXXXX2021",
          accountNumber: "XXXXXX4321",
        },
      },
      relationships: {
        person: {
          data: {
            type: "people",
            id: "3fa8f641-5717-4562-b3fc-2c963f66afa6",
          },
        },
      },
    },
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.accountData).toBeDefined();
  expect(result.accountData).toEqual({
    data: {
      id: "2bc7d781-3247-46f6-b60f-4090d214936a",
      type: "accounts",
      attributes: {
        verificationStatus: "VERIFIED",
        accountBalances: {
          available: 12000,
          current: 50000,
          currency: "USD",
        },
        accountCapabilities: {
          transferDestination: [
            {
              schedule: "WITHIN_THIRTY_MINUTES",
              fee: 300,
              currency: "USD",
            },
            {
              schedule: "NEXT_BUSINESS_DAY",
              fee: 0,
              currency: "USD",
            },
          ],
        },
        name: "Checking Account",
        accountType: "DEPOSITORY",
        subtype: "CHECKING",
        depositoryAccountDetails: {
          firstName: "Edith",
          lastName: "Clarke",
          routingNumber: "XXXXX2021",
          accountNumber: "XXXXXX4321",
        },
      },
      links: {
        self:
          "https://api.dailypay.com/rest/accounts/2bc7d781-3247-46f6-b60f-4090d214936a",
      },
      relationships: {
        person: {
          data: {
            type: "people",
            id: "3fa8f641-5717-4562-b3fc-2c963f66afa6",
          },
        },
      },
    },
  });
});

test("Accounts Create Account Card", async () => {
  const testHttpClient = createTestHTTPClient("createAccount-Card");

  const sdk = new SDK({
    serverURL: process.env["TEST_SERVER_URL"] ?? "http://localhost:18080",
    version: 3,
    httpClient: testHttpClient,
    security: {
      oauthUserToken: "<YOUR_OAUTH_USER_TOKEN_HERE>",
    },
  });

  const result = await sdk.accounts.create({
    data: {
      type: "accounts",
      attributes: {
        name: "Acme Bank Debit Card",
        accountType: "CARD",
        subtype: "DEBIT",
        cardAccountDetails: {
          token: "abc.efg.123",
          issuer: "411600",
          firstName: "Edith",
          lastName: "Clarke",
          expirationMonth: "02",
          expirationYear: "2027",
          addressLineOne: "123 Kebly Street",
          addressCity: "Fort Lee",
          addressState: "NJ",
          addressZipCode: "72374",
          addressCountry: "US",
        },
      },
      relationships: {
        person: {
          data: {
            type: "people",
            id: "3fa8f641-5717-4562-b3fc-2c963f66afa6",
          },
        },
      },
    },
  });
  expect(result.httpMeta.response.status).toBe(200);
  expect(result.accountData).toBeDefined();
  expect(result.accountData).toEqual({
    data: {
      id: "2bc7d781-3247-46f6-b60f-4090d214936a",
      type: "accounts",
      attributes: {
        verificationStatus: "VERIFIED",
        accountBalances: {
          available: 12000,
          current: 50000,
          currency: "USD",
        },
        accountCapabilities: {
          transferDestination: [
            {
              schedule: "WITHIN_THIRTY_MINUTES",
              fee: 300,
              currency: "USD",
            },
            {
              schedule: "NEXT_BUSINESS_DAY",
              fee: 0,
              currency: "USD",
            },
          ],
        },
        name: "Checking Account",
        accountType: "DEPOSITORY",
        subtype: "CHECKING",
        depositoryAccountDetails: {
          firstName: "Edith",
          lastName: "Clarke",
          routingNumber: "XXXXX2021",
          accountNumber: "XXXXXX4321",
        },
      },
      links: {
        self:
          "https://api.dailypay.com/rest/accounts/2bc7d781-3247-46f6-b60f-4090d214936a",
      },
      relationships: {
        person: {
          data: {
            type: "people",
            id: "3fa8f641-5717-4562-b3fc-2c963f66afa6",
          },
        },
      },
    },
  });
});
