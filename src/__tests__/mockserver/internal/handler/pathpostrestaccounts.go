// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package handler

import (
	"fmt"
	"log"
	"mockserver/internal/handler/assert"
	"mockserver/internal/logging"
	"mockserver/internal/sdk/models/components"
	"mockserver/internal/sdk/types"
	"mockserver/internal/sdk/utils"
	"mockserver/internal/tracking"
	"net/http"
)

func pathPostRestAccounts(dir *logging.HTTPFileDirectory, rt *tracking.RequestTracker) http.HandlerFunc {
	return func(w http.ResponseWriter, req *http.Request) {
		test := req.Header.Get("x-speakeasy-test-name")
		instanceID := req.Header.Get("x-speakeasy-test-instance-id")

		count := rt.GetRequestCount(test, instanceID)

		switch fmt.Sprintf("%s[%d]", test, count) {
		case "createAccount-Depository[0]":
			dir.HandlerFunc("createAccount", testCreateAccountCreateAccountDepository0)(w, req)
		case "createAccount-Card[0]":
			dir.HandlerFunc("createAccount", testCreateAccountCreateAccountCard0)(w, req)
		default:
			http.Error(w, fmt.Sprintf("Unknown test: %s[%d]", test, count), http.StatusBadRequest)
		}
	}
}

func testCreateAccountCreateAccountDepository0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/vnd.api+json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/vnd.api+json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.AccountDataOutput = &components.AccountDataOutput{
		Data: components.AccountResourceOutput{
			ID: "2bc7d781-3247-46f6-b60f-4090d214936a",
			Attributes: components.CreateAccountAttributesOutputDepository(
				components.Depository{
					VerificationStatus: components.AccountAttributesDepositoryVerificationStatusVerified,
					AccountBalances: components.AccountAttributesDepositoryAccountBalances{
						Available: types.Int64(12000),
						Current:   types.Int64(50000),
						Currency:  "USD",
					},
					AccountCapabilities: components.AccountAttributesDepositoryAccountCapabilities{
						TransferDestination: []components.TransferDestinationCapability{
							components.TransferDestinationCapability{
								Schedule: components.TransferDestinationCapabilityScheduleWithinThirtyMinutes,
								Fee:      300,
								Currency: "USD",
							},
							components.TransferDestinationCapability{
								Schedule: components.TransferDestinationCapabilityScheduleNextBusinessDay,
								Fee:      0,
								Currency: "USD",
							},
						},
					},
					Name:    "Checking Account",
					Subtype: components.AccountAttributesDepositorySubtypeChecking,
					DepositoryAccountDetails: components.DepositoryAccountDetails{
						FirstName:     "Edith",
						LastName:      "Clarke",
						RoutingNumber: "XXXXX2021",
						AccountNumber: "XXXXXX4321",
					},
				},
			),
			Links: components.AccountLinks{
				Self: "https://api.dailypay.com/rest/accounts/2bc7d781-3247-46f6-b60f-4090d214936a",
			},
			Relationships: components.AccountRelationships{
				Person: components.PersonRelationship{
					Data: components.PersonIdentifier{
						ID: "3fa8f641-5717-4562-b3fc-2c963f66afa6",
					},
				},
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}

func testCreateAccountCreateAccountCard0(w http.ResponseWriter, req *http.Request) {
	if err := assert.SecurityAuthorizationHeader(req, true, "Bearer"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusUnauthorized)
		return
	}
	if err := assert.ContentType(req, "application/vnd.api+json", true); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.AcceptHeader(req, []string{"application/vnd.api+json"}); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	if err := assert.HeaderExists(req, "User-Agent"); err != nil {
		log.Printf("assertion error: %s\n", err)
		http.Error(w, err.Error(), http.StatusBadRequest)
		return
	}
	var respBody *components.AccountDataOutput = &components.AccountDataOutput{
		Data: components.AccountResourceOutput{
			ID: "2bc7d781-3247-46f6-b60f-4090d214936a",
			Attributes: components.CreateAccountAttributesOutputDepository(
				components.Depository{
					VerificationStatus: components.AccountAttributesDepositoryVerificationStatusVerified,
					AccountBalances: components.AccountAttributesDepositoryAccountBalances{
						Available: types.Int64(12000),
						Current:   types.Int64(50000),
						Currency:  "USD",
					},
					AccountCapabilities: components.AccountAttributesDepositoryAccountCapabilities{
						TransferDestination: []components.TransferDestinationCapability{
							components.TransferDestinationCapability{
								Schedule: components.TransferDestinationCapabilityScheduleWithinThirtyMinutes,
								Fee:      300,
								Currency: "USD",
							},
							components.TransferDestinationCapability{
								Schedule: components.TransferDestinationCapabilityScheduleNextBusinessDay,
								Fee:      0,
								Currency: "USD",
							},
						},
					},
					Name:    "Checking Account",
					Subtype: components.AccountAttributesDepositorySubtypeChecking,
					DepositoryAccountDetails: components.DepositoryAccountDetails{
						FirstName:     "Edith",
						LastName:      "Clarke",
						RoutingNumber: "XXXXX2021",
						AccountNumber: "XXXXXX4321",
					},
				},
			),
			Links: components.AccountLinks{
				Self: "https://api.dailypay.com/rest/accounts/2bc7d781-3247-46f6-b60f-4090d214936a",
			},
			Relationships: components.AccountRelationships{
				Person: components.PersonRelationship{
					Data: components.PersonIdentifier{
						ID: "3fa8f641-5717-4562-b3fc-2c963f66afa6",
					},
				},
			},
		},
	}
	respBodyBytes, err := utils.MarshalJSON(respBody, "", true)

	if err != nil {
		http.Error(
			w,
			"Unable to encode response body as JSON: "+err.Error(),
			http.StatusInternalServerError,
		)
		return
	}
	w.Header().Set("Content-Type", "application/vnd.api+json")
	w.WriteHeader(http.StatusOK)
	_, _ = w.Write(respBodyBytes)
}
