// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"errors"
	"fmt"
	"mockserver/internal/sdk/utils"
)

type OriginType string

const (
	OriginTypeAccountRelationship  OriginType = "AccountRelationship"
	OriginTypePaycheckRelationship OriginType = "PaycheckRelationship"
)

// Origin may be a reference to either a Paycheck or an Account.
//
// User-created transfers always originate from an Account with `account_type` `EARNINGS_BALANCE`.
//
// A transfer that originates from a Paycheck is a
// system-created record that describes a credit of earnings to an account with `account_type` `EARNINGS_BALANCE`.
type Origin struct {
	AccountRelationship  *AccountRelationship  `queryParam:"inline"`
	PaycheckRelationship *PaycheckRelationship `queryParam:"inline"`

	Type OriginType
}

func CreateOriginAccountRelationship(accountRelationship AccountRelationship) Origin {
	typ := OriginTypeAccountRelationship

	return Origin{
		AccountRelationship: &accountRelationship,
		Type:                typ,
	}
}

func CreateOriginPaycheckRelationship(paycheckRelationship PaycheckRelationship) Origin {
	typ := OriginTypePaycheckRelationship

	return Origin{
		PaycheckRelationship: &paycheckRelationship,
		Type:                 typ,
	}
}

func (u *Origin) UnmarshalJSON(data []byte) error {

	var accountRelationship AccountRelationship = AccountRelationship{}
	if err := utils.UnmarshalJSON(data, &accountRelationship, "", true, nil); err == nil {
		u.AccountRelationship = &accountRelationship
		u.Type = OriginTypeAccountRelationship
		return nil
	}

	var paycheckRelationship PaycheckRelationship = PaycheckRelationship{}
	if err := utils.UnmarshalJSON(data, &paycheckRelationship, "", true, nil); err == nil {
		u.PaycheckRelationship = &paycheckRelationship
		u.Type = OriginTypePaycheckRelationship
		return nil
	}

	return fmt.Errorf("could not unmarshal `%s` into any supported union types for Origin", string(data))
}

func (u Origin) MarshalJSON() ([]byte, error) {
	if u.AccountRelationship != nil {
		return utils.MarshalJSON(u.AccountRelationship, "", true)
	}

	if u.PaycheckRelationship != nil {
		return utils.MarshalJSON(u.PaycheckRelationship, "", true)
	}

	return nil, errors.New("could not marshal union type Origin: all fields are null")
}

// TransferRelationships - The relationships between the transfer and other resources, including the destination account, the origination account, and the person who initiated the transfer.
type TransferRelationships struct {
	// Origin may be a reference to either a Paycheck or an Account.
	//
	// User-created transfers always originate from an Account with `account_type` `EARNINGS_BALANCE`.
	//
	// A transfer that originates from a Paycheck is a
	// system-created record that describes a credit of earnings to an account with `account_type` `EARNINGS_BALANCE`.
	//
	Origin                  Origin                     `json:"origin"`
	Destination             AccountRelationship        `json:"destination"`
	Person                  PersonRelationship         `json:"person"`
	EstimatedFundingSources FundingSourcesRelationship `json:"estimated_funding_sources"`
	FinalFundingSources     FundingSourcesRelationship `json:"final_funding_sources"`
}

func (o *TransferRelationships) GetOrigin() Origin {
	if o == nil {
		return Origin{}
	}
	return o.Origin
}

func (o *TransferRelationships) GetDestination() AccountRelationship {
	if o == nil {
		return AccountRelationship{}
	}
	return o.Destination
}

func (o *TransferRelationships) GetPerson() PersonRelationship {
	if o == nil {
		return PersonRelationship{}
	}
	return o.Person
}

func (o *TransferRelationships) GetEstimatedFundingSources() FundingSourcesRelationship {
	if o == nil {
		return FundingSourcesRelationship{}
	}
	return o.EstimatedFundingSources
}

func (o *TransferRelationships) GetFinalFundingSources() FundingSourcesRelationship {
	if o == nil {
		return FundingSourcesRelationship{}
	}
	return o.FinalFundingSources
}
