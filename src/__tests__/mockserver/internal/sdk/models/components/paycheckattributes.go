// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// PaycheckAttributesStatus - A paycheck expected for an open pay period will have the status ESTIMATED. At the end of the pay period, the paycheck will begin PROCESSING. When it is sent, it will become IN_TRANSIT. Finally, once deposited in an account it will have the status DEPOSITED.
type PaycheckAttributesStatus string

const (
	PaycheckAttributesStatusEstimated  PaycheckAttributesStatus = "ESTIMATED"
	PaycheckAttributesStatusProcessing PaycheckAttributesStatus = "PROCESSING"
	PaycheckAttributesStatusInTransit  PaycheckAttributesStatus = "IN_TRANSIT"
	PaycheckAttributesStatusDeposited  PaycheckAttributesStatus = "DEPOSITED"
)

func (e PaycheckAttributesStatus) ToPointer() *PaycheckAttributesStatus {
	return &e
}
func (e *PaycheckAttributesStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ESTIMATED":
		fallthrough
	case "PROCESSING":
		fallthrough
	case "IN_TRANSIT":
		fallthrough
	case "DEPOSITED":
		*e = PaycheckAttributesStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for PaycheckAttributesStatus: %v", v)
	}
}

type PaycheckAttributes struct {
	// A paycheck expected for an open pay period will have the status ESTIMATED. At the end of the pay period, the paycheck will begin PROCESSING. When it is sent, it will become IN_TRANSIT. Finally, once deposited in an account it will have the status DEPOSITED.
	Status PaycheckAttributesStatus `json:"status"`
	// An ISO 8601 timestamp denoting the ending day of a paycheck's pay period. For example, a pay period that ends during the day of March 15 will have a value of 2023-03-15T04:00:00Z.
	PayPeriodEndsAt time.Time `json:"pay_period_ends_at"`
	// An ISO 8601 timestamp denoting the first day of a paycheck's pay period. For example, a pay period that starts during the day of March 15 will have a value of 2023-03-15T04:00:00Z.
	PayPeriodStartsAt time.Time `json:"pay_period_starts_at"`
	// An ISO 8601 timestamp denoting the day the paycheck is scheduled to be delivered.
	DepositExpectedAt time.Time `json:"deposit_expected_at"`
	// The amount debited and settled from this paycheck prior to the end of the pay period. Debits are settled during a pay period in order to cover withdrawals from an earnings balance account. This amount is given as a monetary quantity expressed in units of the lowest denomination in the associated currency. For example, { total_debited: 7050 } with currency USD resolves to $70.50.
	TotalDebited *int64 `json:"total_debited"`
	// The total earnings for this paycheck before any deductions are applied. This amount is given as a monetary quantity expressed in units of the lowest denomination in the associated currency. For example, { gross_earnings: 55370 } with currency USD resolves to $553.70
	GrossEarnings int64 `json:"gross_earnings"`
	// The amount withheld from this paycheck by the employer, usually for taxes. This amount is given as a monetary quantity expressed in units of the lowest denomination in the associated currency. For example, { withholdings: 5000 } with currency USD resolves to $50.00.
	EmployerWithholdings *int64 `json:"employer_withholdings"`
	// The net earnings for the paycheck once settled given in a monetary quantity expressed in units of the lowest denomination in the associated currency. For example, { earnings: 50370 } with currency USD resolves to $503.70.
	NetEarnings *int64 `json:"net_earnings"`
	// A three-letter ISO 4217 currency code. For example, `USD` for US Dollars, `EUR` for Euros, or `JPY` for Japanese Yen.
	Currency string `json:"currency"`
}

func (p PaycheckAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(p, "", false)
}

func (p *PaycheckAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &p, "", false, []string{"status", "pay_period_ends_at", "pay_period_starts_at", "deposit_expected_at", "total_debited", "gross_earnings", "employer_withholdings", "net_earnings", "currency"}); err != nil {
		return err
	}
	return nil
}

func (o *PaycheckAttributes) GetStatus() PaycheckAttributesStatus {
	if o == nil {
		return PaycheckAttributesStatus("")
	}
	return o.Status
}

func (o *PaycheckAttributes) GetPayPeriodEndsAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.PayPeriodEndsAt
}

func (o *PaycheckAttributes) GetPayPeriodStartsAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.PayPeriodStartsAt
}

func (o *PaycheckAttributes) GetDepositExpectedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.DepositExpectedAt
}

func (o *PaycheckAttributes) GetTotalDebited() *int64 {
	if o == nil {
		return nil
	}
	return o.TotalDebited
}

func (o *PaycheckAttributes) GetGrossEarnings() int64 {
	if o == nil {
		return 0
	}
	return o.GrossEarnings
}

func (o *PaycheckAttributes) GetEmployerWithholdings() *int64 {
	if o == nil {
		return nil
	}
	return o.EmployerWithholdings
}

func (o *PaycheckAttributes) GetNetEarnings() *int64 {
	if o == nil {
		return nil
	}
	return o.NetEarnings
}

func (o *PaycheckAttributes) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}
