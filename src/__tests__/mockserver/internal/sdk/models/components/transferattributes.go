// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"mockserver/internal/sdk/utils"
	"time"
)

// TransferAttributesStatus - The status of the transfer.
type TransferAttributesStatus string

const (
	TransferAttributesStatusPending TransferAttributesStatus = "PENDING"
	TransferAttributesStatusSettled TransferAttributesStatus = "SETTLED"
	TransferAttributesStatusFailed  TransferAttributesStatus = "FAILED"
)

func (e TransferAttributesStatus) ToPointer() *TransferAttributesStatus {
	return &e
}
func (e *TransferAttributesStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "PENDING":
		fallthrough
	case "SETTLED":
		fallthrough
	case "FAILED":
		*e = TransferAttributesStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferAttributesStatus: %v", v)
	}
}

// TransferAttributesSchedule - Set the schedule for the transfer. If not set, the transfer will be processed immediately.
// A preview transfer will never send.
type TransferAttributesSchedule string

const (
	TransferAttributesScheduleWithinThirtyMinutes TransferAttributesSchedule = "WITHIN_THIRTY_MINUTES"
	TransferAttributesScheduleNextBusinessDay     TransferAttributesSchedule = "NEXT_BUSINESS_DAY"
)

func (e TransferAttributesSchedule) ToPointer() *TransferAttributesSchedule {
	return &e
}
func (e *TransferAttributesSchedule) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "WITHIN_THIRTY_MINUTES":
		fallthrough
	case "NEXT_BUSINESS_DAY":
		*e = TransferAttributesSchedule(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TransferAttributesSchedule: %v", v)
	}
}

// TransferAttributes - An object representing a transfer of money from one account to another.
// Created when a person takes an advance against a future paycheck, or on a daily basis
// when we update estimated earnings based on current employment.
type TransferAttributes struct {
	// Include this field to preview a transfer without sending it, to see, for example, the fee that would be charged. This will return the same response as a typical transfer request.
	// When the preview field is true in the response to creating a transfer, that indicates no transfer was created.
	//
	Preview *bool `default:"false" json:"preview"`
	// A monetary quantity expressed in units of the lowest denomination in the associated currency. For example, `{ amount: 7250, currency: 'USD' }` resolves to $72.50.
	Amount int64 `json:"amount"`
	// A three-letter ISO 4217 currency code. For example, `USD` for US Dollars, `EUR` for Euros, or `JPY` for Japanese Yen.
	Currency string `json:"currency"`
	// The status of the transfer.
	Status TransferAttributesStatus `json:"status"`
	// Set the schedule for the transfer. If not set, the transfer will be processed immediately.
	// A preview transfer will never send.
	//
	Schedule TransferAttributesSchedule `json:"schedule"`
	// An ISO 8601 timestamp denoting the receipt for the request.
	SubmittedAt time.Time `json:"submitted_at"`
	// An ISO 8601 date denoting a successful or unsuccessful resolution for the request.
	ResolvedAt *time.Time `json:"resolved_at"`
	// A monetary quantity expressed in units of the lowest denomination in the associated currency. For example, `{ amount: 7250, currency: 'USD' }` resolves to $72.50.
	// If a transfer incurs a fee, the fee will be deducted from the amount of the transfer.
	Fee int64 `json:"fee"`
}

func (t TransferAttributes) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransferAttributes) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"amount", "currency", "status", "schedule", "submitted_at", "resolved_at", "fee"}); err != nil {
		return err
	}
	return nil
}

func (o *TransferAttributes) GetPreview() *bool {
	if o == nil {
		return nil
	}
	return o.Preview
}

func (o *TransferAttributes) GetAmount() int64 {
	if o == nil {
		return 0
	}
	return o.Amount
}

func (o *TransferAttributes) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *TransferAttributes) GetStatus() TransferAttributesStatus {
	if o == nil {
		return TransferAttributesStatus("")
	}
	return o.Status
}

func (o *TransferAttributes) GetSchedule() TransferAttributesSchedule {
	if o == nil {
		return TransferAttributesSchedule("")
	}
	return o.Schedule
}

func (o *TransferAttributes) GetSubmittedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.SubmittedAt
}

func (o *TransferAttributes) GetResolvedAt() *time.Time {
	if o == nil {
		return nil
	}
	return o.ResolvedAt
}

func (o *TransferAttributes) GetFee() int64 {
	if o == nil {
		return 0
	}
	return o.Fee
}

// TransferAttributesInput - An object representing a transfer of money from one account to another.
// Created when a person takes an advance against a future paycheck, or on a daily basis
// when we update estimated earnings based on current employment.
type TransferAttributesInput struct {
	// Include this field to preview a transfer without sending it, to see, for example, the fee that would be charged. This will return the same response as a typical transfer request.
	// When the preview field is true in the response to creating a transfer, that indicates no transfer was created.
	//
	Preview *bool `default:"false" json:"preview"`
	// A monetary quantity expressed in units of the lowest denomination in the associated currency. For example, `{ amount: 7250, currency: 'USD' }` resolves to $72.50.
	Amount int64 `json:"amount"`
	// A three-letter ISO 4217 currency code. For example, `USD` for US Dollars, `EUR` for Euros, or `JPY` for Japanese Yen.
	Currency string `json:"currency"`
	// Set the schedule for the transfer. If not set, the transfer will be processed immediately.
	// A preview transfer will never send.
	//
	Schedule TransferAttributesSchedule `json:"schedule"`
}

func (t TransferAttributesInput) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(t, "", false)
}

func (t *TransferAttributesInput) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &t, "", false, []string{"amount", "currency", "schedule"}); err != nil {
		return err
	}
	return nil
}

func (o *TransferAttributesInput) GetPreview() *bool {
	if o == nil {
		return nil
	}
	return o.Preview
}

func (o *TransferAttributesInput) GetAmount() int64 {
	if o == nil {
		return 0
	}
	return o.Amount
}

func (o *TransferAttributesInput) GetCurrency() string {
	if o == nil {
		return ""
	}
	return o.Currency
}

func (o *TransferAttributesInput) GetSchedule() TransferAttributesSchedule {
	if o == nil {
		return TransferAttributesSchedule("")
	}
	return o.Schedule
}
