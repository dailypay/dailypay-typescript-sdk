/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { accountsCreate } from "../funcs/accountsCreate.js";
import { accountsList } from "../funcs/accountsList.js";
import { accountsRead } from "../funcs/accountsRead.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Accounts extends ClientSDK {
  /**
   * Get an Account object
   *
   * @remarks
   * Returns details about an account. This object represents a person's bank accounts, debit and pay cards, and earnings balance accounts.
   */
  async read(
    request: operations.ReadAccountRequest,
    options?: RequestOptions,
  ): Promise<models.AccountDataOutput> {
    return unwrapAsync(accountsRead(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a list of Account objects
   *
   * @remarks
   * Returns a list of account objects. An account object represents a person's bank accounts, debit and pay cards, and earnings balance accounts.
   * See [Filtering Accounts](https://developer.dailypay.com/tag/Filtering#section/Supported-Endpoint-Filters) for a description of filterable fields.
   */
  async list(
    request?: operations.ListAccountsRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.AccountsData> {
    return unwrapAsync(accountsList(
      this,
      request,
      options,
    ));
  }

  /**
   * Create an Account object
   *
   * @remarks
   * Create an account object to store a person's bank or card information as a destination for funds.
   */
  async create(
    request: models.AccountDataInput,
    options?: RequestOptions,
  ): Promise<models.AccountDataOutput> {
    return unwrapAsync(accountsCreate(
      this,
      request,
      options,
    ));
  }
}
