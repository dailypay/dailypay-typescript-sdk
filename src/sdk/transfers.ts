/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transfersCreate } from "../funcs/transfersCreate.js";
import { transfersList } from "../funcs/transfersList.js";
import { transfersRead } from "../funcs/transfersRead.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as models from "../models/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Transfers extends ClientSDK {
  /**
   * Get a transfer object
   *
   * @remarks
   * Returns details about a transfer of money from one account to another.
   *
   * Created when a person takes an advance against a future paycheck, or on a daily basis when available balance is updated based on current employment.
   */
  async read(
    request: operations.ReadTransferRequest,
    options?: RequestOptions,
  ): Promise<models.TransferData> {
    return unwrapAsync(transfersRead(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a list of transfers
   *
   * @remarks
   * Returns a list of transfer objects.
   * See [Filtering Transfers](https://developer.dailypay.com/tag/Filtering#section/Supported-Endpoint-Filters) for a description of filterable fields.
   */
  async list(
    request?: operations.ListTransfersRequest | undefined,
    options?: RequestOptions,
  ): Promise<models.TransfersData> {
    return unwrapAsync(transfersList(
      this,
      request,
      options,
    ));
  }

  /**
   * Request a transfer
   *
   * @remarks
   * Request transfer of funds from an `EARNINGS_BALANCE` account to a
   * personal `DEPOSITORY` or `CARD` account.
   */
  async create(
    request: operations.CreateTransferRequest,
    options?: RequestOptions,
  ): Promise<models.TransferData> {
    return unwrapAsync(transfersCreate(
      this,
      request,
      options,
    ));
  }
}
