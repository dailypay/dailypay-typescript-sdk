/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

export type AccountIdentifier = {
  type: "accounts";
  id: string;
};

/** @internal */
export const AccountIdentifier$inboundSchema: z.ZodType<
  AccountIdentifier,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal("accounts"),
  id: z.string(),
});

/** @internal */
export type AccountIdentifier$Outbound = {
  type: "accounts";
  id: string;
};

/** @internal */
export const AccountIdentifier$outboundSchema: z.ZodType<
  AccountIdentifier$Outbound,
  z.ZodTypeDef,
  AccountIdentifier
> = z.object({
  type: z.literal("accounts"),
  id: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AccountIdentifier$ {
  /** @deprecated use `AccountIdentifier$inboundSchema` instead. */
  export const inboundSchema = AccountIdentifier$inboundSchema;
  /** @deprecated use `AccountIdentifier$outboundSchema` instead. */
  export const outboundSchema = AccountIdentifier$outboundSchema;
  /** @deprecated use `AccountIdentifier$Outbound` instead. */
  export type Outbound = AccountIdentifier$Outbound;
}

export function accountIdentifierToJSON(
  accountIdentifier: AccountIdentifier,
): string {
  return JSON.stringify(
    AccountIdentifier$outboundSchema.parse(accountIdentifier),
  );
}

export function accountIdentifierFromJSON(
  jsonString: string,
): SafeParseResult<AccountIdentifier, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AccountIdentifier$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AccountIdentifier' from JSON`,
  );
}
