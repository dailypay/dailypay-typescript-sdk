/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as models from "../index.js";
import { DailyPayError } from "./dailypayerror.js";

/**
 * Resource was not found
 */
export type ErrorNotFoundData = {
  /**
   * A list of errors that occurred.
   */
  errors: Array<models.ErrorNotFoundError>;
};

/**
 * Resource was not found
 */
export class ErrorNotFound extends DailyPayError {
  /**
   * A list of errors that occurred.
   */
  errors: Array<models.ErrorNotFoundError>;

  /** The original data that was passed to this error instance. */
  data$: ErrorNotFoundData;

  constructor(
    err: ErrorNotFoundData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.errors = err.errors;

    this.name = "ErrorNotFound";
  }
}

/** @internal */
export const ErrorNotFound$inboundSchema: z.ZodType<
  ErrorNotFound,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(models.ErrorNotFoundError$inboundSchema),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ErrorNotFound(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ErrorNotFound$Outbound = {
  errors: Array<models.ErrorNotFoundError$Outbound>;
};

/** @internal */
export const ErrorNotFound$outboundSchema: z.ZodType<
  ErrorNotFound$Outbound,
  z.ZodTypeDef,
  ErrorNotFound
> = z.instanceof(ErrorNotFound)
  .transform(v => v.data$)
  .pipe(z.object({
    errors: z.array(models.ErrorNotFoundError$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorNotFound$ {
  /** @deprecated use `ErrorNotFound$inboundSchema` instead. */
  export const inboundSchema = ErrorNotFound$inboundSchema;
  /** @deprecated use `ErrorNotFound$outboundSchema` instead. */
  export const outboundSchema = ErrorNotFound$outboundSchema;
  /** @deprecated use `ErrorNotFound$Outbound` instead. */
  export type Outbound = ErrorNotFound$Outbound;
}
