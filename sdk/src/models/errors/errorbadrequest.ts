/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as models from "../index.js";
import { SDKError } from "./sdkerror.js";

/**
 * Bad Request
 */
export type ErrorBadRequestData = {
  /**
   * A list of errors that occurred.
   */
  errors: Array<models.ErrorBadRequestError>;
};

/**
 * Bad Request
 */
export class ErrorBadRequest extends SDKError {
  /**
   * A list of errors that occurred.
   */
  errors: Array<models.ErrorBadRequestError>;

  /** The original data that was passed to this error instance. */
  data$: ErrorBadRequestData;

  constructor(
    err: ErrorBadRequestData,
    httpMeta: { response: Response; request: Request; body: string },
  ) {
    const message = "message" in err && typeof err.message === "string"
      ? err.message
      : `API error occurred: ${JSON.stringify(err)}`;
    super(message, httpMeta);
    this.data$ = err;
    this.errors = err.errors;

    this.name = "ErrorBadRequest";
  }
}

/** @internal */
export const ErrorBadRequest$inboundSchema: z.ZodType<
  ErrorBadRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  errors: z.array(models.ErrorBadRequestError$inboundSchema),
  request$: z.instanceof(Request),
  response$: z.instanceof(Response),
  body$: z.string(),
})
  .transform((v) => {
    return new ErrorBadRequest(v, {
      request: v.request$,
      response: v.response$,
      body: v.body$,
    });
  });

/** @internal */
export type ErrorBadRequest$Outbound = {
  errors: Array<models.ErrorBadRequestError$Outbound>;
};

/** @internal */
export const ErrorBadRequest$outboundSchema: z.ZodType<
  ErrorBadRequest$Outbound,
  z.ZodTypeDef,
  ErrorBadRequest
> = z.instanceof(ErrorBadRequest)
  .transform(v => v.data$)
  .pipe(z.object({
    errors: z.array(models.ErrorBadRequestError$outboundSchema),
  }));

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorBadRequest$ {
  /** @deprecated use `ErrorBadRequest$inboundSchema` instead. */
  export const inboundSchema = ErrorBadRequest$inboundSchema;
  /** @deprecated use `ErrorBadRequest$outboundSchema` instead. */
  export const outboundSchema = ErrorBadRequest$outboundSchema;
  /** @deprecated use `ErrorBadRequest$Outbound` instead. */
  export type Outbound = ErrorBadRequest$Outbound;
}
