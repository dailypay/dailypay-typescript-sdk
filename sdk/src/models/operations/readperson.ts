/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReadPersonGlobals = {
  /**
   * The version of the DailyPay API to use for this request. If not provided, the latest version of the API will be used.
   *
   * @remarks
   */
  version?: number | undefined;
};

export type ReadPersonRequest = {
  /**
   * Unique ID of the person
   */
  personId: string;
};

/** @internal */
export const ReadPersonGlobals$inboundSchema: z.ZodType<
  ReadPersonGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().int().default(3),
});

/** @internal */
export type ReadPersonGlobals$Outbound = {
  version: number;
};

/** @internal */
export const ReadPersonGlobals$outboundSchema: z.ZodType<
  ReadPersonGlobals$Outbound,
  z.ZodTypeDef,
  ReadPersonGlobals
> = z.object({
  version: z.number().int().default(3),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadPersonGlobals$ {
  /** @deprecated use `ReadPersonGlobals$inboundSchema` instead. */
  export const inboundSchema = ReadPersonGlobals$inboundSchema;
  /** @deprecated use `ReadPersonGlobals$outboundSchema` instead. */
  export const outboundSchema = ReadPersonGlobals$outboundSchema;
  /** @deprecated use `ReadPersonGlobals$Outbound` instead. */
  export type Outbound = ReadPersonGlobals$Outbound;
}

export function readPersonGlobalsToJSON(
  readPersonGlobals: ReadPersonGlobals,
): string {
  return JSON.stringify(
    ReadPersonGlobals$outboundSchema.parse(readPersonGlobals),
  );
}

export function readPersonGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ReadPersonGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadPersonGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadPersonGlobals' from JSON`,
  );
}

/** @internal */
export const ReadPersonRequest$inboundSchema: z.ZodType<
  ReadPersonRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  person_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "person_id": "personId",
  });
});

/** @internal */
export type ReadPersonRequest$Outbound = {
  person_id: string;
};

/** @internal */
export const ReadPersonRequest$outboundSchema: z.ZodType<
  ReadPersonRequest$Outbound,
  z.ZodTypeDef,
  ReadPersonRequest
> = z.object({
  personId: z.string(),
}).transform((v) => {
  return remap$(v, {
    personId: "person_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadPersonRequest$ {
  /** @deprecated use `ReadPersonRequest$inboundSchema` instead. */
  export const inboundSchema = ReadPersonRequest$inboundSchema;
  /** @deprecated use `ReadPersonRequest$outboundSchema` instead. */
  export const outboundSchema = ReadPersonRequest$outboundSchema;
  /** @deprecated use `ReadPersonRequest$Outbound` instead. */
  export type Outbound = ReadPersonRequest$Outbound;
}

export function readPersonRequestToJSON(
  readPersonRequest: ReadPersonRequest,
): string {
  return JSON.stringify(
    ReadPersonRequest$outboundSchema.parse(readPersonRequest),
  );
}

export function readPersonRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReadPersonRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadPersonRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadPersonRequest' from JSON`,
  );
}
