/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ListJobsGlobals = {
  /**
   * The version of the DailyPay API to use for this request. If not provided, the latest version of the API will be used.
   *
   * @remarks
   */
  version?: number | undefined;
};

export type ListJobsRequest = {
  /**
   * Limit the results to documents with an external identifier matching exactly at the specified key.
   */
  filterExternalIdentifiersPrimaryIdentifier?: string | undefined;
  /**
   * Limit the results to documents with an external identifier matching exactly at the specified key.
   */
  filterExternalIdentifiersEmployeeId?: string | undefined;
  /**
   * Limit the results to documents with an external identifier matching exactly at the specified key.
   */
  filterExternalIdentifiersGroup?: string | undefined;
  /**
   * Limit the results to documents related to a specific person
   */
  filterPersonId?: string | undefined;
  /**
   * _Not yet supported_ Limit the results to documents related to a specific organization
   */
  filterOrganizationId?: string | undefined;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  filterBy?: string | undefined;
};

/** @internal */
export const ListJobsGlobals$inboundSchema: z.ZodType<
  ListJobsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().int().default(3),
});

/** @internal */
export type ListJobsGlobals$Outbound = {
  version: number;
};

/** @internal */
export const ListJobsGlobals$outboundSchema: z.ZodType<
  ListJobsGlobals$Outbound,
  z.ZodTypeDef,
  ListJobsGlobals
> = z.object({
  version: z.number().int().default(3),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListJobsGlobals$ {
  /** @deprecated use `ListJobsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListJobsGlobals$inboundSchema;
  /** @deprecated use `ListJobsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListJobsGlobals$outboundSchema;
  /** @deprecated use `ListJobsGlobals$Outbound` instead. */
  export type Outbound = ListJobsGlobals$Outbound;
}

export function listJobsGlobalsToJSON(
  listJobsGlobals: ListJobsGlobals,
): string {
  return JSON.stringify(ListJobsGlobals$outboundSchema.parse(listJobsGlobals));
}

export function listJobsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListJobsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListJobsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListJobsGlobals' from JSON`,
  );
}

/** @internal */
export const ListJobsRequest$inboundSchema: z.ZodType<
  ListJobsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "filter[external_identifiers.primary_identifier]": z.string().optional(),
  "filter[external_identifiers.employee_id]": z.string().optional(),
  "filter[external_identifiers.group]": z.string().optional(),
  "filter[person.id]": z.string().optional(),
  "filter[organization.id]": z.string().optional(),
  "filter-by": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "filter[external_identifiers.primary_identifier]":
      "filterExternalIdentifiersPrimaryIdentifier",
    "filter[external_identifiers.employee_id]":
      "filterExternalIdentifiersEmployeeId",
    "filter[external_identifiers.group]": "filterExternalIdentifiersGroup",
    "filter[person.id]": "filterPersonId",
    "filter[organization.id]": "filterOrganizationId",
    "filter-by": "filterBy",
  });
});

/** @internal */
export type ListJobsRequest$Outbound = {
  "filter[external_identifiers.primary_identifier]"?: string | undefined;
  "filter[external_identifiers.employee_id]"?: string | undefined;
  "filter[external_identifiers.group]"?: string | undefined;
  "filter[person.id]"?: string | undefined;
  "filter[organization.id]"?: string | undefined;
  "filter-by"?: string | undefined;
};

/** @internal */
export const ListJobsRequest$outboundSchema: z.ZodType<
  ListJobsRequest$Outbound,
  z.ZodTypeDef,
  ListJobsRequest
> = z.object({
  filterExternalIdentifiersPrimaryIdentifier: z.string().optional(),
  filterExternalIdentifiersEmployeeId: z.string().optional(),
  filterExternalIdentifiersGroup: z.string().optional(),
  filterPersonId: z.string().optional(),
  filterOrganizationId: z.string().optional(),
  filterBy: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    filterExternalIdentifiersPrimaryIdentifier:
      "filter[external_identifiers.primary_identifier]",
    filterExternalIdentifiersEmployeeId:
      "filter[external_identifiers.employee_id]",
    filterExternalIdentifiersGroup: "filter[external_identifiers.group]",
    filterPersonId: "filter[person.id]",
    filterOrganizationId: "filter[organization.id]",
    filterBy: "filter-by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListJobsRequest$ {
  /** @deprecated use `ListJobsRequest$inboundSchema` instead. */
  export const inboundSchema = ListJobsRequest$inboundSchema;
  /** @deprecated use `ListJobsRequest$outboundSchema` instead. */
  export const outboundSchema = ListJobsRequest$outboundSchema;
  /** @deprecated use `ListJobsRequest$Outbound` instead. */
  export type Outbound = ListJobsRequest$Outbound;
}

export function listJobsRequestToJSON(
  listJobsRequest: ListJobsRequest,
): string {
  return JSON.stringify(ListJobsRequest$outboundSchema.parse(listJobsRequest));
}

export function listJobsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListJobsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListJobsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListJobsRequest' from JSON`,
  );
}
