/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ReadPaycheckGlobals = {
  /**
   * The version of the DailyPay API to use for this request. If not provided, the latest version of the API will be used.
   *
   * @remarks
   */
  version?: number | undefined;
};

export type ReadPaycheckRequest = {
  /**
   * Unique ID of the paycheck
   */
  paycheckId: string;
};

/** @internal */
export const ReadPaycheckGlobals$inboundSchema: z.ZodType<
  ReadPaycheckGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().int().default(3),
});

/** @internal */
export type ReadPaycheckGlobals$Outbound = {
  version: number;
};

/** @internal */
export const ReadPaycheckGlobals$outboundSchema: z.ZodType<
  ReadPaycheckGlobals$Outbound,
  z.ZodTypeDef,
  ReadPaycheckGlobals
> = z.object({
  version: z.number().int().default(3),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadPaycheckGlobals$ {
  /** @deprecated use `ReadPaycheckGlobals$inboundSchema` instead. */
  export const inboundSchema = ReadPaycheckGlobals$inboundSchema;
  /** @deprecated use `ReadPaycheckGlobals$outboundSchema` instead. */
  export const outboundSchema = ReadPaycheckGlobals$outboundSchema;
  /** @deprecated use `ReadPaycheckGlobals$Outbound` instead. */
  export type Outbound = ReadPaycheckGlobals$Outbound;
}

export function readPaycheckGlobalsToJSON(
  readPaycheckGlobals: ReadPaycheckGlobals,
): string {
  return JSON.stringify(
    ReadPaycheckGlobals$outboundSchema.parse(readPaycheckGlobals),
  );
}

export function readPaycheckGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ReadPaycheckGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadPaycheckGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadPaycheckGlobals' from JSON`,
  );
}

/** @internal */
export const ReadPaycheckRequest$inboundSchema: z.ZodType<
  ReadPaycheckRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  paycheck_id: z.string(),
}).transform((v) => {
  return remap$(v, {
    "paycheck_id": "paycheckId",
  });
});

/** @internal */
export type ReadPaycheckRequest$Outbound = {
  paycheck_id: string;
};

/** @internal */
export const ReadPaycheckRequest$outboundSchema: z.ZodType<
  ReadPaycheckRequest$Outbound,
  z.ZodTypeDef,
  ReadPaycheckRequest
> = z.object({
  paycheckId: z.string(),
}).transform((v) => {
  return remap$(v, {
    paycheckId: "paycheck_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ReadPaycheckRequest$ {
  /** @deprecated use `ReadPaycheckRequest$inboundSchema` instead. */
  export const inboundSchema = ReadPaycheckRequest$inboundSchema;
  /** @deprecated use `ReadPaycheckRequest$outboundSchema` instead. */
  export const outboundSchema = ReadPaycheckRequest$outboundSchema;
  /** @deprecated use `ReadPaycheckRequest$Outbound` instead. */
  export type Outbound = ReadPaycheckRequest$Outbound;
}

export function readPaycheckRequestToJSON(
  readPaycheckRequest: ReadPaycheckRequest,
): string {
  return JSON.stringify(
    ReadPaycheckRequest$outboundSchema.parse(readPaycheckRequest),
  );
}

export function readPaycheckRequestFromJSON(
  jsonString: string,
): SafeParseResult<ReadPaycheckRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ReadPaycheckRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ReadPaycheckRequest' from JSON`,
  );
}
