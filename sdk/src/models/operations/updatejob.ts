/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type UpdateJobGlobals = {
  /**
   * The version of the DailyPay API to use for this request. If not provided, the latest version of the API will be used.
   *
   * @remarks
   */
  version?: number | undefined;
};

export type UpdateJobRequest = {
  /**
   * Unique ID of the job
   */
  jobId: string;
  jobUpdateData: models.JobUpdateData;
};

/** @internal */
export const UpdateJobGlobals$inboundSchema: z.ZodType<
  UpdateJobGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().int().default(3),
});

/** @internal */
export type UpdateJobGlobals$Outbound = {
  version: number;
};

/** @internal */
export const UpdateJobGlobals$outboundSchema: z.ZodType<
  UpdateJobGlobals$Outbound,
  z.ZodTypeDef,
  UpdateJobGlobals
> = z.object({
  version: z.number().int().default(3),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJobGlobals$ {
  /** @deprecated use `UpdateJobGlobals$inboundSchema` instead. */
  export const inboundSchema = UpdateJobGlobals$inboundSchema;
  /** @deprecated use `UpdateJobGlobals$outboundSchema` instead. */
  export const outboundSchema = UpdateJobGlobals$outboundSchema;
  /** @deprecated use `UpdateJobGlobals$Outbound` instead. */
  export type Outbound = UpdateJobGlobals$Outbound;
}

export function updateJobGlobalsToJSON(
  updateJobGlobals: UpdateJobGlobals,
): string {
  return JSON.stringify(
    UpdateJobGlobals$outboundSchema.parse(updateJobGlobals),
  );
}

export function updateJobGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJobGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJobGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJobGlobals' from JSON`,
  );
}

/** @internal */
export const UpdateJobRequest$inboundSchema: z.ZodType<
  UpdateJobRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  job_id: z.string(),
  JobUpdateData: models.JobUpdateData$inboundSchema,
}).transform((v) => {
  return remap$(v, {
    "job_id": "jobId",
    "JobUpdateData": "jobUpdateData",
  });
});

/** @internal */
export type UpdateJobRequest$Outbound = {
  job_id: string;
  JobUpdateData: models.JobUpdateData$Outbound;
};

/** @internal */
export const UpdateJobRequest$outboundSchema: z.ZodType<
  UpdateJobRequest$Outbound,
  z.ZodTypeDef,
  UpdateJobRequest
> = z.object({
  jobId: z.string(),
  jobUpdateData: models.JobUpdateData$outboundSchema,
}).transform((v) => {
  return remap$(v, {
    jobId: "job_id",
    jobUpdateData: "JobUpdateData",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateJobRequest$ {
  /** @deprecated use `UpdateJobRequest$inboundSchema` instead. */
  export const inboundSchema = UpdateJobRequest$inboundSchema;
  /** @deprecated use `UpdateJobRequest$outboundSchema` instead. */
  export const outboundSchema = UpdateJobRequest$outboundSchema;
  /** @deprecated use `UpdateJobRequest$Outbound` instead. */
  export type Outbound = UpdateJobRequest$Outbound;
}

export function updateJobRequestToJSON(
  updateJobRequest: UpdateJobRequest,
): string {
  return JSON.stringify(
    UpdateJobRequest$outboundSchema.parse(updateJobRequest),
  );
}

export function updateJobRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdateJobRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdateJobRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdateJobRequest' from JSON`,
  );
}
