/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

export type ListAccountsGlobals = {
  /**
   * The version of the DailyPay API to use for this request. If not provided, the latest version of the API will be used.
   *
   * @remarks
   */
  version?: number | undefined;
};

export type ListAccountsRequest = {
  /**
   * Limit the results to documents related to a specific person
   */
  filterPersonId?: string | undefined;
  /**
   * Limit the results to documents matching the specified account type.
   */
  filterAccountType?: models.FilterAccountType | undefined;
  /**
   * Limit the results to documents matching the specified account subtype.
   */
  filterSubtype?: string | undefined;
  /**
   * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
   */
  filterBy?: string | undefined;
};

/** @internal */
export const ListAccountsGlobals$inboundSchema: z.ZodType<
  ListAccountsGlobals,
  z.ZodTypeDef,
  unknown
> = z.object({
  version: z.number().int().default(3),
});

/** @internal */
export type ListAccountsGlobals$Outbound = {
  version: number;
};

/** @internal */
export const ListAccountsGlobals$outboundSchema: z.ZodType<
  ListAccountsGlobals$Outbound,
  z.ZodTypeDef,
  ListAccountsGlobals
> = z.object({
  version: z.number().int().default(3),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountsGlobals$ {
  /** @deprecated use `ListAccountsGlobals$inboundSchema` instead. */
  export const inboundSchema = ListAccountsGlobals$inboundSchema;
  /** @deprecated use `ListAccountsGlobals$outboundSchema` instead. */
  export const outboundSchema = ListAccountsGlobals$outboundSchema;
  /** @deprecated use `ListAccountsGlobals$Outbound` instead. */
  export type Outbound = ListAccountsGlobals$Outbound;
}

export function listAccountsGlobalsToJSON(
  listAccountsGlobals: ListAccountsGlobals,
): string {
  return JSON.stringify(
    ListAccountsGlobals$outboundSchema.parse(listAccountsGlobals),
  );
}

export function listAccountsGlobalsFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountsGlobals, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccountsGlobals$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountsGlobals' from JSON`,
  );
}

/** @internal */
export const ListAccountsRequest$inboundSchema: z.ZodType<
  ListAccountsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "filter[person.id]": z.string().optional(),
  "filter[account_type]": models.FilterAccountType$inboundSchema.optional(),
  "filter[subtype]": z.string().optional(),
  "filter-by": z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "filter[person.id]": "filterPersonId",
    "filter[account_type]": "filterAccountType",
    "filter[subtype]": "filterSubtype",
    "filter-by": "filterBy",
  });
});

/** @internal */
export type ListAccountsRequest$Outbound = {
  "filter[person.id]"?: string | undefined;
  "filter[account_type]"?: string | undefined;
  "filter[subtype]"?: string | undefined;
  "filter-by"?: string | undefined;
};

/** @internal */
export const ListAccountsRequest$outboundSchema: z.ZodType<
  ListAccountsRequest$Outbound,
  z.ZodTypeDef,
  ListAccountsRequest
> = z.object({
  filterPersonId: z.string().optional(),
  filterAccountType: models.FilterAccountType$outboundSchema.optional(),
  filterSubtype: z.string().optional(),
  filterBy: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    filterPersonId: "filter[person.id]",
    filterAccountType: "filter[account_type]",
    filterSubtype: "filter[subtype]",
    filterBy: "filter-by",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListAccountsRequest$ {
  /** @deprecated use `ListAccountsRequest$inboundSchema` instead. */
  export const inboundSchema = ListAccountsRequest$inboundSchema;
  /** @deprecated use `ListAccountsRequest$outboundSchema` instead. */
  export const outboundSchema = ListAccountsRequest$outboundSchema;
  /** @deprecated use `ListAccountsRequest$Outbound` instead. */
  export type Outbound = ListAccountsRequest$Outbound;
}

export function listAccountsRequestToJSON(
  listAccountsRequest: ListAccountsRequest,
): string {
  return JSON.stringify(
    ListAccountsRequest$outboundSchema.parse(listAccountsRequest),
  );
}

export function listAccountsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListAccountsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListAccountsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListAccountsRequest' from JSON`,
  );
}
