/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const RequestTokenServerList = [
  /**
   * Production environment
   */
  "https://auth.dailypay.com",
  /**
   * Development environment
   */
  "https://auth.uat.dailypay.com",
] as const;

export type RefreshToken = {
  /**
   * The OAuth2 grant type
   */
  grantType: string;
  /**
   * A refresh token received from a previous token request
   */
  refreshToken: string;
  /**
   * The client id of the application requesting the token.
   */
  clientId: string;
  /**
   * The client secret of the application requesting the token, if available.
   */
  clientSecret?: string | undefined;
};

export type ClientCredentialsFlow = {
  /**
   * The OAuth2 grant type
   */
  grantType: string;
  /**
   * A space-separated list of scopes to request
   */
  scope: string;
  /**
   * The client id of the application requesting the token.
   */
  clientId: string;
  /**
   * The client secret of the application requesting the token.
   */
  clientSecret: string;
};

/**
 * The OAuth2 grant type
 */
export const GrantType = {
  AuthorizationCode: "authorization_code",
} as const;
/**
 * The OAuth2 grant type
 */
export type GrantType = ClosedEnum<typeof GrantType>;

export type AuthorizationCodeFlow = {
  /**
   * The OAuth2 grant type
   */
  grantType: GrantType;
  /**
   * An authorization code received through user authorization flow
   */
  code: string;
  /**
   * The url redirected to after the authorization flow was completed by current user.
   */
  redirectUri: string;
  /**
   * A value used by the client to maintain state between the request and callback. This is used to prevent CSRF attacks.  See https://www.rfc-editor.org/rfc/rfc6749#section-10.12 for more detail.
   */
  state: string;
  /**
   * A PKCE verifier matching the challenge submitted during the authorization code request.
   */
  codeVerifier?: string | undefined;
  /**
   * The client id of the application requesting the token.
   */
  clientId: string;
  /**
   * The client secret of the application requesting the token, if available.
   */
  clientSecret?: string | undefined;
};

export type RequestTokenRequest =
  | AuthorizationCodeFlow
  | ClientCredentialsFlow
  | RefreshToken;

/**
 * Error code indicating what went wrong with the oauth token exchange. See the OAuth2 RFC for further context https://datatracker.ietf.org/doc/html/rfc6749#section-5.2
 */
export const ErrorCode = {
  InvalidRequest: "invalid_request",
  InvalidClient: "invalid_client",
  InvalidGrant: "invalid_grant",
  UnauthorizedClient: "unauthorized_client",
  UnsupportedGrantType: "unsupported_grant_type",
} as const;
/**
 * Error code indicating what went wrong with the oauth token exchange. See the OAuth2 RFC for further context https://datatracker.ietf.org/doc/html/rfc6749#section-5.2
 */
export type ErrorCode = ClosedEnum<typeof ErrorCode>;

/** @internal */
export const RefreshToken$inboundSchema: z.ZodType<
  RefreshToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  grant_type: z.string(),
  refresh_token: z.string(),
  client_id: z.string(),
  client_secret: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "grant_type": "grantType",
    "refresh_token": "refreshToken",
    "client_id": "clientId",
    "client_secret": "clientSecret",
  });
});

/** @internal */
export type RefreshToken$Outbound = {
  grant_type: string;
  refresh_token: string;
  client_id: string;
  client_secret?: string | undefined;
};

/** @internal */
export const RefreshToken$outboundSchema: z.ZodType<
  RefreshToken$Outbound,
  z.ZodTypeDef,
  RefreshToken
> = z.object({
  grantType: z.string(),
  refreshToken: z.string(),
  clientId: z.string(),
  clientSecret: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    grantType: "grant_type",
    refreshToken: "refresh_token",
    clientId: "client_id",
    clientSecret: "client_secret",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RefreshToken$ {
  /** @deprecated use `RefreshToken$inboundSchema` instead. */
  export const inboundSchema = RefreshToken$inboundSchema;
  /** @deprecated use `RefreshToken$outboundSchema` instead. */
  export const outboundSchema = RefreshToken$outboundSchema;
  /** @deprecated use `RefreshToken$Outbound` instead. */
  export type Outbound = RefreshToken$Outbound;
}

export function refreshTokenToJSON(refreshToken: RefreshToken): string {
  return JSON.stringify(RefreshToken$outboundSchema.parse(refreshToken));
}

export function refreshTokenFromJSON(
  jsonString: string,
): SafeParseResult<RefreshToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RefreshToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RefreshToken' from JSON`,
  );
}

/** @internal */
export const ClientCredentialsFlow$inboundSchema: z.ZodType<
  ClientCredentialsFlow,
  z.ZodTypeDef,
  unknown
> = z.object({
  grant_type: z.string(),
  scope: z.string(),
  client_id: z.string(),
  client_secret: z.string(),
}).transform((v) => {
  return remap$(v, {
    "grant_type": "grantType",
    "client_id": "clientId",
    "client_secret": "clientSecret",
  });
});

/** @internal */
export type ClientCredentialsFlow$Outbound = {
  grant_type: string;
  scope: string;
  client_id: string;
  client_secret: string;
};

/** @internal */
export const ClientCredentialsFlow$outboundSchema: z.ZodType<
  ClientCredentialsFlow$Outbound,
  z.ZodTypeDef,
  ClientCredentialsFlow
> = z.object({
  grantType: z.string(),
  scope: z.string(),
  clientId: z.string(),
  clientSecret: z.string(),
}).transform((v) => {
  return remap$(v, {
    grantType: "grant_type",
    clientId: "client_id",
    clientSecret: "client_secret",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ClientCredentialsFlow$ {
  /** @deprecated use `ClientCredentialsFlow$inboundSchema` instead. */
  export const inboundSchema = ClientCredentialsFlow$inboundSchema;
  /** @deprecated use `ClientCredentialsFlow$outboundSchema` instead. */
  export const outboundSchema = ClientCredentialsFlow$outboundSchema;
  /** @deprecated use `ClientCredentialsFlow$Outbound` instead. */
  export type Outbound = ClientCredentialsFlow$Outbound;
}

export function clientCredentialsFlowToJSON(
  clientCredentialsFlow: ClientCredentialsFlow,
): string {
  return JSON.stringify(
    ClientCredentialsFlow$outboundSchema.parse(clientCredentialsFlow),
  );
}

export function clientCredentialsFlowFromJSON(
  jsonString: string,
): SafeParseResult<ClientCredentialsFlow, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ClientCredentialsFlow$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ClientCredentialsFlow' from JSON`,
  );
}

/** @internal */
export const GrantType$inboundSchema: z.ZodNativeEnum<typeof GrantType> = z
  .nativeEnum(GrantType);

/** @internal */
export const GrantType$outboundSchema: z.ZodNativeEnum<typeof GrantType> =
  GrantType$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GrantType$ {
  /** @deprecated use `GrantType$inboundSchema` instead. */
  export const inboundSchema = GrantType$inboundSchema;
  /** @deprecated use `GrantType$outboundSchema` instead. */
  export const outboundSchema = GrantType$outboundSchema;
}

/** @internal */
export const AuthorizationCodeFlow$inboundSchema: z.ZodType<
  AuthorizationCodeFlow,
  z.ZodTypeDef,
  unknown
> = z.object({
  grant_type: GrantType$inboundSchema,
  code: z.string(),
  redirect_uri: z.string(),
  state: z.string(),
  code_verifier: z.string().optional(),
  client_id: z.string(),
  client_secret: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    "grant_type": "grantType",
    "redirect_uri": "redirectUri",
    "code_verifier": "codeVerifier",
    "client_id": "clientId",
    "client_secret": "clientSecret",
  });
});

/** @internal */
export type AuthorizationCodeFlow$Outbound = {
  grant_type: string;
  code: string;
  redirect_uri: string;
  state: string;
  code_verifier?: string | undefined;
  client_id: string;
  client_secret?: string | undefined;
};

/** @internal */
export const AuthorizationCodeFlow$outboundSchema: z.ZodType<
  AuthorizationCodeFlow$Outbound,
  z.ZodTypeDef,
  AuthorizationCodeFlow
> = z.object({
  grantType: GrantType$outboundSchema,
  code: z.string(),
  redirectUri: z.string(),
  state: z.string(),
  codeVerifier: z.string().optional(),
  clientId: z.string(),
  clientSecret: z.string().optional(),
}).transform((v) => {
  return remap$(v, {
    grantType: "grant_type",
    redirectUri: "redirect_uri",
    codeVerifier: "code_verifier",
    clientId: "client_id",
    clientSecret: "client_secret",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AuthorizationCodeFlow$ {
  /** @deprecated use `AuthorizationCodeFlow$inboundSchema` instead. */
  export const inboundSchema = AuthorizationCodeFlow$inboundSchema;
  /** @deprecated use `AuthorizationCodeFlow$outboundSchema` instead. */
  export const outboundSchema = AuthorizationCodeFlow$outboundSchema;
  /** @deprecated use `AuthorizationCodeFlow$Outbound` instead. */
  export type Outbound = AuthorizationCodeFlow$Outbound;
}

export function authorizationCodeFlowToJSON(
  authorizationCodeFlow: AuthorizationCodeFlow,
): string {
  return JSON.stringify(
    AuthorizationCodeFlow$outboundSchema.parse(authorizationCodeFlow),
  );
}

export function authorizationCodeFlowFromJSON(
  jsonString: string,
): SafeParseResult<AuthorizationCodeFlow, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AuthorizationCodeFlow$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AuthorizationCodeFlow' from JSON`,
  );
}

/** @internal */
export const RequestTokenRequest$inboundSchema: z.ZodType<
  RequestTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => AuthorizationCodeFlow$inboundSchema),
  z.lazy(() => ClientCredentialsFlow$inboundSchema),
  z.lazy(() => RefreshToken$inboundSchema),
]);

/** @internal */
export type RequestTokenRequest$Outbound =
  | AuthorizationCodeFlow$Outbound
  | ClientCredentialsFlow$Outbound
  | RefreshToken$Outbound;

/** @internal */
export const RequestTokenRequest$outboundSchema: z.ZodType<
  RequestTokenRequest$Outbound,
  z.ZodTypeDef,
  RequestTokenRequest
> = z.union([
  z.lazy(() => AuthorizationCodeFlow$outboundSchema),
  z.lazy(() => ClientCredentialsFlow$outboundSchema),
  z.lazy(() => RefreshToken$outboundSchema),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RequestTokenRequest$ {
  /** @deprecated use `RequestTokenRequest$inboundSchema` instead. */
  export const inboundSchema = RequestTokenRequest$inboundSchema;
  /** @deprecated use `RequestTokenRequest$outboundSchema` instead. */
  export const outboundSchema = RequestTokenRequest$outboundSchema;
  /** @deprecated use `RequestTokenRequest$Outbound` instead. */
  export type Outbound = RequestTokenRequest$Outbound;
}

export function requestTokenRequestToJSON(
  requestTokenRequest: RequestTokenRequest,
): string {
  return JSON.stringify(
    RequestTokenRequest$outboundSchema.parse(requestTokenRequest),
  );
}

export function requestTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<RequestTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => RequestTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'RequestTokenRequest' from JSON`,
  );
}

/** @internal */
export const ErrorCode$inboundSchema: z.ZodNativeEnum<typeof ErrorCode> = z
  .nativeEnum(ErrorCode);

/** @internal */
export const ErrorCode$outboundSchema: z.ZodNativeEnum<typeof ErrorCode> =
  ErrorCode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorCode$ {
  /** @deprecated use `ErrorCode$inboundSchema` instead. */
  export const inboundSchema = ErrorCode$inboundSchema;
  /** @deprecated use `ErrorCode$outboundSchema` instead. */
  export const outboundSchema = ErrorCode$outboundSchema;
}
