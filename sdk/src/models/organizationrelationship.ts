/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  OrganizationIdentifier,
  OrganizationIdentifier$inboundSchema,
  OrganizationIdentifier$Outbound,
  OrganizationIdentifier$outboundSchema,
} from "./organizationidentifier.js";

export type OrganizationRelationship = {
  data: OrganizationIdentifier;
};

/** @internal */
export const OrganizationRelationship$inboundSchema: z.ZodType<
  OrganizationRelationship,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: OrganizationIdentifier$inboundSchema,
});

/** @internal */
export type OrganizationRelationship$Outbound = {
  data: OrganizationIdentifier$Outbound;
};

/** @internal */
export const OrganizationRelationship$outboundSchema: z.ZodType<
  OrganizationRelationship$Outbound,
  z.ZodTypeDef,
  OrganizationRelationship
> = z.object({
  data: OrganizationIdentifier$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OrganizationRelationship$ {
  /** @deprecated use `OrganizationRelationship$inboundSchema` instead. */
  export const inboundSchema = OrganizationRelationship$inboundSchema;
  /** @deprecated use `OrganizationRelationship$outboundSchema` instead. */
  export const outboundSchema = OrganizationRelationship$outboundSchema;
  /** @deprecated use `OrganizationRelationship$Outbound` instead. */
  export type Outbound = OrganizationRelationship$Outbound;
}

export function organizationRelationshipToJSON(
  organizationRelationship: OrganizationRelationship,
): string {
  return JSON.stringify(
    OrganizationRelationship$outboundSchema.parse(organizationRelationship),
  );
}

export function organizationRelationshipFromJSON(
  jsonString: string,
): SafeParseResult<OrganizationRelationship, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OrganizationRelationship$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OrganizationRelationship' from JSON`,
  );
}
