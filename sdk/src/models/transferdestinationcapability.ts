/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { ClosedEnum } from "../types/enums.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * The expected time for the transfer to be completed.
 */
export const TransferDestinationCapabilitySchedule = {
  WithinThirtyMinutes: "WITHIN_THIRTY_MINUTES",
  NextBusinessDay: "NEXT_BUSINESS_DAY",
} as const;
/**
 * The expected time for the transfer to be completed.
 */
export type TransferDestinationCapabilitySchedule = ClosedEnum<
  typeof TransferDestinationCapabilitySchedule
>;

export type TransferDestinationCapability = {
  /**
   * The expected time for the transfer to be completed.
   */
  schedule: TransferDestinationCapabilitySchedule;
  /**
   * A monetary quantity expressed in units of the lowest denomination in
   *
   * @remarks
   * the associated currency. For example, `{ amount: 299, currency: 'USD'
   * }` resolves to $2.99.
   *
   * If a transfer incurs a fee, the fee will be deducted from the amount of
   * the transfer.
   */
  fee: number;
  /**
   * A three-letter ISO 4217 currency code. For example, `USD` for US Dollars, `EUR` for Euros, or `JPY` for Japanese Yen.
   */
  currency: string;
};

/** @internal */
export const TransferDestinationCapabilitySchedule$inboundSchema:
  z.ZodNativeEnum<typeof TransferDestinationCapabilitySchedule> = z.nativeEnum(
    TransferDestinationCapabilitySchedule,
  );

/** @internal */
export const TransferDestinationCapabilitySchedule$outboundSchema:
  z.ZodNativeEnum<typeof TransferDestinationCapabilitySchedule> =
    TransferDestinationCapabilitySchedule$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferDestinationCapabilitySchedule$ {
  /** @deprecated use `TransferDestinationCapabilitySchedule$inboundSchema` instead. */
  export const inboundSchema =
    TransferDestinationCapabilitySchedule$inboundSchema;
  /** @deprecated use `TransferDestinationCapabilitySchedule$outboundSchema` instead. */
  export const outboundSchema =
    TransferDestinationCapabilitySchedule$outboundSchema;
}

/** @internal */
export const TransferDestinationCapability$inboundSchema: z.ZodType<
  TransferDestinationCapability,
  z.ZodTypeDef,
  unknown
> = z.object({
  schedule: TransferDestinationCapabilitySchedule$inboundSchema,
  fee: z.number().int(),
  currency: z.string(),
});

/** @internal */
export type TransferDestinationCapability$Outbound = {
  schedule: string;
  fee: number;
  currency: string;
};

/** @internal */
export const TransferDestinationCapability$outboundSchema: z.ZodType<
  TransferDestinationCapability$Outbound,
  z.ZodTypeDef,
  TransferDestinationCapability
> = z.object({
  schedule: TransferDestinationCapabilitySchedule$outboundSchema,
  fee: z.number().int(),
  currency: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransferDestinationCapability$ {
  /** @deprecated use `TransferDestinationCapability$inboundSchema` instead. */
  export const inboundSchema = TransferDestinationCapability$inboundSchema;
  /** @deprecated use `TransferDestinationCapability$outboundSchema` instead. */
  export const outboundSchema = TransferDestinationCapability$outboundSchema;
  /** @deprecated use `TransferDestinationCapability$Outbound` instead. */
  export type Outbound = TransferDestinationCapability$Outbound;
}

export function transferDestinationCapabilityToJSON(
  transferDestinationCapability: TransferDestinationCapability,
): string {
  return JSON.stringify(
    TransferDestinationCapability$outboundSchema.parse(
      transferDestinationCapability,
    ),
  );
}

export function transferDestinationCapabilityFromJSON(
  jsonString: string,
): SafeParseResult<TransferDestinationCapability, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransferDestinationCapability$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransferDestinationCapability' from JSON`,
  );
}
